% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SurvivalRoomMaintenance is UtilityFunctions

constants:

   include blakston.khd

resources:

   public_survival_started = \
      "%s has started a public co-op survival arena. It will begin in "
      "three minutes."
   
   public_ended = \
      "The public co-op survival arena has ended at level %i."

properties:

   plSurvivalRooms = $
   
   % Are Survival Arenas active?
   piPublicSurvivalEnabled = FALSE
   piSoloSurvivalEnabled = FALSE
   piGuildSurvivalEnabled = FALSE
   
   % At what level multiple do these increase?
   piSurvivalXPIncreaseLevel = 8
   piSurvivalTPIncreaseLevel = 8
   piSurvivalLootIncreaseLevel = 4

   % How much extra cash on each monster kill per level?
   piSurvivalCashPerLevel = 30

   % Don't use these rooms (list of RIDs)
   plExcludedRoomsList = $

   % Default time between rounds
   piRegroupTime = 15000
   
   % Default time between wall blitzes (mobs walk through walls)
   piWallBlitzTime = 300000
   
   % Default last join level
   piLastJoinLevel = 6

   % Do we restore resources on level completion?
   pbRestoreResources = TRUE

messages:

   Constructor()
   {
      Send(self,@Recreate);
      
      plExcludedRoomsList = [RID_MAR_SMITHY,
                             RID_MAR_ELDER_HUT,
                             RID_SEWER_KING,
                             RID_TEMPLE_RIIJA,
                             RID_MAR_CRYPT3A];

      return;
   }

   Recreate()
   {
      return;
   }
   
   CreateRoom(who=$,guild_survival=FALSE,iPublic=FALSE,sString=$,
              lSurvivalOptions=$,poForceBaseRoom=$)
   {
      local poRoom, poBaseRoom, plAllRooms, iRID, i, plPlayersLoggedOn, z,
            plExcludedRoomsObjs, iNatural, iPvP, o;
      
      if guild_survival = TRUE
         AND NOT piGuildSurvivalEnabled
      {
         return $;
      }
      
      if iPublic = TRUE
         AND NOT piPublicSurvivalEnabled
      {
         return $;
      }
      
      if iPublic = FALSE
         AND guild_survival = FALSE
         AND NOT piSoloSurvivalEnabled
      {
         return $;
      }
      
      iNatural = TRUE;
      iPvP = FALSE;
      for o in lSurvivalOptions
      {
         if o = OPT_NATURAL
         {
            iNatural = FALSE;
         }
         
         if o = OPT_PVP_ON
         {
            iPvP = TRUE;
         }
      }

      plAllRooms = Send(SYS,@ListCopy,#source=Send(SYS,@GetRooms));

      % If we sent the string used to activate the arena (only for public)
      % check it for a room name to use. If we sent a room name, use that
      % for the survival room.
      if sString <> $
      {
         for i in plAllRooms
         {
            if StringContain(sString,Send(i,@GetName))
            {
               poForceBaseRoom = i;

               break;
            }
         }
      }

      plExcludedRoomsObjs = $;
      for z in plExcludedRoomsList
      {
         plExcludedRoomsObjs = Cons(Send(SYS,@FindRoomByNum,#num=z),
                                    plExcludedRoomsObjs);
      }

      % DMs can choose any room, but users can only pick from the allowed
      % rooms.  Set poBaseRoom to the chosen room so it can be checked
      % in the following code.
      if NOT IsClass(who,&DM)
         AND poForceBaseRoom <> $
      {
         poBaseRoom = poForceBaseRoom;
         poForceBaseRoom = $;
      }
      else
      {
         poBaseRoom = Nth(plAllRooms,Random(1,Length(plAllRooms)));
      }

      % Ensure it's a monster room, and shrink the list on every failure.
      if (NOT IsClass(poBaseRoom,&MonsterRoom))
         OR IsClass(poBaseRoom,&SurvivalRoom)
         OR (plExcludedRoomsObjs <> $
            AND FindListElem(plExcludedRoomsObjs,poBaseRoom))
         OR (iNatural AND Send(poBaseRoom,@GetGenerators) = $)
      {
         while (NOT IsClass(poBaseRoom,&MonsterRoom))
            OR IsClass(poBaseRoom,&SurvivalRoom)
            OR (plExcludedRoomsObjs <> $
               AND FindListElem(plExcludedRoomsObjs,poBaseRoom))
            OR (iNatural AND Send(poBaseRoom,@GetGenerators) = $)
         {
            plAllRooms = DelListElem(plAllRooms,poBaseRoom);
            poBaseRoom = Nth(plAllRooms,Random(1,Length(plAllRooms)));
         }
      }

      if NOT IsClass(poBaseRoom,&MonsterRoom)
      {
         return $;
      }

      % If we still have a forced base room, it was given by a DM.
      % Set the base room to the forced one.
      if poForceBaseRoom <> $
      {
         poBaseRoom = poForceBaseRoom;
      }

      iRID = Send(self,@GetNextAvailableRID);
      
      if iRID = 0
      {
         return $;
      }
      
      if guild_survival
      {
         Send(SYS,@CreateOneRoomIfNew,#num=iRID,
               #class=&SurvivalRoom,
               #poGuild=Send(who,@GetGuild),
               #base_room=poBaseRoom,
               #iPvP=iPvP);
      }
      else
      {
         Send(SYS,@CreateOneRoomIfNew,#num=iRID,
               #class=&SurvivalRoom,
               #iPublic=iPublic,
               #base_room=poBaseRoom,
               #iPvP=iPvP);
      }

      poRoom = Send(SYS,@FindRoomByNum,#num=iRID);
      
      if poRoom <> $
      {
         plSurvivalRooms = Cons(poRoom,plSurvivalRooms);
         Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=iRID);
         Send(poRoom,@Teleport,#what=who);

         if iPublic
         {
            plPlayersLoggedOn = Send(SYS,@GetUsersLoggedOn);
         
            for i in plPlayersLoggedOn
            {
               Send(i,@MsgSendUser,#message_rsc=public_survival_started,
                                   #parm1=Send(who,@GetTrueName));
            }
         }
      }
      
      return poRoom;
   }

   GetNextAvailableRID()
   {
      local iRID, i, bExists;

      iRID = RID_SURVIVAL_START;

      if plSurvivalRooms = $
      {
         return iRID;
      }

      while iRID <= RID_SURVIVAL_END
      {
         bExists = FALSE;
         for i in plSurvivalRooms
         {
            if Send(i,@GetRoomNum) = iRID
            {
               bExists = TRUE;
            }
         }
         
         if NOT bExists
         {
            return iRID;
         }
         
         iRID = iRID + 1;
      }

      return 0;
   }
   
   FindRoomByGuild(oGuild=$)
   {
      local i;
      
      for i in plSurvivalRooms
      {
         if Send(i,@GetGuildAssociation) = oGuild
            AND Send(i,@GetAllowJoins)
         {
            return i;
         }
      }
      
      return $;
   }
   
   FindPublicRoom()
   {
      local i;
      
      for i in plSurvivalRooms
      {
         if Send(i,@GetPublicStatus) = TRUE
            AND Send(i,@GetAllowJoins)
         {
            return i;
         }
      }
      
      return $;
   }

   RoomDeleted(what = $)
   {
      local plUsers, i;

      if plSurvivalRooms <> $
         AND FindListElem(plSurvivalRooms,what) <> 0
      {
         if Send(what,@GetPublicStatus)
         {
            plUsers = Send(SYS,@GetUsersLoggedOn);
            for i in plUsers
            {
               Send(i,@MsgSendUser,#message_rsc=public_ended,
                                   #parm1=Send(what,@GetLevel));
               % Keep track of highest level.
               Send(Send(SYS,@GetStatistics),@RecordPublicSurvivalLevel,
                     #iLevel=Send(what,@GetLevel));
            }
         }
         else
         {
            if Send(what,@GetGuildAssociation) <> $
            {
               Send(Send(SYS,@GetStatistics),@RecordGuildSurvivalLevel,
                     #iLevel=Send(what,@GetLevel));
            }
            else
            {
               Send(Send(SYS,@GetStatistics),@RecordSoloSurvivalLevel,
                     #iLevel=Send(what,@GetLevel));
            }
         }

         plSurvivalRooms = DelListElem(plSurvivalRooms,what);
      }

      return;
   }

   GetRegroupTime()
   {
      return piRegroupTime;
   }

   GetPublicSurvivalEnabled()
   {
      return piPublicSurvivalEnabled;
   }
   
   GetGuildSurvivalEnabled()
   {
      return piGuildSurvivalEnabled;
   }
   
   GetSoloSurvivalEnabled()
   {
      return piSoloSurvivalEnabled;
   }
   
   GetSurvivalXP()
   {
      return piSurvivalXPIncreaseLevel;
   }
   
   GetSurvivalCash()
   {
      return piSurvivalCashPerLevel;
   }
   
   GetSurvivalTP()
   {
      return piSurvivalTPIncreaseLevel;
   }
   
   GetSurvivalLoot()
   {
      return piSurvivalLootIncreaseLevel;
   }

   GetWallBlitzTime()
   {
      return piWallBlitzTime;
   }

   GetLastJoinLevel()
   {
      return piLastJoinLevel;
   }

   GetRestoreResources()
   {
      return pbRestoreResources;
   }

   ExcludeRID(iRID=RID_MAR_SMITHY)
   {
      if plExcludedRoomsList = $
         OR FindListElem(plExcludedRoomsList,iRID) = 0
      {
         plExcludedRoomsList = Cons(iRID,plExcludedRoomsList);

         return TRUE;
      }

      return FALSE;
   }

   AllowRID(iRID=0)
   {
      if plExcludedRoomsList <> $
         AND FindListElem(plExcludedRoomsList,iRID) <> 0
      {
         plExcludedRoomsList = DelListElem(plExcludedRoomsList,iRID);

         return TRUE;
      }

      return FALSE;
   }

   SurvivalStatusReport()
   {
      local i;

      % Report highest levels reached.
      Debug("Highest Public Survival level reached is ",
                  Send(Send(SYS,@GetStatistics),@RecordPublicSurvivalLevel));
      Debug("Highest Guild Survival level reached is ",
                  Send(Send(SYS,@GetStatistics),@RecordGuildSurvivalLevel));
      Debug("Highest Solo Survival level reached is ",
                  Send(Send(SYS,@GetStatistics),@RecordSoloSurvivalLevel));

      if plSurvivalRooms = $
      {
         Debug("No survival arenas active.");

         return;
      }

      for i in plSurvivalRooms
      {
         if Send(i,@GetPublicStatus)
         {
            Debug("Public arena is active, object is ",i," and base room is ",
                  Send(Send(i,@GetBaseRoom),@GetName));
            Debug("Public arena is on level ",Send(i,@GetLevel)," and has ",
                  Length(Send(i,@GetParticipants))," participants remaining.");
         }
         else
         {
            if Send(i,@GetGuildAssociation)
            {
               Debug("Guild arena is active, object is ",i," and base room is ",
                     Send(Send(i,@GetBaseRoom),@GetName));
               Debug("Guild arena is on level ",Send(i,@GetLevel)," and has ",
                     Length(Send(i,@GetParticipants))," participants remaining.");
            }
            else
            {
               % Must be solo.
               Debug("Solo arena is active, object is ",i," and base room is ",
                     Send(Send(i,@GetBaseRoom),@GetName));
               Debug("Solo arena is on level ",Send(i,@GetLevel)," and was started by ",
                     Send(First(Send(i,@GetParticipants)),@GetTrueName));
            }
         }
      }

      return plSurvivalRooms;
   }
   
   GetRoundOneMonsters()
   {
      return [[&GiantRat, 14],
              [&SpiderBaby, 14],
              [&Centipede, 21],
              [&EvilFairy, 7],
              [&FungusBeast, 16],
              [&SpectralMummy, 14],
              [&Slime, 14]];
   }
   
   GetRoundTwoMonsters()
   {
      return [[&GiantRat, 6],
              [&SpiderBaby, 6],
              [&Centipede, 6],
              [&EvilFairy, 3],
              [&FungusBeast, 9],
              [&SpectralMummy, 6],
              [&Slime, 9],
              [&Zombie, 11],
              [&Spider, 6],
              [&Scorpion, 9],
              [&BatteredSkeleton, 11],
              [&Skeleton, 3],
              [&RedAnt, 6],
              [&Frogman, 6],
              [&Troll, 3]];
   }
   
   GetRoundThreeMonsters()
   {
      return [[&GiantRat, 3],
              [&SpiderBaby, 3],
              [&Centipede, 3],
              [&EvilFairy, 3],
              [&FungusBeast, 6],
                            [&SpectralMummy, 6],
                            [&Slime, 9],
                            [&Zombie, 11],
                            [&Spider, 6],
                            [&Scorpion, 6],
                            [&BatteredSkeleton, 11],
                            [&Skeleton, 3],
                            [&RedAnt, 3],
                            [&Frogman, 6],
                            [&Troll, 3],
                            [&GroundWorm, 3],
                            [&CaveOrc, 6],
                            [&OrcWizard, 6],
                            [&SnowRat, 3]];
   }
   
   GetRoundFourMonsters()
   {
      return [[&GiantRat, 3],
              [&SpiderBaby, 3],
              [&Centipede, 3],
              [&EvilFairy, 3],
              [&FungusBeast, 3],
              [&SpectralMummy, 3],
              [&Slime, 6],
              [&Zombie, 3],
              [&Spider, 3],
              [&Scorpion, 6],
              [&BatteredSkeleton, 11],
              [&Skeleton, 3],
              [&RedAnt, 3],
              [&Frogman, 6],
              [&Troll, 3],
              [&GroundWorm, 3],
              [&CaveOrc, 6],
              [&OrcWizard, 6],
              [&SnowRat, 3],
              [&TuskedSkeleton, 11],
              [&Lupogg, 3],
              [&DeathSpider, 3],
              [&DragonFly, 3],
              [&Avar, 3]];
   }
   
   GetRoundFiveMonsters()
   {
      return [[&GiantRat, 3],
              [&SpiderBaby, 3],
              [&Centipede, 3],
              [&EvilFairy, 3],
              [&FungusBeast, 3],
              [&SpectralMummy, 3],
              [&Slime, 6],
              [&Zombie, 3],
              [&Spider, 3],
              [&Scorpion, 6],
              [&BatteredSkeleton, 5],
              [&Skeleton, 3],
              [&RedAnt, 3],
              [&Frogman, 6],
              [&Troll, 3],
              [&GroundWorm, 3],
              [&CaveOrc, 6],
              [&OrcWizard, 6],
              [&SnowRat, 3],
              [&TuskedSkeleton, 5],
              [&Lupogg, 3],
              [&DeathSpider, 3],
              [&DragonFly, 3],
              [&Avar, 3],
              [&AvarShaman, 3],
              [&DuskRat, 3],
              [&EvilEnt, 3],
              [&Iceperson, 3]];
   }
   
   GetRoundSixMonsters()
   {
      return [[&GiantRat, 3],
              [&SpiderBaby, 3],
              [&Centipede, 3],
              [&EvilFairy, 3],
              [&FungusBeast, 3],
              [&SpectralMummy, 3],
              [&Slime, 3],
              [&Zombie, 3],
              [&Spider, 3],
              [&Scorpion, 6],
              [&BatteredSkeleton, 5],
              [&Skeleton, 3],
              [&RedAnt, 3],
              [&Frogman, 6],
              [&Troll, 3],
              [&GroundWorm, 3],
              [&CaveOrc, 3],
              [&OrcWizard, 3],
              [&SnowRat, 3],
              [&TuskedSkeleton, 5],
              [&Lupogg, 3],
              [&DeathSpider, 3],
              [&DragonFly, 3],
              [&Avar, 3],
              [&AvarShaman, 3],
              [&DuskRat, 3],
              [&EvilEnt, 3],
              [&Iceperson, 3],
              [&MolluskMonster, 3],
              [&NarthylWorm, 3],
              [&DaemonSkeleton, 3]];
   }
   
   GetAllMonsters()
   {
      return [[&GiantRat, 3],
              [&SpiderBaby, 2],
              [&Centipede, 3],
              [&EvilFairy, 2],
              [&FungusBeast, 3],
              [&SpectralMummy, 3],
              [&Slime, 3],
              [&Zombie, 3],
              [&Spider, 3],
              [&Scorpion, 3],
              [&BatteredSkeleton, 3],
              [&Skeleton, 3],
              [&RedAnt, 3],
              [&Frogman, 3],
              [&Troll, 3],
              [&GroundWorm, 3],
              [&CaveOrc, 3],
              [&OrcWizard, 3],
              [&SnowRat, 3],
              [&TuskedSkeleton, 3],
              [&Lupogg, 3],
              [&DeathSpider, 3],
              [&DragonFly, 3],
              [&Avar, 3],
              [&AvarShaman, 3],
              [&DuskRat, 3],
              [&EvilEnt, 3],
              [&Iceperson, 3],
              [&MolluskMonster, 3],
              [&NarthylWorm, 3],
              [&DaemonSkeleton, 3],
              [&AvarChieftain, 3],
              [&Kriipa, 3],
              [&StoneTroll, 3]];
   }
   
   GetBosses()
   {
      return [&LupoggKing,
              &EarthElementalChampion,
              &FireElementalChampion,
              &IceElementalChampion,
              &NeruElementalChampion,
              &GiantRatKing,
              &DarkAngel,
              &Thrasher,
              &Ghost];
   }
   
   GetMiniBosses()
   {
      return [&GroundWormQueen,
              &OrcPitBoss,
              &DragonFlyQueen,
              &Shadowbeast,
              &SpiderQueen,
              &Yeti,
              &EarthElemental,
              &FireElemental,
              &IceElemental,
              &NeruElemental];
   }
   
   GetFixedRewards()
   {
      return [[&AntMask,10],
              [&RatMask,15],
              [&MummyMask,20],
              [&SkullMask,25],
              [&TrollMask,30],
              [&ShrunkenHeadMask,35],
              [&DaemonMask,40],
              [&FeyMask,45],
              [&XeoMask,50],
              [&KriipaMask,55],
              [&CowMask,75],
              [&KraananCharm,100]];
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

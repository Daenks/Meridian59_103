% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DesertMaintenance is UtilityFunctions

constants:
   
   include blakston.khd

   % How wide is the desert area?
   LONGITUDE_TOTAL = 9

resources:

properties:

   plDesertRooms = $

messages: 

   Constructor()
   {
      Send(self,@Recreate);
      return;
   }

   Recreate()
   {
      local i;
      
      for i in plDesertRooms
      {
         Send(Send(SYS,@FindRoomByNum,#num=i),@Delete);
      }

      plDesertRooms = $;
      
      return;
   }
   
   DetermineWhereToSendTraveler(who=$,iLongitude=0,iRIDLastRoom=0,
                                iLastRoomDirection=0)
   {
      local i, n, user_count, plRoomsWithPlayersInThem, bMeetSomeone,
            iDestinationRID, oRoom;
      
      plRoomsWithPlayersInThem = $;
      bMeetSomeone = FALSE;
      
      for i in plDesertRooms
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=i);
         if Send(oRoom,@IsUserInRoom)
            AND Send(who,@GetOwner) <> oRoom
         {
            user_count = 0;
            
            for n in Send(oRoom,@GetHolderActive)
            {
               If IsClass(First(n),&User)
               {
                  user_count = user_count + 1;
               }
            }
            
            if user_count >= 2
            {
               % No room may have more than 2 users.
               continue;
            }
            else
            {
               plRoomsWithPlayersInThem = Cons(i,plRoomsWithPlayersInThem);
            }
         }
      }
      
      If plRoomsWithPlayersInThem <> $
         AND Random(1,100) <= Length(plRoomsWithPlayersInThem)*2
      {
         bMeetSomeone = TRUE;
      }
      
      if bMeetSomeone
      {
         iDestinationRID = Nth(plRoomsWithPlayersInThem,
                                Random(1,Length(plRoomsWithPlayersInThem)));
      }
      else
      {
         iDestinationRID = Send(self,@CreateNewDesertRoom,
                                #iLongitude=iLongitude,
                                #iRIDLastRoom=iRIDLastRoom,
                                #iLastRoomDirection=iLastRoomDirection);
      }
      
      return iDestinationRID;
   }

   CreateNewDesertRoom(iLongitude=0,iRIDLastRoom=0,iLastRoomDirection=0)
   {
      local iRID;
      
      % set up the room
      iRID = send(self,@GetNextAvailableRID);
      Send(SYS,@CreateOneRoomIfNew,#num=iRID,#class=&BlackDesertNoSlopes);
      Send(Send(SYS,@FindRoomByNum,#num=iRID),@SetProperties,
                                 #iLongitude=iLongitude,
                                 #iRIDLastRoom=iRIDLastRoom,
                                 #iLastRoomDirection=iLastRoomDirection);
      Send(Send(SYS,@FindRoomByNum,#num=iRID),@Randomize);
      plDesertRooms = cons(iRID,plDesertRooms);

      return iRID;
   }

   GetNextAvailableRID()
   {
      local iRID;

      iRID = RID_DESERT_START;

      if plDesertRooms = $
      {
         return iRID;
      }
      
      while TRUE  % Keep going until we find something!
      {
         if NOT FindListElem(plDesertRooms,iRID)
         {
            return iRID;
         }
         
         iRID = iRID + 1;
      }
      
      return 0;
   }

   RoomDeleted(what=$)
   {
      local iRID, i, oRoom;

      iRID = send(what,@GetRoomNum);
      
      % Remove references to the room by other desert rooms
      for i in plDesertRooms
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=i);
         if Send(oRoom,@GetRIDLastRoom) = iRID
         {
            Send(oRoom,@SetRIDLastRoom);
            Send(oRoom,@SetLastRoomDirection);
         }
      }

      if FindListElem(plDesertRooms,iRID)
      {
         plDesertRooms = DelListElem(plDesertRooms,iRID);
      }
      else
      {
         DEBUG("RoomDeleted:: Tried to remove an unlisted room.");
      }

      return;
   }

   NewDay()
   {
      local i;

      for i in plDesertRooms
      {
         Send(Send(SYS,@FindRoomByNum,#num=i),@Randomize,#iSpeed=4);
      }

      return;
   }
   
   AdminForceDesert(who=$)
   {
      local iRID, oRoom;
      iRID = Send(self,@DetermineWhereToSendTraveler,#who=who);
      oRoom = Send(SYS,@FindRoomByNum,#num=iRID);
      
      Send(SYS,@UtilGoNearSquare,#what=who,
           #where=oRoom,
           #new_row=Send(oRoom,@GetRoomRows)/2,
           #new_col=Send(oRoom,@GetRoomCols)/2);
      
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
TosHousingMaintenance is UtilityFunctions

constants:

   include blakston.khd

resources:

   TosHousingMaintenance_house_already = "You already have a house in Tos."
   TosHousingMaintenance_not_enough_money = \
      "You need half a million shillings to buy a house."

properties:

   plHoldingDuringRecreate = $

   plHousesBought = $

messages:

   Constructor()
   {
      Send(self,@Recreate);

      return;
   }

   Recreate()
   {
      return;
   }

   BuyHouse(who=$,iCost=500000)
   {
      local iRID, oRoom, oMoney;

      % Check if the player already has a house.  If so, complain and bail.
      oRoom = Send(self,@FindRoomByPlayer,#who=who);
      if oRoom <> $
      {
         Send(who,@MsgSendUser,
              #message_rsc=TosHousingMaintenance_house_already);
         return;
      }

      % Check for the fee.  If too poor, complain and bail.
      oMoney = Send(who,@GetMoneyObject);

      if oMoney = $ OR Send(oMoney,@GetNumber) < iCost
      {
         Send(who,@MsgSendUser,
                  #message_rsc=TosHousingMaintenance_not_enough_money);
         return;
      }

      % Deduct the fee
      Send(oMoney,@SubtractNumber,#number=iCost);

      % Set up the room
      iRID = Send(self,@GetNextAvailableRID);
      Send(SYS,@CreateOneRoomIfNew,#num=iRID,#class=&TosHousing);
      Send(Send(SYS,@FindRoomByNum,#num=iRID),@SetOwner,#who=who);
      plHousesBought = Cons(iRID,plHousesBought);

      % Add it to the room enter count statistics.
      Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=iRID);

      % Create the key and give it to the player
      Send(who,@NewHold,#what=Create(&RoomKey,#iRID=iRID));

      return;
   }

   FindRoomByPlayer(who=$)
   {
      local iRID, oRoom;

      for iRID in plHousesBought
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=iRID);
         if Send(oRoom,@GetHouseOwner) = who
         {
            return oRoom;
         }
      }

      return $;
   }

   GetNextAvailableRID()
   {
      local iRID;

      iRID = RID_TOS_HOUSING_START;

      if plHousesBought = $
      {
         return iRID;
      }

      while TRUE  % Keep going until we find something!
      {
         if NOT FindListElem(plHousesBought,iRID)
         {
            return iRID;
         }
         
         iRID = iRID + 1;
      }

      return 0;
   }

   RoomDeleted(what=$)
   {
      local lRoomsRented, iRID;

      iRID = Send(what,@GetRoomNum);

      if FindListElem(plHousesBought,iRID)
      {
         plHousesBought = DelListElem(plHousesBought,iRID);
      }
      else
      {
         Debug("RoomDeleted:: Tried to remove an unlisted room.");
      }

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

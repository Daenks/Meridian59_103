% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
GameEventEngine is UtilityFunctions

constants:

   include blakston.khd

   MSG_EVT_START = 1
   MSG_EVT_STOP = 2
   MSG_EVT_ADVANCE = 3
   
resources:

classvars:

properties:

   plGameEvents = $
   plActiveEvents = $
   ptMaintenance = $
   piMaintenanceInterval = 1000
   
messages:

   Constructor()
   {
      Send(self,@Recreate);
   
      return;
   }
   
   OnTimer()
   {
      local i;
      
      for i in plActiveEvents
      {
         Send(i,@Update);
      }
      
      if plActiveEvents <> $
      {
         CreateTimer(self,@OnTimer,piMaintenanceInterval);
      }
      
      return;
   }
   
   Recreate()
   {
      plGameEvents = $;
      plActiveEvents = $;
   
      debug("Creating Events");
      plGameEvents = Cons(&RatInvasion,plGameEvents);
      plGameEvents = Cons(&OrcInvasion,plGameEvents);
   
      return;
   }
   
   Delete()
   {
      return;
   }
   
   NewMinute()
   {
      local i;
      
      for i in plActiveEvents
      {
         Send(i,@NewMinute);
      }
   
      return;
   }
   
   NewHour()
   {
      local i;
      
      for i in plActiveEvents
      {
         Send(i,@NewHOur);
      }
      
      return;
   }
   
   NewDay()
   {
      local i;
      
      for i in plActiveEvents
      {
         Send(i,@NewDay);
      }
      
      return;
   }
   
   NewMonth()
   {
      local i;
      
      for i in plActiveEvents
      {
         Send(i,@Update);
      }
      
      return;
   }
   
   NewYear()
   {
      local i;
      
      for i in plActiveEvents
      {
         Send(i,@NewYear);
      }
   
      return;
   }
   
   ScheduleEventInMinutes(iClass=$,minutes=$,message=MSG_EVT_START,parm1=$,
                          parm2=$,parm3=$,parm4=$,parm5=$,parm6=$,parm7=$)
   {
      local oRealTime;
   
      oRealTime = Send(SYS,@GetRealTimeObject);
      
      Send(oRealTime,@RegisterCallbackInMinutes,
                     #oObject=self,
                     #minutes=minutes,
                     #message=message,
                     #parm1=iClass,
                     #parm2=parm2,
                     #parm3=parm3,
                     #parm4=parm4,
                     #parm5=parm5,
                     #parm6=parm6,
                     #parm7=parm7);
      
      return;
   }
   
   ScheduleEventInHours(iClass=$,hours=$,message=MSG_EVT_START,parm1=$,
                          parm2=$,parm3=$,parm4=$,parm5=$,parm6=$,parm7=$)
   {
      local oRealTime;
   
      oRealTime = Send(SYS,@GetRealTimeObject);
      
      Send(oRealTime,@RegisterCallbackInHours,
                     #oObject=self,
                     #hours=hours,
                     #message=message,
                     #parm1=iClass,
                     #parm2=parm2,
                     #parm3=parm3,
                     #parm4=parm4,
                     #parm5=parm5,
                     #parm6=parm6,
                     #parm7=parm7);
      
      return;
   }
   
   ScheduleEventInDays(iClass=$,days=$,message=MSG_EVT_START,parm1=$,
                       parm2=$,parm3=$,parm4=$,parm5=$,parm6=$,parm7=$)
   {
      local oRealTime;
   
      oRealTime = Send(SYS,@GetRealTimeObject);
      
      Send(oRealTime,@RegisterCallbackInDays,
                     #oObject=self,
                     #days=days,
                     #message=message,
                     #parm1=iClass,
                     #parm2=parm2,
                     #parm3=parm3,
                     #parm4=parm4,
                     #parm5=parm5,
                     #parm6=parm6,
                     #parm7=parm7);
      
      return;
   }
   
   ScheduleEventInWeeks(iClass=$,weeks=$,message=MSG_EVT_START,parm1=$,
                        parm2=$,parm3=$,parm4=$,parm5=$,parm6=$,parm7=$)
   {
      local oRealTime;
   
      oRealTime = Send(SYS,@GetRealTimeObject);
      
      Send(oRealTime,@RegisterCallbackInDays,
                     #oObject=self,
                     #days=weeks * 7,
                     #message=message,
                     #parm1=iClass,
                     #parm2=parm2,
                     #parm3=parm3,
                     #parm4=parm4,
                     #parm5=parm5,
                     #parm6=parm6,
                     #parm7=parm7);
      
      return;
   }
   
   ScheduleEventInMonths(iClass=$,months=$,message=MSG_EVT_START,parm1=$,
                         parm2=$,parm3=$,parm4=$,parm5=$,parm6=$,parm7=$)
   {
      local oRealTime;
   
      oRealTime = Send(SYS,@GetRealTimeObject);
      
      Send(oRealTime,@RegisterCallbackInMonths,
                     #oObject=self,
                     #months=months,
                     #message=message,
                     #parm1=iClass,
                     #parm2=parm2,
                     #parm3=parm3,
                     #parm4=parm4,
                     #parm5=parm5,
                     #parm6=parm6,
                     #parm7=parm7);
      
      return;
   }
   
   ScheduleEventInYears(iClass=$,years=$,message=MSG_EVT_START,parm1=$,
                        parm2=$,parm3=$,parm4=$,parm5=$,parm6=$,parm7=$)
   {
      local oRealTime;
   
      oRealTime = Send(SYS,@GetRealTimeObject);
      
      Send(oRealTime,@RegisterCallbackInYears,
                     #oObject=self,
                     #years=years,
                     #message=message,
                     #parm1=iClass,
                     #parm2=parm2,
                     #parm3=parm3,
                     #parm4=parm4,
                     #parm5=parm5,
                     #parm6=parm6,
                     #parm7=parm7);
      
      return;
   }
   
   TestScheduleEvent(iHour=$,iMinute=$)
   {
      local iYear,iMonth,iDay;
      
      iYear=Send(Send(SYS,@GetRealTimeObject),@GetYear);
      iMonth=Send(Send(SYS,@GetRealTimeObject),@GetMonth);
      iDay=Send(Send(SYS,@GetRealTimeObject),@GetDay);
      if iHour = $
      {
         iHour=Send(Send(SYS,@GetRealTimeObject),@GetHour); 
      }
      if IMinute = $
      {
         iMinute=Send(Send(SYS,@GetRealTimeObject),@GetMinute) + 2;
         if iMinute >= 60
         {
            iMinute = iMinute - 60;
         }
      }
   
      Send(self,@ScheduleStartEvent,#iClass=&RatInvasion,
                                    #iYear=iYear,
                                    #iMonth=iMonth,
                                    #iDay=iDay,
                                    #iHour=iHour,
                                    #iMinute=iMinute);
      
      return;
   }
   
   ScheduleStartEvent(iClass=$,iYear=0,iMonth=0,iDay=0,iHour=0,iMinute=0)
   {
      local oRealTime;
      
      oRealTime = Send(SYS,@GetRealTimeObject);
      
      Send(oRealTime,@RegisterCallback,#oObject=self,
         #message=MSG_EVT_START,#iYear=iYear,#iMonth=iMonth,
         #iDay=iDay,#iHour=iHour,#iMinute=iMinute,#parm1=iClass);
      
      return;
   }
   
   ScheduleEndEvent(oObject=$,iYear=0,iMonth=0,iDay=0,iHour=0,iMinute=0)
   {
      local oRealTime;
      
      oRealTime = Send(SYS,@GetRealTimeObject);
      
      Send(oRealTime,@RegisterCallback,#oObject=self,
         #message=MSG_EVT_STOP,#iYear=iYear,#iMonth=iMonth,
         #iDay=iDay,#iHour=iHour,#iMinute=iMinute,#parm1=oObject);
      
      return;
   }
   
   ScheduleAdvanceEvent(oObject=$,iYear=0,iMonth=0,iDay=0,iHour=0,iMinute=0)
   {
      local oRealTime;
      
      oRealTime = Send(SYS,@GetRealTimeObject);
      
      Send(oRealTime,@RegisterCallback,#oObject=self,
         #message=MSG_EVT_ADVANCE,#iYear=iYear,#iMonth=iMonth,
         #iDay=iDay,#iHour=iHour,#iMinute=iMinute,#parm1=oObject);
      
      return;
   }
   
   EventStart(iClass=$)
   {
      local oEvent;

      if iClass <> $
      {
         oEvent = Create(iClass);
         Send(oEvent,@StartEvent);
      }
   
      return oEvent;
   }
   
   EventEnd(oEvent=$)
   {
      plActiveEvents = DelListElem(plActiveEvents,oEvent);
      return;
   }
   
   RealTimeCallback(message=0,parm1=$,parm2=$,parm3=$,
      parm4=$,parm5=$,parm6=$,parm7=$,Parm8=$)
   {
      local oEvent;
      
      if message > 0
      {
         if message = MSG_EVT_START
         {
            oEvent = Send(self,@EventStart,#iClass=parm1);
            if oEvent <> $
            {
               plActiveEvents = Cons(oEvent,plActiveEvents);
               if ptMaintenance = $
               {
                  CreateTimer(self,@OnTimer,piMaintenanceInterval);
               }
            }
            else
            {
               debug("Error Starting Event!",parm1);
            }
         }
         if message = MSG_EVT_STOP
         {
            oEvent = parm1;
            if oEvent <> $
            {
               Send(oEvent,@EndEvent);
            }
         }
         if message = MSG_EVT_ADVANCE
         {
            oEvent = parm1;
            if oEvent <> $
            {
               Send(oEvent,@AdvanceEvent);
            }
         }
      }
   
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

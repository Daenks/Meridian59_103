% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ChaosNight is UtilityFunctions

% Handles a chaos night, or "frenzy".  This is a mode where combat is encouraged
% and people can kill each other without permanent repercussions.  Generally the
% game is saved first, and restored afterwards.  This can't be done from Blakod
% so a frenzy requires manual intervention.

constants:

   include blakston.khd
   include protocol.khd

resources:

   chaos_night_rsc = \
      "~B~U~k[###]~n ~B~rTHE REIGN OF BLOOD FRENZY~n:  The fabric of reality shakes as "
      "an evil presence attempts to penetrate the Meridian.  The servants of "
      "Qor sing out in cacophonic glee as anarchy sweeps across the land. "
      "With no Guardian Angels present, anything goes as long as the sky "
      "boils red.\n"
      "[Your character has been saved and will be restored after the Frenzy.]"
   chaos_night_admin_rsc = \
       "~B~U~k[###]~n ~B~bADMINISTRATOR~n: To end the 'Reign of Blood Frenzy,' "
       "you should make a copy of the LASTSAVE.TXT file (on the server "
       "machine) now. When the Frenzy is to end, shut down the server and "
       "restore the LASTSAVE.TXT."
   end_chaos_night_rsc = \
       "~B~U~k[###]~n ~B~gTHE REIGN OF BLOOD FRENZY~n: The game was not restored "
       "properly!  The 'Reign of Blood Frenzy' ~Imust~n be ended by restoring "
       "LASTSAVE.TXT at the server.  Otherwise, character status may be "
       "corrupted due to the Frenzy."
   chaos_night_npcs_rsc = \
      "~B~U~k[###]~n ~B~rThe Innkeepers in each city have been preparing for "
      "this day, and have stockpiled massive quantities of items useful for "
      "defending their homes!  To outfit yourself for the coming battles, "
      "go to your nearest Innkeeper and check what they have for sale.  For "
      "a price, they may part with some much needed supplies."
   chaos_gift = \
       "~B~U~k[###]~n ~B~vQor grants you %s%s to smite your enemies!"

   chaos_wav = chaosup.wav


classvars:

properties:

   plChaosNightLoot = $
   ptChaosNightLootTimer = $
   piChaosNightLootTimerIntervalMs = 3 * 60 * 1000

   % Is loot given to all players?
   pbGiveGlobalLoot = FALSE

   % Do we hand out reagents with loot?
   pbGiveReagents = FALSE

   % Do we have Innkeepers sell frenzy loot?
   pbSellFrenzyLoot = TRUE
   
   % If we hand out shillings during frenzy, how much do we give at one time?
   piFrenzyMoneyAmount = 200000

messages:

   Constructor()
   {
      % Chaos night MUST be started after a system save, and afterwards,
      % the attending guardian MUST revert back to that old save game!
      % You have been warned!

      local i;

      for i in Send(SYS,@GetRooms)
      {
         % Sets all rooms to no reagent use.
         Send(i,@TurnReagentsOff);

         % Make all rooms except for inns kill zones (anyone can die).
         % Also, change the background graphic.
         if NOT Send(i,@CheckRoomFlag,#flag=ROOM_HOMETOWN)
         {
            Send(i,@StartChaosNight);
         }
      }

      % Set up a timer to give everyone some reagents, etc.
      Send(self,@ChaosNightPeriodicLoot);

      % Give Innkeepers a list of frenzy loot to sell to players.
      if pbSellFrenzyLoot
      {
         Post(self,@SetFrenzyNPCSellers);
      }

      % Tell the users online what's going on.
      for i in Send(SYS,@GetUsersLoggedOn)
      {
         Send(i,@MsgSendUser,#message_rsc=chaos_night_rsc);
         Send(i,@WaveSendUser,#wave_rsc=chaos_wav);

         if IsClass(i,&Admin)
         {
            Send(i,@MsgSendUser,#message_rsc=chaos_night_admin_rsc);
         }

         if pbSellFrenzyLoot
         {
            Send(i,@MsgSendUser,#message_rsc=chaos_night_npcs_rsc);
         }
      }

      return;
   }

   Delete()
   {
      local i;

      if ptChaosNightLootTimer <> $
      {
         DeleteTimer(ptChaosNightLootTimer);
         ptChaosNightLootTimer = $;
      }

      % Tell the rooms to change their flags back to normal, and to
      % redraw the correct background.
      for i in Send(SYS, @GetRooms)
      {
         % Sets all rooms to use reagents.
         Send(i,@TurnReagentsOn);

         if NOT Send(i,@CheckRoomFlag,#flag=ROOM_HOMETOWN)
         {
            Send(i,@EndChaosNight);
         }
      }

      % Only Send this message to DMs and up, since this message should
      % never be seen.
      for i in Send(SYS,@GetUsersLoggedOn)
      {
         if IsClass(i,&DM)
         {
            Send(i,@MsgSendUser,#message_rsc=end_chaos_night_rsc);
         }
      }

      % Set NPCs back to selling the correct items.
      Send(self,@UnsetFrenzyNPCSellers);

      return;
   }

   UserLogon(who = $)
   {
      Send(who,@MsgSendUser,#message_rsc=chaos_night_rsc);
      Send(who,@WaveSendUser,#wave_rsc=chaos_wav);

      if pbSellFrenzyLoot
      {
         Send(who,@MsgSendUser,#message_rsc=chaos_night_npcs_rsc);
      }

      return;
   }

   SetFrenzyNPCSellers()
   "Sets Innkeepers to sell frenzy loot."
   {
      Send(&JasperInnKeeper,@SetForSaleFrenzy);
      Send(&MarionInnkeeper,@SetForSaleFrenzy);
      Send(&CorNothInnkeeper,@SetForSaleFrenzy);
      Send(&BarloqueInnkeeper,@SetForSaleFrenzy);
      Send(&TosInnKeeper,@SetForSaleFrenzy);
      Send(&HazarInnKeeper,@SetForSaleFrenzy);
      Send(&KocatanInnkeeper,@SetForSaleFrenzy);

      % Reduce the weight and bulk of all items.
      Send(SYS,@ReduceAllItemWeightAndBulk,#iNumber=1);

      return;
   }

   UnsetFrenzyNPCSellers()
   "If the Innkeepers need to be set back to selling the correct items."
   {
      Send(&JasperInnKeeper,@SetForSale);
      Send(&MarionInnkeeper,@SetForSale);
      Send(&CorNothInnkeeper,@SetForSale);
      Send(&BarloqueInnkeeper,@SetForSale);
      Send(&TosInnKeeper,@SetForSale);
      Send(&HazarInnKeeper,@SetForSale);
      Send(&KocatanInnkeeper,@SetForSale);

      return;
   }

   ChaosNightLoot(iNumCasts=100)
   "Distributes a bunch of loot for Frenzies."
   {
      local oPlayer, lGiveList, oItem, oGift;

      if Send(Send(SYS,@GetLore),@BetaPotionsEnabled)
      {
        return Send(SYS,@GetFailureRsc);
      }

      % Reset the loot list if it's niled out.
      if plChaosNightLoot = $
      {
         plChaosNightLoot = [
                              Create(&KarmaPotion,#karma=10000),
                              Create(&KarmaPotion,#karma=-10000),
                              Create(&Chaosfood,#number=100),
                              Create(&Mint,#number=100),
                              Create(&Scimitar),
                              Create(&Longsword),
                              Create(&Longbow),
                              Create(&BattleBow),
                              Create(&BerserkerRing),
                              Create(&BerserkerRing),
                              Create(&Arrow,#number=150),
                              Create(&NeruditeArrow,#number=150),
                              Create(&JewelOfFroz),
                              Create(&JewelOfFroz),
                              Create(&Gift),
                              Create(&Gift),
                              Create(&NeruditeBow),
                              Create(&Platearmor),
                              Create(&Guildshield),
                              Create(&Mysticsword),
                              Create(&Scimitar),
                              Create(&Helm)
                            ];
      }

      lGivelist = Send(SYS,@GetUsersLoggedOn);

      for oPlayer in lGiveList
      {
         for oItem in plChaosNightLoot
         {
            if IsClass(oItem,&NumberItem)
            {
               oGift = Create(GetClass(oItem),#number=Send(oItem,@GetNumber));
            }

            if IsClass(oItem,&KarmaPotion)
            {
               oGift = Create(GetClass(oItem),#karma=Send(oItem,@GetKarma));
            }
            else
            {
               if NOT IsClass(oItem,&NumberItem)
               {
                  oGift = Create(GetClass(oItem));
               }
            }

            Send(oPlayer,@NewHold,#what=oGift);

            if Send(oPlayer,@IsLoggedOn)
            {
               Send(oPlayer,@MsgSendUser,#Message_rsc=chaos_gift,
                     #parm1=Send(oGift,@GetIndef),#parm2=Send(oGift,@GetName));
            }
         }

         % Reagent handouts turned off by default as reagent cost is now
         % disabled during frenzies via room flag pbNoReagents.
         if pbGiveReagents
         {
            Send(oPlayer,@AddReagentsForSpells,#iNumCasts=iNumCasts);
         }
      }

      return Send(SYS, @GetSuccessRsc);
   }

   ChaosNightMoney()
   "Hands out shillings to all players so they can buy from NPCs."
   {
      local lGivelist, oPlayer, oMoney;

      if Send(Send(SYS,@GetLore),@BetaPotionsEnabled)
      {
        return Send(SYS,@GetFailureRsc);
      }

      lGivelist = Send(SYS,@GetUsersLoggedOn);

      for oPlayer in lGiveList
      {
         oMoney = Create(&Money,#number=piFrenzyMoneyAmount);

         Send(oPlayer,@NewHold,#what=oMoney);

            if Send(oPlayer,@IsLoggedOn)
            {
               Send(oPlayer,@MsgSendUser,#Message_rsc=chaos_gift,
                     #parm1=Send(oMoney,@GetIndef),
                     #parm2=Send(oMoney,@GetName));
            }
      }

      return Send(SYS, @GetSuccessRsc);
   }

   ChaosNightPeriodicLoot()
   "Timer function that periodically gives people loot during a chaos night"
   {
      % Loot is now handled by updated sell lists on Innkeeper NPCs.
      % In case we still want to use the global loot handout, we keep
      % this timer active but control whether loot is distributed with
      % a setting.

      if pbGiveGlobalLoot
      {
         Send(self,@ChaosNightLoot);
      }

      % If NPCs are selling the loot, gotta give the players some cash.
      if pbSellFrenzyLoot
      {
         Send(self,@ChaosNightMoney);
      }

      ptChaosNightLootTimer = CreateTimer(self,@ChaosNightPeriodicLoot,
                                    piChaosNightLootTimerIntervalMs);

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Bodyarmor is Armor

constants:

   include blakston.khd

resources:

   bodyarmor_condition_exc = " is without blemish or flaw."
   bodyarmor_condition_exc_mended = \
      " is in great condition, but has been repaired before."
   bodyarmor_condition_good = " has a dent or two."
   bodyarmor_condition_med = " is nicked and scarred from battle."
   bodyarmor_condition_poor = \
      " has been rent and torn by fierce attacks and may not last much longer."
   bodyarmor_condition_broken = \
      " is useless.  It has been torn into several pieces from the wear "
      "and strain of battle."

classvars:

   viUse_type = ITEM_USE_BODY
   viUse_amount = 1
   vrPoss_article = object_article_cap_this_rsc

   viGround_group = 2
   viInventory_group = 1
   viBroken_group = 3

   vbShow_condition = TRUE
   vrCondition_exc = bodyarmor_condition_exc
   vrCondition_exc_mended = bodyarmor_condition_exc_mended
   vrCondition_good = bodyarmor_condition_good
   vrCondition_med = bodyarmor_condition_med
   vrCondition_poor = bodyarmor_condition_poor
   vrCondition_broken = bodyarmor_condition_broken

   % bodyarmor goes over layer 0 items such as shirts
   viLayer = 1

properties:

   % If set to true, bodyarmor can be colored.
   pbColored = FALSE

messages:

   ReqRepair()
   {
      return TRUE;
   }

   SendInventoryAnimation()
   {
      if piHits > 0 OR viBroken_group = $
      {
         propagate;
      }

      if (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piItem_flags & ITEM_PALETTE_MASK);
      }

      AddPacket(1,ANIMATE_NONE,2,viBroken_group);

      return;
   }

   SendLookAnimation()
   {
      if piHits > 0 OR viBroken_group = $
      {
         propagate;
      }

      if (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piItem_flags & ITEM_PALETTE_MASK);
      }

      AddPacket(1,ANIMATE_NONE,2,viBroken_group);

      return;
   }

   SendAnimation()
   {
      if piHits > 0 OR viBroken_group = $
      {
         propagate;
      }

      if (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piItem_flags & ITEM_PALETTE_MASK);
      }

      AddPacket(1,ANIMATE_NONE,2,viBroken_group);

      return;
   }

   % This is a way to implement colored bodyarmor easily without having to
   % rewrite how the server/client handle XLAT and palette translations.
   % Currently these are stored as bytes, so the XLAT red to x and XLAT
   % grey to y needed for a correct bodyarmor translation can't be added.
   % If the bodyarmor has pbColored set to TRUE, SetPaletteTranslation in
   % item.kod won't be called to translate the bodyarmor's hotspot areas
   % to the player's shirt color (will always be red).
   SetPaletteTranslation(translation = $)
   {
      if pbColored
      {
         return;
      }

      propagate;
   }

   IsArmorColored()
   {
      return pbColored;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DefenseModifier is PassiveItem

constants:

   include blakston.khd

   % Percent chance that an item gets damaged when defending.
   DAMAGE_CHANCE = 50

resources:

   defmod_broken = "Your %s falls to pieces."   
   defmod_broken_plural = "Your %s fall to pieces."   
   defmod_broken_plural_clothes = "Your %s collapse into unwearable tatters."

classvars:

   viItem_type = ITEMTYPE_ARMOR
   vrItem_broken = defmod_broken

   viDefense_base = 0               % This is the default value for piDefense_bonus
   viDamage_base = 0                % This is the default value for piDamage_reduce
   
   viLayer = 0                      % Layer represents clothing and gear that may override visually
                                    % Higher numbers override lower numbers

properties:

   piDefense_bonus = 0              %% piDefense_bonus adds to player's defense. Ranges from 1 to 50
   piDamage_reduce = 0              %% piDamage_reduce is the maximum amount of damage that will be reduced.

   piHealth_change = 0
   piMana_change = 0
      
   piMight_change = 0
   piIntellect_change = 0
   piStamina_change = 0
   piAgility_change = 0
   piMysticism_change = 0
   piAim_change = 0

messages:

   ReqUseSomething(what = $)
   {
      if IsClass(what,&DefenseModifier)
         AND (Send(what,@GetItemUseType) & Send(self,@GetItemUseType)
              OR Send(self,@GetItemUseType) & Send(what,@GetItemUseType))
         AND Send(what,@GetLayer) = Send(self,@GetLayer)
      {
         if Send(poOwner,@TryUnuseItem,#what=self)
         {
            propagate;
         }
         else
         {
            return FALSE;
         }
      }

      propagate;
   }

   DefaultValues()
   {
      piDefense_bonus = viDefense_base;
      piDamage_reduce = viDamage_base;

      propagate;
   }

   NewUsed(what = $)
   {
      local i, iHealthMod, iManaMod, iMightMod, iIntellectMod, 
         iStaminaMod, iAgilityMod, iMysticismMod, iAimMod, oAttribute;

      iHealthMod = 0;
      iManaMod = 0;
      iMightMod = 0;
      iIntellectMod = 0;
      iStaminaMod = 0;
      iAgilityMod = 0;
      iMysticismMod = 0;
      iAimMod = 0;
      for oAttribute in plObject_attributes
      {
         iHealthMod = iHealthMod +
                      Send(oAttribute,@ModifyMaxHealth,#max_health=iHealthMod);
         iManaMod = iManaMod +
                    Send(oAttribute,@ModifyMaxMana,#max_mana=iManaMod);
         iMightMod = iMightMod +
                    Send(oAttribute,@ModifyMight,#might=iMightMod);
         iIntellectMod = iIntellectMod +
                    Send(oAttribute,@ModifyIntellect,#intellect=iIntellectMod);
         iStaminaMod = iStaminaMod +
                    Send(oAttribute,@ModifyStamina,#stamina=iStaminaMod);
         iAgilityMod = iAgilityMod +
                    Send(oAttribute,@ModifyAgility,#agility=iAgilityMod);
         iMysticismMod = iMysticismMod +
                    Send(oAttribute,@ModifyMysticism,#mysticism=iMysticismMod);
         iAimMod = iAimMod +
                    Send(oAttribute,@ModifyAim,#aim=iAimMod);
      }
      
      piHealth_change = Send(poOwner,@GainMaxHealth,#amount=iHealthMod);
      piMana_change = Send(poOwner,@NewMaxMana,#amount=iManaMod);
      Send(poOwner,@SetVigorRestThreshold,#amount=80);
      
      piMight_change = Send(poOwner,@AddMight,#amount=iMightMod);
      piIntellect_change = Send(poOwner,@AddIntellect,#amount=iIntellectMod);
      piStamina_change = Send(poOwner,@AddStamina,#amount=iStaminaMod);
      piAgility_change = Send(poOwner,@AddAgility,#amount=iAgilityMod);
      piMysticism_change = Send(poOwner,@AddMysticism,#amount=iMysticismMod);
      piAim_change = Send(poOwner,@AddAim,#amount=iAimMod);

      If NOT IsClass(self,&Torch)
      {
         Send(what,@AddDefenseModifier,#what=self);
      }

      propagate;
   }

   NewUnused(what = $)
   {
      If NOT IsClass(self,&Torch)
      {
         Send(what,@RemoveDefenseModifier,#what=self);
      }

      Send(poOwner,@GainMaxHealth,#amount=-piHealth_change);
      Send(poOwner,@NewMaxMana,#amount=-piMana_change);
      Send(poOwner,@SetVigorRestThreshold,#amount=80);
      
      Send(poOwner,@AddMight,#amount=-piMight_change);
      Send(poOwner,@AddIntellect,#amount=-piIntellect_change);
      Send(poOwner,@AddStamina,#amount=-piStamina_change);
      Send(poOwner,@AddAgility,#amount=-piAgility_change);
      Send(poOwner,@AddMysticism,#amount=-piMysticism_change);
      Send(poOwner,@AddAim,#amount=-piAim_change);

      piHealth_change = 0;
      piMana_change = 0;
      
      piMight_change = 0;
      piIntellect_change = 0;
      piStamina_change = 0;
      piAgility_change = 0;
      piMysticism_change = 0;
      piAim_change = 0;

      propagate;
   }

   GetResistanceModifiers()
   {
      % format is [ [TYPE,resistance], [ATCK_WEAP_BLUDGEON,-20], ...]
      return [];
   }

   ModifyDefensePower(who = $,what = $,defense_power = 0)
   {
      return defense_power + piDefense_bonus;
   }

   ModifyDefenseDamage(who = $,what = $,damage = $,atype = 0,aspell = 0)
   "Increase or decrease damage done to defender."
   {
      local iDamageReduce, oAttribute;

      for oAttribute in plObject_attributes
      {
         damage = Send(oAttribute,@ModifyDefenseDamage,#who=who,#what=what,#damage=damage,#atype=atype,#aspell=aspell);
      }

      iDamageReduce = 0;
      if Send(Send(SYS,@GetSettings),@GetDirectArmorEnabled)
      {
         if piDamage_reduce <> 0
         {
            iDamageReduce = random(piDamage_reduce*33,piDamage_reduce*100);
            iDamageReduce = bound(iDamageReduce,0,(damage-100));
         }

         if aspell <> 0
         {
            % Reduce damage if part of the damage is spell
            if atype <> 0
            {
               % Only 2/3 of the damage reduction if we're doing both weapon
               % and spell damage types.
               iDamageReduce = iDamageReduce * 2 / 3;
            }
            else
            {
               % If we're doing pure spell damage, we get no reduction.
               iDamageReduce = 0;
            }
         }
      }
      
      return damage - iDamageReduce;
   }

   % This assumes that none of the superclasses define a message for "defending hit" to do anything special.
   % This will reduce the damage that armor is taking in battle currently.
   DefendingHit(who = $,what = $)
   {
      % 50% chance to get damaged.
      if (random(1,100) < DAMAGE_CHANCE)
      {
         propagate;
      }
      
      return;
   }

   CanMend()
   "For most defmods (armor and shields), mend is true."
   {   
      local i, oItemAtt;
      
      for i in plItem_Attributes
      {
         oItemAtt = send(SYS,@FindItemAttByNum,#num=send(self,@GetNumFromCompound,#compound=first(i)));
         
         if oItemAtt = $
         {
            DEBUG("Illegal ItemAtt in list!");
            
            continue;
         }
         
         if NOT send(oItemAtt,@ItemCanMend,#oItem=self)
         {
            return FALSE;
         }
      }
      
      return TRUE; 
   }

   GetLayer()
   {
      return viLayer;
   }
   
   GetDamageReduction()
   {
      if Send(Send(SYS,@GetSettings),@GetDirectArmorEnabled)
      {
         return piDamage_reduce;
      }

      return 0;
   }
  
   GetDefenseBonus()
   {
      return piDefense_bonus;
   }

   GetMaxHealthBonus()
   {
      local oAttribute, iMaxHealthBonus;

      iMaxHealthBonus = 0;
      for oAttribute in plObject_attributes
      {
         iMaxHealthBonus = Send(oAttribute,@ModifyMaxHealth,
                                           #max_health=iMaxHealthBonus);
      }
      
      return iMaxHealthBonus;
   }

   GetMaxManaBonus()
   {
      local oAttribute, iMaxManaBonus;

      iMaxManaBonus = 0;
      for oAttribute in plObject_attributes
      {
         iMaxManaBonus = Send(oAttribute,@ModifyMaxMana,
                                           #max_mana=iMaxManaBonus);
      }
      
      return iMaxManaBonus;
   }

   GetMaxVigorBonus()
   {
      local oAttribute, iMaxVigorBonus;

      iMaxVigorBonus = 0;
      for oAttribute in plObject_attributes
      {
         iMaxVigorBonus = Send(oAttribute,@ModifyMaxVigor,
                                           #max_vigor=iMaxVigorBonus);
      }
      
      return iMaxVigorBonus;
   }

   GetMightBonus()
   {
      local oAttribute, iMightBonus;

      iMightBonus = 0;
      for oAttribute in plObject_attributes
      {
         iMightBonus = Send(oAttribute,@ModifyMight,
                                           #might=iMightBonus);
      }
      
      return iMightBonus;
   }

   GetIntellectBonus()
   {
      local oAttribute, iIntellectBonus;

      iIntellectBonus = 0;
      for oAttribute in plObject_attributes
      {
         iIntellectBonus = Send(oAttribute,@ModifyIntellect,
                                           #intellect=iIntellectBonus);
      }
      
      return iIntellectBonus;
   }

   GetStaminaBonus()
   {
      local oAttribute, iStaminaBonus;

      iStaminaBonus = 0;
      for oAttribute in plObject_attributes
      {
         iStaminaBonus = Send(oAttribute,@ModifyStamina,
                                           #stamina=iStaminaBonus);
      }
      
      return iStaminaBonus;
   }

   GetAgilityBonus()
   {
      local oAttribute, iAgilityBonus;

      iAgilityBonus = 0;
      for oAttribute in plObject_attributes
      {
         iAgilityBonus = Send(oAttribute,@ModifyAgility,
                                           #agility=iAgilityBonus);
      }
      
      return iAgilityBonus;
   }

   GetMysticismBonus()
   {
      local oAttribute, iMysticismBonus;

      iMysticismBonus = 0;
      for oAttribute in plObject_attributes
      {
         iMysticismBonus = Send(oAttribute,@ModifyMysticism,
                                           #mysticism=iMysticismBonus);
      }
      
      return iMysticismBonus;
   }

   GetAimBonus()
   {
      local oAttribute, iAimBonus;

      iAimBonus = 0;
      for oAttribute in plObject_attributes
      {
         iAimBonus = Send(oAttribute,@ModifyAim,
                                     #aim=iAimBonus);
      }
      
      return iAimBonus;
   }
   
   GetVisualDampening()
   {
      local oAttribute, iVisualDampening;

      iVisualDampening = 0;
      for oAttribute in plObject_attributes
      {
         iVisualDampening = Send(oAttribute,@ModifyVisualDampening,
                                     #visual_dampening=iVisualDampening);
      }
      
      return iVisualDampening;
   }
   
   GetBindDampening()
   {
      local oAttribute, iBindDampening;

      iBindDampening = 0;
      for oAttribute in plObject_attributes
      {
         iBindDampening = Send(oAttribute,@ModifyBindDampening,
                                     #bind_dampening=iBindDampening);
      }
      
      return iBindDampening;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

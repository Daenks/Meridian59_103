% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Magic weapons have no physical shape and are created temporarily and only
% exist for the duration of an enchantment, such as a touchspell. They are
% automatically used when the player is under the effect of such an enchantment
% and is not using a different weapon already. They are used in lieu of an 
% actual weapon, making the code more consistent and streamlined by creating a 
% dummy weapon in cases where the weapon is not an item in the player's 
% inventory but one of his body parts, such as his fist or his shin.
% TLDR: Magic weapons are dummy weapons for handling touchspells.

MagicWeapon is Weapon

constants:

   include blakston.khd

resources:

classvars:

properties:

   % The stats relevant for this weapon. Primary stat scales damage while
   % secondary stat scales a bonus effect that varies with weapon class.
   piPrimaryStat = STAT_MYSTICISM
   piSecondaryStat = STAT_INTELLECT

messages:

   % In the case of touchattacks, we use mysticism*2 instead of the player's
   % ability in the stroke since the stroke is not actually available to players.
   % Monsters, on the other hand, can be treated as usual.
   GetStrokeAbility(who=$,Skill_num=0)
   {
      if IsClass(who,&User)
      {
         return Send(who,@GetMysticism)*2;
      }
      
      propagate;
   }

   GetDefaultStrokeNumber()
   {
      return SKID_TOUCH;
   }
   
   GetMinDamage(who=$)
   {
      local damage, iAbility;

      damage = viMin_Damage;
      iAbility = Send(who,@GetSpellAbility,#spell_num=viProficiency_needed);
      damage = (damage * (iAbility+1));
      damage = Send(self,@DamageFactors,#damage=damage,#who=who)/100;
      
      return bound(damage,0,$);
   }
   
   GetMaxDamage(who=$)
   {
      local damage, iAbility;

      damage = viMax_Damage;
      iAbility = Send(who,@GetSpellAbility,#spell_num=viProficiency_needed);
      damage = (damage * (iAbility+1));
      damage = Send(self,@DamageFactors,#damage=damage,#who=who)/100;
      
      return bound(damage,0,$);
   }

   GetAttackType(use_weapon=$)
   {
      return viAttackType;
   }

   GetAttackSpell(use_weapon=$)
   {
      return viSpellType;
   }

   GetParryAbility()
   {
      % Touch attacks have no parrying ability.
      return 0;
   }

   % Magic doesn't break.
   WeaponHitTarget()
   {
      return;
   }

   CanBeDisarmed()
   {
      return FALSE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

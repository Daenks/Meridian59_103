% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ShortSword is ThrustingWeapon

constants:

   include blakston.khd

resources:

   shortsword_name_rsc = "short sword"
   shortsword_icon_rsc = shswd.bgf
   shortsword_desc_rsc = \
      "Plain in appearance, the tip of this short sword is sharp enough "
		"to be dangerous.  While it lacks the reach and damaging potential of the "
		"long sword, it can be extremely lethal if placed between the victim's "
		"shoulder blades."

   shortsword_window_overlay_rsc = povshswd.bgf
   shortsword_player_overlay = shswdov.bgf

classvars:
   vrName = shortsword_name_rsc
   vrIcon = shortsword_icon_rsc
   vrDesc = shortsword_desc_rsc

   % Short Swords are low quality thrusting weapons
   viWeaponQuality = WEAPON_QUALITY_NORMAL

   viProficiency_Needed = SKID_PROFICIENCY_SHORTSWORD

   viValue_average = 250
   viWeight = 50
   viBulk = 50

   viGround_group = 1
   viInventory_group = 3
   viBroken_group = 2

   vrWeapon_window_overlay = shortsword_window_overlay_rsc
   vrWeapon_overlay = shortsword_player_overlay

properties:

   piAttack_type = ATCK_WEAP_NONMAGIC+ATCK_WEAP_THRUST

messages:

   GetDamage(target=$)
   {
      local iDamage, iBackstab;
		
		iBackstab = 0;

		if Send(self,@IsBackstab,#attacker=Send(self,@GetOwner),#victim=target)
		{
			iBackstab = 100;
		}

      % First, get base damage.
      iDamage = send(self,@GetBaseDamage,#who=poOwner,#target=target);

		%Now add the bonus damage from backstabbing.		
      iDamage = iDamage + (iDamage * iBackstab)/100;
  
      iDamage = iDamage * 100;

      return iDamage;
	}
	
	IsBackstab(attacker=$,victim=$)
	{
      local iVictimAngle, iVictimRow, iVictimCol, iAttackerRow, iAttackerCol, iDist;

		% This is a slightly modified version of the in-sight-check in player.kod,
		% just this time, we check if the victim can see us instead.
		iVictimAngle = Send(victim,@GetAngle);
		iVictimRow = Send(victim,@GetRow);
		iVictimCol = Send(victim,@GetCol);
		iAttackerRow = Send(attacker,@GetRow);
		iAttackerCol = Send(attacker,@GetCol);
      iDist = Send(attacker,@SquaredDistanceTo,#what=victim);
		
		if iDist > 0
			AND ( ((iVictimAngle > ANGLE_ENE OR iVictimAngle <= ANGLE_ESE)
					  AND iAttackerCol < iVictimCol)
				  OR (iVictimAngle > ANGLE_ESE AND iVictimAngle <= ANGLE_SSE
					  AND (iAttackerRow - iVictimRow) < (iVictimCol - iAttackerCol))
				  OR (iVictimAngle > ANGLE_SSE AND iVictimAngle <= ANGLE_SSW
					  AND iAttackerRow < iVictimRow)
				  OR (iVictimAngle > ANGLE_SSW AND iVictimAngle <= ANGLE_WSW
					  AND (iAttackerRow - iVictimRow) < (iAttackerCol - iVictimCol))
				  OR (iVictimAngle > ANGLE_WSW AND iVictimAngle <= ANGLE_WNW
					  AND iAttackerCol > iVictimCol)
				  OR (iVictimAngle > ANGLE_WNW AND iVictimAngle <= ANGLE_NNW
					  AND (iAttackerRow - iVictimRow) > (iVictimCol - iAttackerCol))
				  OR (iVictimAngle > ANGLE_NNW AND iVictimAngle <= ANGLE_NNE
					  AND iAttackerRow > iVictimRow)
				  OR (iVictimAngle > ANGLE_NNE AND iVictimAngle <= ANGLE_ENE
					  AND (iAttackerRow - iVictimRow) > (iAttackerCol - iVictimCol))
				 )
		{
			return TRUE;
      }

      return FALSE;
	}
	

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% A ranged weapon is a weapon which you equip in your hand, type Ctrl to use, 
% then a target icon comes up a la apply() with which you choose your victim.
% Well, at least ideally.  At this point there is no good way to code that,
% so ranged weapons are like normal weapons with a range of 13 (the max range
% for weapons).  
% Ranged weapons do not break as often as melee weapons (not as much wear and
% tear).
%
% code by Justin Houk, 98jsh@williams.edu

RangedWeapon is Weapon

constants:

   include blakston.khd

resources:

   ranged_desc_rsc = "This is a ranged weapon."
   ranged_wrong_ammo_rsc = "You have not equipped the proper missile to attack."

   % This is the name for the type of ammo used.  Used in combat messages.
   ranged_ammo_name = "arrow"

classvars:

   viHits_init_min = 200
   viHits_init_max = 250

   viProficiency_Needed = SKID_PROFICIENCY_BOW
   viAmmo_type = AMMO_ARROW
   viUse_Amount = 2

   vrDesc = ranged_desc_rsc

   viMinDamage = 500
   viMaxDamage = 1000
   viProficiencyBonus = 500

   viStab = 0
   viStrike = 0
   viSlash = 0
   viThrust = 0
   viFire = 100
   viTouch = 0
   viDisarmMod = -100
   viParryMod = -100
   viSpellpowerMod = -25
   % Note: We use rough grid for ranged weapons!
   viRange = 100
   
   viPrimaryStat = STAT_AIM
   viSecondaryStat = STAT_MIGHT
   viAttackType = ATCK_WEAP_PIERCE

properties:

messages:

   GetAmmoType()
   {
      return viAmmo_type;
   }


   GetAttackType()
   {
      local iAttackType, ammotype, i;

      if poOwner = $
      {
         return 0;
      }

      iAttackType = 0;
      if IsClass(poOwner,&User)
      {
         ammotype = send(self,@GetAmmoType);
         for i in send(poOwner,@GetPlayerUsing)
         {
            if send(i,@GetItemUseType) = ITEM_USE_QUIVER
            {
               if send(i,@GetAmmoType) = ammotype
               { 
                  iAttackType = send(i,@GetAttackType);
               
                  break;
               }
            }
         }
      }
      
      iAttackType = iAttackType |  Nth(plTypes,3);

      return iAttackType;
   }

   GetSpellType()
   {
      local iAttackType, ammotype, i;

      if poOwner = $
      {
         return 0;
      }

      iAttackType = 0;
      ammotype = send(self,@GetAmmoType);

      if IsClass(poOwner,&User)
      {
         for i in send(poOwner,@GetPlayerUsing)
         {
            if send(i,@GetItemUseType) = ITEM_USE_QUIVER
            {
               if (send(i,@GetAmmoType) = ammotype)
               { 
                  iAttackType = send(i,@GetSpellType);
               
                  break;
               }
            }
         }
      }
      
      iAttackType = iAttackType | Nth(plTypes,4);

      return iAttackType;
   }

   % For ranged weapons, we leave the special effects to ammo.
   DoSpecialEffect(who=$,what=$,stroke_obj=$,power=0)
   {
      local ammotype, i, iBonus;

      if poOwner = $
      {
         return 0;
      }

      ammotype = send(self,@GetAmmoType);

      if IsClass(poOwner,&User)
      {
         for i in send(poOwner,@GetPlayerUsing)
         {
            if send(i,@GetItemUseType) = ITEM_USE_QUIVER
            {
               if (send(i,@GetAmmoType) = ammotype)
               { 
                  iBonus = Send(i,@DoSpecialEffect,#who=who,#what=what,#stroke_obj=stroke_obj,#power=power);
               
                  break;
               }
            }
         }
      }

      return iBonus;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% based off original kod by Justin, 98jsh@williams.edu

ResistRing is Ring

constants:

   include blakston.khd

resources:

   resistring_icon_rsc = ring3.bgf            
  
   resistring_use_rsc = "You put the ring on."
   resistring_dead_rsc = "The ring crumbles!"

   resistring_chargeslefta_rsc = "There are "
   resistring_chargesleftb_rsc = " charges left in this ring."
   
   resistring_working_rsc = "Your resistance ring offers a surge of elemental protection!"
   resistring_attacker_rsc = "A flare of energy from %s's resistance ring counteracts your attack!"

classvars:

   vrIcon = resistring_icon_rsc

   vrUseMessage = resistring_use_rsc
   vrDeadMessage = resistring_dead_rsc

   viHits_init_min = 8
   viHits_init_max = 12

   viBulk = 5
   viWeight = 10
   
   viValue_average = 280

   % Resistance rings hide their color until revealed or worn
   viUnrevealedColor = PT_ITEM_XLAT_BLUE_TO_WHITE

properties:

   piResistanceType = 0
   piResistanceChange = 20

messages:

   AppendDesc()
   {
      if Send(Send(SYS,@GetSettings),@GetResistRingLoseDurability) = TRUE
      {
         AppendTempString("\n\n");   
         AppendTempString(resistring_chargeslefta_rsc);      
         Send(SYS,@AppendCardinalToTempString,#number=piHits);
         AppendTempString(resistring_chargesleftb_rsc);
      }
      
      propagate;
   }

   NewUsed(what = $)
   {
      if vrName <> vrRealName
      {
         % Identify upon equip, 'testing out' the ring
         Send(self,@RevealHiddenAttributes);
         Send(self,@RevealHiddenColor);
         Send(Send(self,@GetOwner),@SomethingChanged,#what=self);
      }

      Send(poOwner, @MsgSendUser, #message_rsc=vrUseMessage);
      
      Send(what,@AddDefenseModifier,#what=self);

      propagate;
   }

   NewUnused(what = $)
   {
      Send(what,@RemoveDefenseModifier,#what=self);
      
      propagate;
   }

   GetResistanceModifiers()
   {
      return [[piResistanceType,piResistanceChange]];
   }

   DefendingHit()
   {
      return;
   }

   ModifyDefensePower(who = $,what = $,defense_power = 0)
   {
      return defense_power;
   }

   ModifyDefenseDamage(who = $,what = $,damage = $,atype = 0,aspell = 0)
   "This ring loses durability when an attack of the appropriate element is taken. "
   "No damage is actually subtracted here - the ring adds base resistances instead."
   {
      local iResType;
      
      iResType = -piResistanceType;

      if (aspell & iResType) <> 0
      {
         if Send(Send(SYS,@GetSettings),@GetResistRingLoseDurability) = TRUE
         {
            piHits = piHits - 1;
         }
         Send(poOwner,@MsgSendUser,#message_rsc=resistring_working_rsc);
         
         If IsClass(what,&User)
         {
            Send(what,@MsgSendUser,#message_rsc=resistring_attacker_rsc,#parm1=Send(who,@GetName));
         }
      }

      if piHits <= 0
      {
         Post(poOwner,@MsgSendUser,#message_rsc=vrDeadMessage);
         Post(self,@Delete);
      }

      return damage;
   }

   SetResistanceChange(amount = 20)
   {
      piResistanceChange = amount;
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Shield is PassiveItem

constants:

   include blakston.khd

   USED = 1
   UNUSED = 2
   DEFENDING = 3
   
   SHIELD_DAMAGE_CHANCE = 25

resources:

   shield_broken = "Your %s falls to pieces."   

   shield_condition_exc = " shines with smooth perfection."
   shield_condition_exc_mended = " is in great condition, but has been patched before."
   shield_condition_good = " is marred by a deep gouge but otherwise is in fine condition."
   shield_condition_med = " is deeply scarred from battle but still functional."
   shield_condition_poor = " is cracked in several places and may not last much longer."
   shield_condition_broken = " has been shattered by a forceful blow, leaving it useless."

classvars:

   viItem_type = ITEMTYPE_ARMOR
   vrItem_broken = shield_broken

   viUse_type = ITEM_USE_OFF_HAND
   viUse_amount = 1

   vrposs_article = object_article_cap_this_rsc

   vrShield_window_overlay = $
   vrShield_overlay = $

   viBroken_group = 4
   vbShow_condition = TRUE
   vrCondition_exc = shield_condition_exc 
   vrCondition_exc_mended = shield_condition_exc_mended 
   vrCondition_good = shield_condition_good 
   vrCondition_med = shield_condition_med 
   vrCondition_poor = shield_condition_poor 
   vrCondition_broken = shield_condition_broken
   
   viWeaponType = WEAPON_TYPE_STRIKE
   viAttack_Type = ATCK_WEAP_STRIKE
	viProficiency_needed = SKID_BASH
   viAttack_spell = 0
   viBlock_chance = 0
   viRangedBlock_chance = 0
   viBlock_damage = 0
	viProf_bonus = 0
   viSpell_modifier = 0
   
   % Shields are layer 1, so that layer 0 soldier shields will be slung on use.
	% Also, they fight for a spot with instruments.
   viLayer = 1
properties:
   
   piUsed = UNUSED

messages:

   GetProf(who=$)
   {
      return send(who,@GetAbility,#num=viProficiency_needed) * (100 + viProf_bonus) / 100;
   }

   GetProfNumber()
   {
      return viProficiency_needed;
   }

   GetStroke(who=$)
   {
		return send(who,@GetAbility,#num=Send(self,@GetStrokeNumber));
   }

   GetAttackName()
   {
      return vrName;
   }

   GetStrokeNumber()
   {
      return SKID_BASH;
   }
	
   GetDamage(target=$)
   {
      return viBlock_damage*100;
   }
   
   DamageGear(who = $,what = $)
   {
      % 25% chance to get damaged.
      if (random(1,100) < SHIELD_DAMAGE_CHANCE)
      {
         propagate;
      }
      
      return;
   }

   % General Combat messages:
   
   DoBlockAttack(who=$,what=$)
   {
      local oStroke;
	  
		oStroke = Send(SYS,@FindSkillByNum,#num=SKID_BASH);
	   % This will trigger a free regular weapon attack on a successful parry.	  
	   % Using TryAttack instead of DoExtraAttack since we want to factor in chance to hit.
      Send(who,@TryAttack,#what=what,#stroke_obj=oStroke,#use_weapon=self,#activeuser=FALSE);

	  return;
   }

   % Called here, different shields can give different bonuses.
   GetBlockAbility(who = $)
   {
      return send(who,@GetAbility,#num=SKID_BLOCK) * (100 + viBlock_chance) / 100;
   }
	
   GetRangedBlockAbility(who = $)
   {
      return send(who,@GetAbility,#num=SKID_BLOCK) * (100 + viRangedBlock_chance) / 100;
   }

   DoBlockAnimation()
   {
	  piUsed = DEFENDING;
	  
      if vrShield_window_overlay <> $
      {
         Send(poOwner,@ChangeWindowOverlay,#what=self);
      }
         
      if vrShield_overlay <> $
      {
         piUsed = USED;
      }
	  return;
   }

   % General unsorted messages:

   NewUsed()
   {
      piUsed = USED;

      % do first person overlay if we have one
      if vrShield_window_overlay <> $
      {
         Send(poOwner,@SetWindowOverlay,#what=self);
      }

      % do third person overlay if we have one
      if vrShield_overlay <> $
      {
         Send(poOwner,@SetOverlay,#what=self);
      }

      propagate;
   }

   NewUnused()
   {
      piUsed = UNUSED;
      if vrShield_window_overlay <> $
      {
         Send(poOwner,@RemoveWindowOverlay,#what=self);
      }

      Send(poOwner,@RemoveOverlay,#what=self);

      propagate;
   }
   
   ReqRepair()
   {
      return TRUE;
   }

   % These 5 called by player, for window overlays.
   % Shield subclasses--do NOT set a window overlay unless you either
   %  set vrShield_window_overlay correctly or override all these message handlers.

   GetWindowOverlay()
   {
      return vrShield_window_overlay;
   }

   GetWindowOverlayID()
   {
      return PWO_LEFT_HAND;
   }

   GetWindowOverlayHotspot()
   {
      % turns off the window overlay
      if piUsed = UNUSED
      {
         return 0;
      } 

      return HS_SW;
   }

   SendWindowOverlayAnimation()
   {
      if piUsed = DEFENDING
      { 
         AddPacket(1,ANIMATE_ONCE,4,1000,2,2,2,2,2,1);
         return;
      }
      
      AddPacket(1,ANIMATE_NONE,2,1);
      
      return;      
   }

   SendWindowOverlayOverlays()
   {
      AddPacket(1,0); % no first person overlays on top of shield 

      return; 
   }

   % These 3 called by player, for normal 3rd-person overlays on user.
   % Shield subclasses--do NOT set an overlay unless you either
   %  set vrShield_overlay correctly or override all these message handlers.

   GetOverlay()
   {
      return vrShield_overlay;
   }
   
   GetOverlayHotspot()
   {
      return HS_LEFT_WEAPON;
   }

   SendOverlayAnimation()
   {
      if (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piItem_flags & ITEM_PALETTE_MASK);
      }
      
      AddPacket(1,ANIMATE_NONE,2,2); % group 2 is the player-overlay group
      
      return;
   }
   
   %%% Attack Type Functions for Block Damage
   

   GetAttackSpell()
   {
      return viAttack_spell;
   }

   GetAttackType()
   {
      return viAttack_type;
   }

   GetRange()
   {
      return 2;
   }
	
   ReqWeaponAttack(what = $)
   {
      return TRUE;
   }
	
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

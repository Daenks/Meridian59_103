% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.

% New Amulet of the Three, designed to promote active building, not botting
% Cannot rest to regain vigor
% Cannot eat to regain vigor, except Spider Eyes, a sub-par food
% Gain vigor on kills
% +10 Intellect and +10 Mysticism
% Double mana regeneration, half vigor costs of spells
% Eternal battle with Hunters

NewNecromancerAmulet is Necklace

constants:

   include blakston.khd

resources:

   NewNecromancerAmulet_name_rsc = "Lichpact Locket"
   NewNecromancerAmulet_icon_rsc = necamlet.bgf
   NewNecromancerAmulet_desc_rsc = \
   "There is something deeply disturbing about this amulet.  When you look at it in the corner of your eye, "
   "you can almost see the evil pouring forth from it."

   NewNecromancerAmulet_used_rsc = \
   "As you put the amulet on, a wave of power flows through your body, setting every nerve on fire with pleasure, "
   "leaving every cell irrevocably changed in its wake.  Somewhere far inside your mind, underneath the feeling "
   "of power, you can also feel something else, however - a kind of hunger gnawing at you, growing with every "
   "passing second."
   NewNecromancerAmulet_unused_rsc = \
   "As the unholy amulet leaves you, the warmth of life returns to your body."

   NewNecromancerAmulet_try_unuse_rsc = \
   "As you try to pull the amulet from your neck, you feel it tug painfully at your insides, as if it were "
   "magically tethered to your innards, grafted permanently onto the blackest part of your soul."

   NewNecromancerAmulet_hunger_assuaged = "You feel your amulet absorbing %s%s's life energy.  It washes through you "
      "in waves, slaking your hunger and leaving you feeling strengthened."

   NewNecromancerAmulet_cant_eat = "You attempt to gag down %s%s, to no avail.  Mortal food will no longer assuage "
      "the dark hunger that burns within your unholy body."

classvars:

   viIndefinite = ARTICLE_AN

   vrName = NewNecromancerAmulet_name_rsc
   vrIcon = NewNecromancerAmulet_icon_rsc
   vrDesc = NewNecromancerAmulet_desc_rsc

   viValue_average = 100

   viBulk = 25
   viWeight = 25

   viUse_Amount = 1

   viLight_change = 50

properties:

   piIntellectBonus = 10
   piMysticismBonus = 10

   piSavedSkinColor = $

messages:

   ReqNewOwner(what = $)
   {
      return FALSE;
   }
   
   NewOwner(what = $)
   {
      if IsClass(what,&User)
      {
        Post(what,@TryUseItem,#what=self);
      }

      propagate;
   }

   NewUsed(what = $)
   "Affect permanent stat changes here."
   {
      Send(self,@ChangeSkinColor,#what=what);
      Send(what,@AddIntellect,#points=piIntellectBonus);
      Send(what,@AddMysticism,#points=piMysticismBonus);
      Send(what,@MsgSendUser,#message_rsc=NewNecromancerAmulet_used_rsc);
      propagate;
   }
   
   ReqUnuse()
   {
      If Send(poOwner,@PlayerIsImmortal)
      {
         return TRUE;
      }

      Send(poOwner,@MsgSendUser,#message_rsc=NewNecromancerAmulet_try_unuse_rsc);

      return FALSE;
   }

   NewUnused(what = $)
   {
      Send(self,@RestoreSkinColor,#what=what);
      Send(what,@AddIntellect,#points=-piIntellectBonus);
      Send(what,@AddMysticism,#points=-piMysticismBonus);
      Send(what,@MsgSendUser,#message_rsc=NewNecromancerAmulet_unused_rsc);
      propagate;
   }

   ChangeSkinColor(what=$)
   {
      if piSavedSkinColor = $
      {
         % save skin color
         piSavedSkinColor = send(what,@GetSkinColor);
         % turn skin white, eyes red
         send(what,@SetSkinColor,#color=PT_BLUE_TO_ASHEN);
      }
      else
      {
         DEBUG("Tried to DispelIllusions with a skin color already saved.");
      }

      return;
   }

   RestoreSkinColor(what=$)
   {
      if piSavedSkinColor <> $
      {
         % restore skin color
         send(what,@SetSkinColor,#color=piSavedSkinColor);
         piSavedSkinColor = $;
      }
      else
      {
         DEBUG("Tried to ReplaceIllusions with no saved skin color.");
      }

      return;
   }
   
   ReqUseSomething(what = $)
   {
      if IsClass(what, &Necklace) or IsClass(what, &NewNecromancerAmulet)
      {
         if Send(poOwner, @TryUnuseItem, #what = self)
         {
            propagate;
         }
         return FALSE;
      }

      if IsClass(what, &Food)
         AND NOT IsClass(what, &Spideye)
      {
         send( poOwner, @MsgSendUser, #message_rsc = NewNecromancerAmulet_cant_eat,
               #parm1=send(what,@GetDef),#parm2=send(what,@GetName) );
         return FALSE;
      }
      propagate;
   }
   
   SomethingKilled(what=$,victim=$,use_weapon=$)
   {
      local iGain;

      % No reward for Arena deaths. 
      if Send(Send(poOwner,@GetOwner),@SafePlayerAttack)
         AND Send(Send(poOwner,@GetOwner),@InPlay,#what=poOwner)
      {
         return;
      }
      
      if poOwner <> $
         AND IsClass(poOwner,&User)
         AND victim <> poOwner
         AND what = poOwner
         AND IsClass(victim,&Monster)
      {
         Send(poOwner,@MsgSendUser,#message_rsc=NewNecromancerAmulet_hunger_assuaged,
               #parm1=send(victim,@GetDef),#parm2=send(victim,@GetName));
         
         iGain = Send(victim,@GetLevel) / 10;

         Send(poOwner,@AddExertion,#amount=-iGain*10000);
      }

      return;
   }
   
   OwnerKilled()
   {
      Send(self,@NewUnused,#what=poOwner);
      Post(self,@Delete);
      return;
   }

   SendAnimation()
   {
      AddPacket(1, ANIMATE_NONE, 2, 2);
      return;
   }

   SendInventoryAnimation()
   {
      if ((piItem_flags & ITEM_PALETTE_MASK) <> 0)
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piItem_flags & ITEM_PALETTE_MASK);
      }
      AddPacket(1,ANIMATE_NONE,2,2);
      return;
   }

   SendLookAnimation()
   {
      if ((piItem_flags & ITEM_PALETTE_MASK) <> 0)
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piItem_flags & ITEM_PALETTE_MASK);
      }

      AddPacket(1,ANIMATE_NONE,2,1);
      return;
   }

   CanWeaken()
   {
      return FALSE;
   }

   CanSwap()
   {
      return FALSE;
   }

   CanShatter()
   {
      return FALSE;
   }

   CanEnchant()
   {
      return FALSE;
   }
   
   CanBeGivenToNPC()
   "NPCs will refuse to take this item if offered to them."
   {
      return FALSE;
   }

   CanBeStoredInVault()   
   {
      return FALSE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




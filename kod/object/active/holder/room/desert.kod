% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DesertRoom is Room

% The desert is very active with elemental energies.
% Each phase of the day has either a helpful or harmful storm or threat that is
% based on which Elemental Prisms have been defeated.
% The Lightning Prism begins defeated, so DAWN phase always has &ShockStorm.
% Storms are helpful, Threats are harmful.
% Both storms and threats alter the weather and music.
% Therefore, the desert changes constantly throughout each day.
%
% Storms and Threats are RoomObjectAttributes that come complete with
% a room icon. They're not spells, though, so they can't be discorded or
% altered.
%

constants:

   include blakston.khd

resources:

   desert_music = desertheat.mp3
   desert_music_snow = desertsnow.mp3
   desert_music_acid_rain = desertrain.mp3
   desert_music_static_shock = desertdawn.mp3

classvars:

   viTerrain_type = TERRAIN_BADLANDS 

properties:

   pbSnowGroundTexture = TRUE
   prMusic = desert_music

   piPreviousPhase = 0

messages:

   RecalcLightAndWeather()
   {
      local SysDayPhase, i;

      SysDayPhase = Send(SYS,@GetDayPhase);

      % We're crossing over into a new quarter.
      if piPreviousPhase <> SysDayPhase
      {
         Send(self,@EndAllThreats);
         Send(self,@StartThreat,#cClass=Send(self,@GetPhaseThreat));
         
         prMusic = Send(self,@GetPhaseMusic);
         foreach i in plActive
         {
            if IsClass(First(i),&User)
            {
               Send(First(i),@SendRoomMusic,#music_rsc=prMusic);
            }
         }
      }

      piPreviousPhase = SysDayPhase;
      propagate;
   }

   GetPhaseMusic()
   {
      switch(Send(SYS,@GetDayPhase))
      {
         case DAY_PHASE_DAWN:
            return desert_music_static_shock;
         case DAY_PHASE_DAY:
            return desert_music;
         case DAY_PHASE_DUSK:
            return desert_music_acid_rain;
         case DAY_PHASE_NIGHT:
            return desert_music_snow;
      }
      return desert_music;
   }
   
   GetPhaseThreat()
   {
      switch(Send(SYS,@GetDayPhase))
      {
         case DAY_PHASE_DAWN:
            return &ShockStorm;
         case DAY_PHASE_DAY:
            if Send(Send(SYS,@FindRoomByNum,#num=RID_DESERTRIVER2),
                     @GetPrismOfFireDefeated)
            {
               return &HeatStorm;
            }
            return &HeatThreat;
         case DAY_PHASE_DUSK:
            return &AcidThreat;
         case DAY_PHASE_NIGHT:
            return &ColdThreat;
      }
      return &ShockStorm;
   }

   StartThreat(cClass=&ShockStorm,report=TRUE)
   {
      % Don't start a threat if one already exists.
      % Don't start threats with no players present.
      if pbUser_in_room
         AND cClass <> $
         AND NOT Send(self,@HasObjectAttribute,#cClass=&RoomThreat)
         AND NOT Send(self,@HasObjectAttribute,#cClass=&RoomStorm)
      {
         Create(cClass,#host_object=self,#iDuration=$,#report=report);
      }

      return;
   }

   EndThreat(cClass=&ShockStorm)
   {
      if Send(self,@HasObjectAttribute,#cClass=cClass)
      {
         Send(Send(self,@GetObjectAttribute,#cClass=cClass),@Delete);
      }
      return;
   }
   
   EndAllThreats()
   {
      local i;
      
      foreach i in plObject_attributes
      {
         if IsClass(i,&RoomThreat)
            OR IsClass(i,&RoomStorm)
         {
            Send(i,@Delete);
         }
      }

      return;
   }

   FirstUserEntered()
   {
      Post(self,@StartThreat,#cClass=Send(self,@GetPhaseThreat),#report=FALSE);

      propagate;
   }
   
   LastUserLeft()
   {
      Post(self,@EndAllThreats);

      propagate;
   }

   StartSnow(bOnGround=TRUE)
   {
      if bOnGround
      {
         if pbSnowGroundTexture
         {
            % Turn any water to ice. Water tagged as ID 13.
            % Water sidedefs tagged as ID 14.
            Send(self,@ChangeTexture,#id=13,#new_texture=61017,
                  #flags=CTF_FLOOR);
            % Stop vertically scrolling water from animating.
            Send(self,@AnimateWall,#wall=14,#animation=ANIMATE_NONE,
                  #first_group=1,#second_group=1,#end_group=1);
            % Change texture.
            Send(self,@ChangeTexture,#id=14,#new_texture=61017,
                  #flags=CTF_BELOWWALL);
            % Stop water scroll effect and remove depth.
            Send(self,@SetSectorFlags,#sector=13,#depth=SF_DEPTH0,
                  #scrollSpeed=SCROLL_NONE);
         }
      }

      propagate;
   }

   EndSnow(override=FALSE)
   "Use override if rooms have manually placed textures."
   {
      if pbSnowGroundTexture
         OR override
      {
         % Remove sludge water textures.
         Send(self,@RemoveTextureChange,#id=13);
         % Remove sludge water sides.
         Send(self,@RemoveTextureChange,#id=14);
         Send(self,@RemoveAnimateWallChange,#wall=14);
         % Reset sector flag changes to sludge water.
         Send(self,@RemoveSectorFlagChange,#id=13);
      }

      propagate;
   }

   StartRain()
   {
      % Acid rain darkens the sand and pock marks rock.
      Send(self,@ChangeTexture,#id=0,#new_texture=09080,#flags=CTF_FLOOR);
      % Acid rain makes the water gross.
      Send(self,@ChangeTexture,#id=13,#new_texture=09363,
            #flags=CTF_FLOOR);
      Send(self,@ChangeTexture,#id=14,#new_texture=09363,
            #flags=CTF_NORMALWALL);
      Send(self,@SetSectorFlags,#sector=13,#depth=SF_DEPTH1,
            #scrollSpeed=SCROLL_SLOW);

      propagate;
   }
   
   EndRain()
   {
      % Remove gross sand.
      Send(self,@RemoveTextureChange,#id=0);
      % Remove sludge water textures.
      Send(self,@RemoveTextureChange,#id=13);
      % Remove sludge water sides.
      Send(self,@RemoveTextureChange,#id=14);
      % Reset sector flag changes to sludge water.
      Send(self,@RemoveSectorFlagChange,#id=13);

      propagate;
   }

   DoPhaseWeather()
   "Called to simulate weather by some rooms."
   {
      switch(Send(SYS,@GetDayPhase))
      {
         case DAY_PHASE_DAWN:
            % Some rooms rain instead of snow.
            if Send(self,@CheckRoomFlag,#flag=ROOM_SNOWING)
               OR Send(self,@CheckRoomFlag,#flag=ROOM_RAINING)
            {
               Send(self,@EndSnow);
               Send(self,@EndRain);
            }
            break;
         case DAY_PHASE_DAY:
            break;
         case DAY_PHASE_DUSK:
            if NOT Send(self,@CheckRoomFlag,#flag=ROOM_RAINING)
            {
               Send(self,@StartRain);
            }
            break;
         case DAY_PHASE_NIGHT:
            if Send(self,@CheckRoomFlag,#flag=ROOM_RAINING)
            {
               Send(self,@EndRain);
            }
            if NOT Send(self,@CheckRoomFlag,#flag=ROOM_SNOWING)
            {
               Send(self,@StartSnow);
            }
            break;
      }
      return;
   }

   Delete()
   {
      Send(self,@EndAllThreats);
      propagate;
   }

   ReqSomethingUse(what = $, use_item = $)
   {
      local i;
      
      foreach i in plObject_attributes
      {
         % This area gives special messages to inform players
         % of threat avoidance. Can also be used to prevent some item use
         % by threats.
         if IsClass(i,&RoomThreat)
         {
            if NOT Send(i,@ReqSomethingUse,#what=what,#use_item=use_item)
            {
               return FALSE;
            }
         }
      }

      propagate;
   }

   SpellCast(who = $,oSpell = $)
   {
      local i;
      
      foreach i in plObject_attributes
      {
         % This area gives special messages to inform players
         % of threat avoidance.
         if IsClass(i,&RoomThreat)
         {
            Send(i,@SpellCast,#who=who,#oSpell=oSpell);
         }
      }

      propagate;
   }

   GetRegion()
   {
      return RID_DESERT;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
GuildHall16 is GuildHall

constants:

   MAINDOOR  = 1
   MAINDOOR2 = 3
   SECRETDOOR = 2

   DOOR_DELAY = 5000

   include blakston.khd

resources:

   room_name_guildh16 = "The Smuggler's Head Quarters"
   room_guildh16 = guildh16.roo

classvars:

   vrName = room_name_guildh16

   viTeleport_row = 5
   viTeleport_col = 16

   viNews_row = 18
   viNews_col = 6
   viNews_finerow = 48
   viNews_finecol = 48

   viFoyer_north = 2
   viFoyer_south = 7
   viFoyer_west = 11
   viFoyer_east = 20

   viLever_row = 26
   viLever_col = 2
   viLever_fine_row = 48
   viLever_fine_col = 32

   viInner_teleport_row = 22
   viInner_teleport_col = 5

   viQuality = 5
   viTerrain_type = TERRAIN_GUILDHALL | TERRAIN_RESIDENCE
   viSeconds_til_close = 8

properties:

   prRoom = room_guildh16
   piRoom_num = RID_GUILDH16

   piBaseLight = LIGHT_NICE
   piOutside_factor = OUTDOORS_5

   ptSecret = $
   ptEntrance = $

messages:

   Constructor()
   {
      plGuild_doors = [ [7,16] ];

      % This is a box containing the guild door, used
      % for removing players from it when it closes.
      plEntrance = [ 787, 812, 1600, 1700 ];

      propagate;
   }

   Constructed()
   {
      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 60, 44, RID_SEWER_KING, 3, 47, ROTATE_NONE ],plExits);
      plExits = Cons([ 2, 18, RID_F3, 30, 23, ROTATE_NONE ],plExits);

      propagate;
   }

   Delete()
   {
      if ptSecret <> $
      {
         DeleteTimer(ptSecret);
         ptSecret=$;
      }
      if ptEntrance <> $
      {
         DeleteTimer(ptEntrance);
         ptEntrance = $;
      }

      propagate;
   }

   SomethingTryGo(what=$, row=$, col=$)
   {
      if row = 8 AND col = 16
      {
         Send(self,@OpenEntranceDoor);

         return TRUE;
      }

      propagate;
   }

   OpenEntranceDoor()
   {
      if ptEntrance = $
      {
         Send(self,@TimeStampDoor);
         Send(self,@SetSector,#sector=MAINDOOR,#animation=ANIMATE_FLOOR_LIFT,
               #height=48,#speed=50);
         Send(self,@SetSector,#sector=MAINDOOR2,#animation=ANIMATE_FLOOR_LIFT,
               #height=48,#speed=50);
         ptEntrance = CreateTimer(self,@CloseEntranceDoor,DOOR_DELAY);
         Send(self,@OpenEntranceDoorSound);
      }

      return;
   }

   CloseEntranceDoor()
   {
       Send(self,@SetSector,#sector=MAINDOOR,#animation=ANIMATE_FLOOR_LIFT,
            #height=128,#speed=50);
       Send(self,@SetSector,#sector=MAINDOOR2,#animation=ANIMATE_FLOOR_LIFT,
            #height=118,#speed=50);
       Send(self,@CloseEntranceDoorSound);
       
      % We now propagate this to handle removing players from the door,
      % and so the door can still be entered while it is closing.
      propagate;
   }

   OpenSecretDoor()
   {
      if ptSecret = $
      {
         Send(self,@SetSector,#sector=SECRETDOOR,#animation=ANIMATE_FLOOR_LIFT,
               #height=4,#speed=80);
         ptSecret = CreateTimer(self,@CloseSecretDoor,DOOR_DELAY);
         Send(self,@OpenSecretDoorSound);
      }

      return;
   }

   CloseSecretDoor()
   {
      ptSecret = $;
      Send(self,@SetSector,#sector=SECRETDOOR,#animation=ANIMATE_FLOOR_LIFT,
            #height=45,#speed=80);
      Send(self,@CloseSecretDoorSound);

      return;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&WoodenBox),#new_row=29,#new_col=29,
            #fine_col=32,#fine_row=16,#new_angle=ANGLE_NORTH);
      Send(self,@NewHold,#what=Create(&WoodenBox),#new_row=29,#new_col=30,
            #fine_col=0,#fine_row=0,#new_angle=ANGLE_SOUTH_WEST);

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

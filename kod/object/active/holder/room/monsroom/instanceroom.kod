% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
InstanceRoom is MonsterRoom

constants:

   include blakston.khd
   
   DIMENSIONAL_EXPIRATION_TIME = 600000

resources:

   InstanceRoom_name = "A room instance"
   InstanceRoom_roo = MarDun02.roo

   InstanceRoom_music = Song.mid
   
   InstanceRoom_expire = "Dimensional energies shift, and you find yourself violently thrown back into your own reality!"
   
   InstanceRoom_win = "With the slaughter complete, you feel an uplifting sense of victory... tainted by the vague suspicion "
                      "that you may have also unwittingly served the agenda of whatever unknown force brought you here."
                      
   default_victory_wav_rsc = tougher.wav
   
   no_walls_in_instance = "Due to the strange magical currents here, your wall spell fails to become coherent."

classvars:

   vrName = InstanceRoom_name
   
   victory_wav_rsc = default_victory_wav_rsc

   viTeleport_row = 5
   viTeleport_col = 5

   viTerrain_type = TERRAIN_NECROPOLIS | TERRAIN_CAVES

properties:

   % Used to return users to where the instance was originally created from
   piOriginRID = $
   piOriginRow = $
   piOriginCol = $
   piOriginFineRow = $
   piOriginFineCol = $
   piOriginAngle = $

   prRoom = InstanceRoom_roo
   piRoom_num = $
   
   piVariableTeleport_row = $
   piVariableTeleport_col = $
   piVariableTeleport_angle = $

   piBaseLight = LIGHT_DARK
   piOutside_factor = OUTDOORS_NONE

   prMusic = InstanceRoom_music

   piDifficultyMod = 100
   piExperienceMod = 5
   piTreasureMod = 5

   ptExpireTimer = $
   
   piGen_Time = 1000
   piInit_count_min = 1
   piInit_count_max = 1
   piMonster_count_max = 30
   
   piAdditionalKills_to_win_per_player = 20
   piKills_to_win = 30
   piKills_so_far = 0

   piLevel = 90
   piDifficulty = 0
   piKarma = 0
   piAttack_type = ATCK_WEAP_HIT
   piAttack_spell = 0
   piSpeed = 0

messages:

   Constructor(iRID=RID_INSTANCE_START,iBaseRID=RID_THRONE1)
   {
      local oBaseRoom;

      piRoom_num = iRID;
      
      oBaseRoom = Send(SYS,@FindRoomByNum,#num=iBaseRID);
      if oBaseRoom <> $
         AND IsClass(oBaseRoom,&MonsterRoom)
      {
         prRoom = Send(oBaseRoom,@GetRoomResource);
         plGenerators = Send(oBaseRoom,@GetGenerators);
         
         if plGenerators <> $
         {
            piInit_count_min = Length(plGenerators);
            piInit_count_max = Length(plGenerators);
         }

         piVariableTeleport_row = Send(oBaseRoom,@GetTeleportRow);
         piVariableTeleport_col = Send(oBaseRoom,@GetTeleportCol);
         piVariableTeleport_angle = Send(oBaseRoom,@GetTeleportAngle);
      }

      ptExpireTimer = CreateTimer(self,@RoomExpire,DIMENSIONAL_EXPIRATION_TIME);

      propagate;
   }
   
   SetValues(monster_class=&Mummy,secondary_monster_class=&Mummy,iDifficultyMod=100, iExperienceMod=2, iTreasureMod=2,
             iLevel=90,iDifficulty=0,iAttack_type=ATCK_WEAP_HIT,iAttack_spell=0,iSpeed=0)
   {
      if monster_class = secondary_monster_class
      {
         plMonsters = [ [monster_class, 100] ];
      }
      else
      {
         plMonsters = [ [monster_class, 70], [secondary_monster_class, 30] ];
      }

      piDifficultyMod = iDifficultyMod;
      piExperienceMod = iExperienceMod;
      piTreasureMod = iTreasureMod;

      piLevel = iLevel;
      piDifficulty = iDifficulty;
      piAttack_type = iAttack_type;
      piAttack_spell = iAttack_spell;
      piSpeed = iSpeed;

      return;
   }
   
   SetCreatorOriginData(who=$,origin_room=$)
   "Instance gems base themselves on the location of the user, while instance portals just use blink spots."
   {
      if who <> $
         AND IsClass(who,&User)
         AND Send(who,@IsLoggedOn)
         AND Send(who,@GetOwner) <> $
      {
         piOriginRID = Send(Send(who,@GetOwner),@GetRoomNum);
         piOriginRow = Send(who,@GetRow);
         piOriginCol = Send(who,@GetCol);
         piOriginFineRow = Send(who,@GetFineRow);
         piOriginFineCol = Send(who,@GetFineCol);
         piOriginAngle = Send(who,@GetAngle);
      }
      
      if origin_room <> $
      {
         piOriginRID = Send(origin_room,@GetRoomNum);
         piOriginRow = Send(origin_room,@GetTeleportRow);
         piOriginCol = Send(origin_room,@GetTeleportCol);
         piOriginFineRow = 0;
         piOriginFineCol = 0;
         piOriginAngle = Send(origin_room,@GetTeleportAngle);
      }
   
      return;
   }
   
   GetDifficultyMod()
   {
      return piDifficultyMod;
   }
   
   GetExperienceMod()
   {
      return piExperienceMod;
   }
   
   GetTreasureMod()
   {
      return piTreasureMod;
   }
   
   SomethingMoved(what=$)
   {
      if IsClass(what,&User)
      {
         Send(self,@AgitateMonsters,#who=what);
      }

      propagate;
   }
   
   AgitateMonsters(who=$)
   {
      local oMonster;
      
      for oMonster in plActive
      {
         If IsClass(first(oMonster),&Monster)
            and NOT (Send(first(oMonster), @GetBehavior) & AI_NPC )
         {
            if send(first(oMonster), @GetTarget) = $
            {
               if Send(first(oMonster),@GetMaster) = $
	           {			
		          Send(first(oMonster), @TargetSwitch, #what=who, #iHatred=100);
		          Send(first(oMonster), @EnterStateChase, #target=who, #actnow=True);
	           }
            }
         }
      }
      
      return;
   }
   
   TryCreateMonster(initroom = FALSE,loadfirst = FALSE)
   {
      local oMonster,iRoll,iTotal,lMonster_info,iRow,iCol,lPos;

      if piMonster_count + piKills_so_far >= piKills_to_win
      {
         return false;
      }

      if NOT send(self,@IsMonsterCountBelowMax)
         OR NOT pbGenerateMonsters
      {
         return;
      }

      iRoll = Random(1,100);
      if (iRoll > piGen_percent) and (initroom=FALSE) {	 return; }
      
      if NOT loadfirst
      {
         iRoll = Random(1,100);
      }
      else
      {
         iRoll = 1;
      }

      iTotal = 0;
      for lMonster_info in plMonsters
      {
         iTotal = iTotal + Nth(lMonster_info,2);

         if iRoll <= iTotal
         {
            oMonster = Create(First(lMonster_info),
                              #attack_type=piAttack_type,#attack_spell=piAttack_spell,
                              #speed=piSpeed,#karma=0,#level=piLevel,#difficulty=piDifficulty);
 
            if not Send(self,@GenerateMonster,#oMonster=oMonster)
            {
               return 0;
            }
            
	         break;
	      }
      }

      return 1;
   }
   
   SomethingKilled(victim=$)
   {
      if IsClass(victim,&Monster)
      {
         piKills_so_far = piKills_so_far + 1;
      }
      
      if piKills_so_far = piKills_to_win
      {
         Post(self,@Victory);
      }

      propagate;
   }
   
   Victory()
   {
      local i, each_obj;
      
      for i in plActive
      {
         each_obj = Send(self,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&User)
         {
            Send(each_obj,@MsgSendUser,#message_rsc=InstanceRoom_win);
            Send(each_obj,@WaveSendUser,#wave_rsc=victory_wav_rsc);
         }
      }
   
      return;
   }
   
   IncreaseKillsToWin()
   {
      piKills_to_win = piKills_to_win + piAdditionalKills_to_win_per_player;
      return;
   }
   
   ReturnUserToOrigin(who=$)
   "Can return users and logoff ghosts."
   {
      local oOriginRoom;
      
      if IsClass(who,&User)
      {
         oOriginRoom = Send(SYS,@FindRoomByNum,#num=piOriginRID);

         if oOriginRoom <> $
            AND piOriginRow <> $
            AND piOriginCol <> $
            AND piOriginFineRow <> $
            AND piOriginFineCol <> $
         {
            if Send(who,@IsLoggedOn)
            {
               Send(SYS,@UtilGoNearSquare,#what=who,#where=oOriginRoom,
                  #new_row=piOriginRow,#new_col=piOriginCol,
                  #fine_row=piOriginFineRow,#fine_col=piOriginFineCol,
                  #new_angle=piOriginAngle);
            }
            else
            {
               Send(who,@AdminOfflineTeleport,#where=oOriginRoom,
                  #new_row=piOriginRow,#new_col=piOriginCol,
                  #fine_row=piOriginFineRow,#fine_col=piOriginFineCol,
                  #new_angle=piOriginAngle);
            }
         }
         else
         {
            Send(who,@AdminGoToSafety);
         }
      }
      
      if IsClass(who,&LogoffGhost)
      {
         oOriginRoom = Send(SYS,@FindRoomByNum,#num=piOriginRID);

         if oOriginRoom <> $
            AND piOriginRow <> $
            AND piOriginCol <> $
            AND piOriginFineRow <> $
            AND piOriginFineCol <> $
         {
            % Return ghosted player
            Send(Send(who,@GetGhostedPlayer),@AdminOfflineTeleport,#where=oOriginRoom,
               #new_row=piOriginRow,#new_col=piOriginCol,
               #fine_row=piOriginFineRow,#fine_col=piOriginFineCol,
               #new_angle=piOriginAngle);
               
            % Move ghost
            Send(SYS,@UtilGoNearSquare,#what=who,#where=oOriginRoom,
               #new_row=piOriginRow,#new_col=piOriginCol,
               #fine_row=piOriginFineRow,#fine_col=piOriginFineCol,
               #new_angle=piOriginAngle);
         }
         else
         {
            Send(Send(who,@GetGhostedPlayer),@AdminGoToSafety);
         }
      }
   
      return;
   }
   
   LastUserLeft()
   {
      propagate;
   }
   
   RoomExpire()
   {
      ptExpireTimer = $;
      
      Send(self,@Delete);
      
      return;
   }

   Delete()
   {
      local i, each_obj, oOriginRoom, oLoggedPlayer;
      
      if ptExpireTimer <> $
      {
         DeleteTimer(ptExpireTimer);
         ptExpireTimer = $;
      }

      for i in plActive
      {
         each_obj = Send(self,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&User)
         {
            Send(each_obj,@MsgSendUser,#message_rsc=InstanceRoom_expire);
            Send(self,@ReturnUserToOrigin,#who=each_obj);
         }
         else
         {
            if IsClass(each_obj,&LogoffGhost)
            {
               Send(self,@ReturnUserToOrigin,#who=each_obj);
            }
         }
      }

      Send(Send(SYS,@GetInstanceRoomMaintenance),@RoomDeleted,#what=self);

      propagate;
   }

   Teleport(what=$)
   "Overriden to employ variable blink coordinates."
   {
      if piVariableTeleport_row <> $ AND piVariableTeleport_col <> $
      {
         Send(SYS,@UtilGoNearSquare,#what=what,#where=self,
              #new_row=piVariableTeleport_row,
              #new_col=piVariableTeleport_col,
              #new_angle=piVariableTeleport_angle);

         return TRUE;
      }

      Send(what,@MsgSendUser,#message_rsc=room_no_teleport);

      return FALSE;
   }

   RecalcBackgroundSkyGraphic()
   "Instances don't have normal skies."
   {
      return;
   }

   ReqSpellCast(who = $, oSpell = $, lItems = $)
   {
      if IsClass(who, &User)
      {
         if IsClass(oSpell,&WallSpell)
         {
            Send(who,@MsgSendUser,#message_rsc=no_walls_in_instance);
            return FALSE;
         }
      }

      propagate;
   }
 
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

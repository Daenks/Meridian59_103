% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DM is User

constants:

   include blakston.khd

   % These two constants were stolen from player, should be synchronized.
   DM_TRANSLATION_BODY_MASK = 0xff00
   DM_TRANSLATION_BODY_MUL = 0x100

resources:

   dm_module = dm.dll

   dm_login = "Welcome to the game, DM %s."

   dm_teleportto = "A dimensional gate appears next to you, and %s steps through."
   dm_teleportfrom = "A dimensional gate appears next to you, and %s is pulled through."

   dm_rescuesomeone = "You send %s to a safe place."
   dm_dimensionalgate = "You open a dimensional gate to %s and step through."

   dm_pk_lock = "Your PK status is now unchanged by natural events."
   dm_pk_unlock = "Your PK status now acts as if you were a normal player."

   dm_PK_ENABLE = "Currently, your PK status is ON, meaning that you can attack other players at will."
   dm_PK_DISABLE = "Currently, your PK status is OFF, meaning you can not kill or be killed by other players."

   dm_appeal_on = "You will now hear appeals."
   dm_appeal_off = "You will no longer hear appeals."
   dm_guest_appeal_on = "You will now hear guest appeals."
   dm_guest_appeal_off = "You will no longer hear guest appeals."
   dm_makesignetwork = "You have created a signet ring (i.e. newbie quest egg)."
   dm_makesignetfail = "You were unable to create a signet ring at this time."

   % Commands
   dm_makemonster = "monster"
   dm_event_sign_command = "event sign"
   dm_makeitem = "item"
   dm_createsignet = "item signet ring"
   dm_createjunk = "item junk"
   dm_getall = "get"
   dm_gettotem = "totem"
   dm_help_command = "help"
   dm_appeal_off_command = "appeal off"
   dm_appeal_on_command = "appeal on"
   dm_guest_appeal_off_command = "guest appeal off"
   dm_guest_appeal_on_command = "guest appeal on"
   dm_stealth_on_command = "stealth on"
   dm_stealth_off_command = "stealth off"
   dm_rumble_command = "rumble"
   dm_good_command = "good"
   dm_neutral_command = "neutral"
   dm_evil_command = "evil"
   dm_monster_budget_command = "monster budget"
   dm_monster_authorize_command = "monster authorize"
   dm_none = "none"
   dm_clear_abilities_command = "clear abilities"
   dm_clear_inventory_command = "clear inventory"
   dm_get_spells_command = "get spells"
   dm_get_skills_command = "get skills"
   dm_get_money_command = "get money"
   dm_boost_stats_command = "boost stats"
   dm_PK_enable_command = "PK enable"
   dm_PK_disable_command = "PK disable"
   dm_PK_lock_command = "PK lock"
   dm_PK_unlock_command = "PK unlock"
   dm_morning_command = "morning"
   dm_afternoon_command = "afternoon"
   dm_evening_command = "evening"
   dm_night_command = "night"
   dm_restore_time_command = "restore time"
   dm_call_monster_command = "call monster"
   dm_npc_chat_command = "npc chat"
   dm_plain_command = "plain"
   dm_human_command = "human"
   dm_disguise_command = "disguise"
   dm_get_misc_command = "get misc"
   dm_get_weapons_command = "get weapons"
   dm_get_armor_command = "get armor"
   dm_get_food_command = "get food"
   dm_get_reagents_command = "get reagents"
   dm_get_gems_command = "get gems"
   dm_get_ammo_command = "get ammo"
   dm_get_wands_command = "get wands"
   dm_get_rings_command = "get rings"
   dm_get_sundries_command = "get sundries"
   dm_get_games_command = "get games"
   dm_get_necklaces_command = "get necklaces"
   dm_get_potions_command = "get potions"
   dm_get_scrolls_command = "get scrolls"
   dm_get_masks_command = "get masks"
   dm_hidden_command = "hidden"
   dm_blank_command = "blank"

   dm_roomgive_command = "roomgive"
   dm_gave_to_number = "%s players received reward!"

   dm_stealth_on = "You are now in stealth mode."
   dm_stealth_off = "You are no longer in stealth mode."

   dm_plain = "You are now plain."
   dm_blank = "You are now blank."

   dm_no_longer = "This command no longer exists.  Type DM HELP for more info."
   dm_old_makeMonster = "makemonster"
   dm_old_makeitem = "makeitem"
   dm_old_getall = "get all"

   dm_hidden = "You are hidden from mortal eyes."
   dm_not_hidden = "Your are no longer hidden from mortal eyes."

   dm_no_item = "No item with that name exists in the Meridian universe."
   dm_no_monster = "No monster with that name exists in the Meridian universe."
   dm_no_item_group = "There is no item group with that name."
   dm_q = "Q"
   
   dm_void = "%s reaches into the void and pulls forth %s%s!"
   dm_call = "%s utters arcane syllables into the shadows, stirring the monsters."
   dm_goodie = "%s calls upon the sky for holy energies."
   dm_nuttie = "%s casts off the unbalanced influence of the gods."
   dm_baddie = "%s calls upon the shadows for dark energies."

   dm_guide_help = "You have very limited powers. \n"
            "DM APPEAL ON/OFF turns on and off appeals.\n"
            "DM GOOD, DM NEUTRAL, DM EVIL to shift your Karma appropriately.\n"
            "DM TOTEM to get the totem.\n"
            "DM RELIC <number/name> to get a special totem.\n"
            "DM RUMBLE to make the room shake.\n"
   dm_help = "DM APPEAL ON/OFF, DM STEALTH ON/OFF, "
             "DM CLEAR ABILITIES, DM CLEAR INVENTORY, DM PK ENABLE, DM PK DISABLE, DM PK LOCK, DM PK UNLOCK, "             
             "DM GET SPELLS, DM GET SKILLS, DM GET MONEY, DM BOOST STATS, DM GOOD, DM NEUTRAL, DM EVIL, "
             "DM TOTEM, DM RELIC <number/name>, DM MONSTER <monster name>, DM ITEM <item name>, "
             "DM GET <reagents/ food/ armor/ gems/ rings/ weapons/ necklaces/ potions/ sundries>"
   dm_dontinterfere = "~B~gYou should not try to interfere with the game."

   dm_guide = "An official Guide of the land."
   dm_sr_guide = "An official Senior Guide of the land."
   dm_bard = "An official Bard of the land."
   dm_sr_bard = "An official Senior Bard of the land."
   dm_guardian = "An official Guardian of the land."
   dm_designer = "One of the Designers of Meridian."

   dm_budget_none_remain = "You have no remaining monster budget with which to create a %s."
   dm_budget_not_authorized = "You are not authorized to create a %s."
   dm_budget_no_limits_self = "You have no monster creation limits."
   dm_budget_no_limits = "%s has no monster creation limits."
   dm_budget_not_approved_self = "You are not currently approved to create monsters."
   dm_budget_not_approved = "%s is not currently approved to create monsters."
   dm_budget_authorized_self = "You are authorized to create the following types of monsters:\n%q\n"
                               "(Note: Number in parentheses shows how many monsters would use up all your budget.)"
   dm_budget_authorized = "%s is authorized to create the following types of monsters:\n%q"
   dm_cant_find = "That Bard cannot be found."

   testitemgenpoints_err = "You can't test the gen points here."
   activateallgenpoints_err = "You can't test the gen points here."
   exitpoints_err = "You can't test the exit points here."

   invisible_admin_rsc = res0002o.bgf

   % Spell messages
   dm_spell_base = "~B[%s cast %s%s%s.]"
   dm_spell_blank = ""
   dm_spell_on = " on "
   dm_spell_a_group = "a group"
   dm_spell_you = "you"

   dm_server = "server"

classvars:

   viDM = TRUE

properties:

   pbCapableDM = FALSE

   pbImmortal = FALSE
   pbImmortalSave = FALSE

   pbSay_commands = FALSE
   pbAppeal = 3
   pbStealth = FALSE
   pbActor = FALSE
   pbHuntable = FALSE

   piDMFlags = 0

   pbMonsterMaker = FALSE
   pbAdvancement = FALSE
   piInterference = 0

   prRank = $

   pbMorph = FALSE
   piMove_start = 1
   piMove_end = 3
   piMove_delay = 200
   piAttack_start = 1
   piAttack_end = 3
   piAttack_delay = 200

   piMonsterBudgetTotalLevels = 0
   plMonsterBudgetTypes = $

   % What's this DM's "standard" icon? Nil means it's human.
   prStandardIcon = $

messages:

   GetIcon(trueicon=FALSE)
   {
      % Trueicon is set to true anytime you want to know what
      %  a person really looks like.  Good example: statues.

      if trueicon
         AND prStandardIcon <> $
      {
         return prStandardIcon;
      }

      if poIllusion_set <> $
      {
         return Send(poIllusion_set,@IllusionGetIcon,#who=self);
      }

      propagate;
   }
   
   ResetPlayerFlagList()
   {
      local i;
      
      Send(self,@ResetPlayerDrawfx,#Sendsomethingchanged=FALSE);
      piFlags = (piFlags & PFLAG_MASK);
      piFlags2 = (piFlags2 & PFLAG2_MASK);
      if Send(self,@IsResting)
      {
         Send(self,@SetPlayerFlag,#flag=PFLAG_NO_MOVE,#value=TRUE);
         Send(self,@SetPlayerFlag,#flag=PFLAG_NO_FIGHT,#value=TRUE);
         Send(self,@SetPlayerFlag,#flag=PFLAG_NO_MAGIC,#value=TRUE);
      }

      for i in plEnchantments
      {
         Send(nth(i,2),@SetSpellPlayerFlag,#who=self);
      }

      for i in plUsing
      {
         Send(i,@SetItemPlayerFlag,#who=self);
      }

      if poOwner <> $
      {      
         for i in Send(poOwner,@GetEnchantmentList)
         {
            Send(nth(i,2),@SetSpellPlayerFlag,#who=self,#state=nth(i,3));
         }
      }

      if piDMFlags & DMFLAG_INVISIBLE
      {
         Send(self,@SetPlayerFlag,#flag=PFLAG_INVISIBLE,#value=TRUE);
      }

      if piDMFlags & DMFLAG_SHADOW
      {
         Send(self,@SetPlayerDrawfx,#drawfx=DRAWFX_BLACK);
      }

      if piDMFlags & DMFLAG_ANONYMOUS
      {
         Send(self,@SetPlayerFlag,#flag=PFLAG_ANONYMOUS,#value=TRUE);            
      }
      
      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }
      
      return;
   }

   ReqNewHold(what = $)
   "Modified 5/21 by Damion.  If immortal flagged, the player's weight and "
   "encumbrance limits are ignored."
   {
      if pbImmortal
      {
         return Send(what,@ReqNewOwner,#what=self);
      }

      if NOT pbAdvancement AND FindListElem([&Token],GetClass(what))
      {
         Send(self,@DontInterfere);

         return FALSE;
      }

      propagate;
   }

   SetLabelMail(bValue = TRUE)
   {
      if bValue
      {
         % Set the flag
         piDMFlags = piDMFlags | DMFLAG_LABELMAIL;
      }
      else
      {
         % Clear the flag
         piDMFlags = piDMFlags & ~DMFLAG_LABELMAIL;
      }

      return;
   }

   % Overridden from User, so that we can flag the "from" field with a server tag.
   ReceiveMail(from = $,dest_list = $,perm_string = $)
   "<from> is a resource."
   {
      local sFromString;

      if (piDMFlags & DMFLAG_LABELMAIL) <> DMFLAG_LABELMAIL
      {
         propagate;
      }
   
      ClearTempString();

      AppendTempString(from);
      AppendTempString(" [");
      AppendTempString(dm_server);
      AppendTempString(": ");
      AppendTempString(Send(SYS,@GetServerNumber));
      AppendTempString("]");

      sFromString = CreateString();
      SetString(sFromString,GetTempString());

      plNew_mail = Cons([sFromString,GetTime(),dest_list,[perm_string]],plNew_mail);
      
      Send(self,@MsgSendUser,#message_rsc=user_new_mail,#parm1=from);

      return;
   }

   TryBroadcast()
   "Allow DMs to broadcast whenever they want for no cost."
   {
      return TRUE;
   }
   
   TrySayGroup(users = $)
   "Allow DMs to Send whenever they want for no cost."
   {
      return TRUE;
   }

   GetRankRsc()
   {
      return prRank;
   }

   PlayerIsImmortal(gn=FALSE)
   {
      if gn
      {
         return pbImmortal;
      }

      return (pbImmortal <> 0);
   }

   CanAdvance()
   {
      return pbAdvancement;
   }

   IsLikelyVictim()
   {
      if pbImmortal
      {
         return FALSE;
      }
      
      if piDMFlags & DMFLAG_INVISIBLE
      {
         return FALSE;
      }
      
      propagate;
   }

   %%% Hidden attribute

   IsHidden()
   "Returns TRUE if player is hidden, that is, doesn't appear on the who list."
   {
      return (piDMFlags & DMFLAG_HIDDEN);
   }

   SpellCast(who = $, oSpell = $, lItems = $)
   "Notification sent when a spell is cast in the room."
   {
      local rOn, rTarget;

      if who <> self
      {
         if lItems = $ OR length(lItems) = 0
         {
            rOn = dm_spell_blank;
            rTarget = dm_spell_blank;
         }
         else
         {
            % Spell will be cast "on" something.
            rOn = dm_spell_on;

            if length(lItems) > 1
            {
               rTarget = dm_spell_a_group;
            }
            else
            {
               % Length of targets is exactly 1
               if first(lItems) = self
               {
                  rTarget = dm_spell_you;
               }
               else
               {
                  rTarget = Send(first(lItems),@GetTrueName);
               }
            }
         }

         Send(self,@MsgSendUser,#message_rsc=dm_spell_base,#parm1=Send(who,@GetTrueName),
              #parm2=Send(oSpell,@GetName),#parm3=rOn,#parm4=rTarget);
      }

      propagate;
   }

   IsAppealOn()
   {
      return pbAppeal & 1;
   }

   GreenNamed()
   {
      if pbImmortal = 2
      {
         return TRUE;
      }
      
      return FALSE;
   }

   GetDM()
   {
      if pbImmortal = 2
      {
         return 2;
      }
      
      return viDM;
   }

   IsDMStealthed()
   {
      return (piDMFlags & DMFLAG_INVISIBLE);
   }

   ResetPlayerIcon(alldone=TRUE)
   "Sets our icon to its natural, unarmored state, special case here for morphed people."
   {
      if pbMorph
      {
         piBody_translations = piBody_translations & ~DM_TRANSLATION_BODY_MASK;
         piBody_translations = piBody_translations | 
                               (Send(self,@GetDefaultShirtTranslation)
                                * DM_TRANSLATION_BODY_MUL);      

         if poOwner <> $ AND alldone
         {      
            Send(poOwner,@SomethingChanged,#what=self);
         }
      
         return;
      }

      propagate;
   }

   SendAnimation()
   {
      local iTranslation;

      if NOT pbMorph
      {
         propagate;
      }

      iTranslation = Send(self,@GetBodyTranslation);
      if iTranslation
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,iTranslation);
      }

      if piAnimation = PANM_WEAPON_ATTACK
         OR piAnimation = PANM_FIST_ATTACK
      {    
         AddPacket(1,ANIMATE_ONCE, 4,piAttack_delay, 2,piAttack_start,
                   2,piAttack_end, 2,1);
      }
      else
      {
         if piAnimation = PANM_CAST
            AND IsClass(self,&Admin)
            AND vrIcon = Send(self,@GetPriestessIconRsc)
         {
            AddPacket(1,ANIMATE_ONCE, 4,piAttack_delay, 2,piAttack_start,
                      2,piAttack_end, 2,1);
         }    
         else
         {
            AddPacket(1,ANIMATE_NONE, 2,1);
         }
      }

      return;
   }

   SendMoveAnimation()
   {
      local iTranslation;

      if pbMorph
      {
         iTranslation = Send(self,@GetBodyTranslation);
         if iTranslation
         {
            AddPacket(1,ANIMATE_TRANSLATION, 1,iTranslation);
         }

         AddPacket(1,ANIMATE_CYCLE, 4,piMove_delay, 2,piMove_start, 2,piMove_end);

         return;
      }

      propagate;
   }

   SendOverlays()
   {
      if pbMorph
      {
         AddPacket(1,0);

         return;
      }

      propagate;
   }

   SendMoveOverlays()
   {
      if not pbMorph
      {
         propagate;
      }

      AddPacket(1,0);

      return;
   }

   IsActor()
   {
      return pbActor;
   }

   isHuntable()
   {
      return pbHuntable;
   }

   IsMorphed()
   {
      return (pbMorph OR Send(self,@CheckPlayerFlag,#flag=PFLAG_MORPHED));
   }

   % Used by the WarEvent event.  Don't remove DM+ shirts.
   RemoveShirt()
   {
      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

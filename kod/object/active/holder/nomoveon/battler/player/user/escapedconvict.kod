% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
EscapedConvict is User

constants:

   include blakston.khd

resources:

   escaped_convict_name_rsc = "Escaped Convict"
   escaped_convict_smokebomb_rsc = \
      "~B~bEscaped Convict throws a smoke bomb!"

classvars:

   % Amount of shillings to distribute to EACH ATTACKER.
   viMoneyAmount = 20000

   viMax_Vigor = 50000
   viMax_Health = 50000
   viMax_Mana = 50000

   viBulk_hold_max = 1000000
   viWeight_hold_max = 1000000

properties:

   % NOT IMPLEMENTED
   % Enable Convict Pick Pocket ability.
   % pbPickPocket = FALSE

   plTeleportRooms = $

   % Queue of most recent attackers.
   plAttackers = $
   % Number of attackers to keep in queue.
   piAttackers = 15

   % List of treasure items
   plTreasure = $

   % List of list of numbered treasure items and value

   pbDebug = FALSE

   piNameColor = NC_EVENTCHAR

messages:

   Constructor()
   {

      propagate;
   }

   % Handles damage done to player
   AssessDamage(what=$,damage=$,atype=0,aspell=0,stroke_obj=$,bonus=0,
               scalefactor=1000,report=TRUE,report_resistance=TRUE,
               absolute=FALSE)
   {
      local atcker;

      if what <> $
         AND IsClass(what,&Player)
      {
         % List already contains this player - move to top.
         if plAttackers <> $
            AND (FindListElem(plAttackers,what) > 0)
         {
            % Don't do this if they're already at the top
            if NOT (First(plAttackers) = what)
            {
               plAttackers = DelListElem(plAttackers,what);
               plAttackers = Cons(what,plAttackers);
            }
         }
         else
         {
            % Player not already in list, check size and delete if needed.
            if (Length(plAttackers) < piAttackers)
            {
               plAttackers = Cons(what,plAttackers);
            }
            else
            {
               plAttackers =
                     DelListElem(plAttackers,Nth(plAttackers,piAttackers));
               plAttackers = Cons(what,plAttackers);
            }
         }
      }

      if pbDebug
      {
         foreach atcker in plAttackers
         {
            Debug("plAttackers: ",atcker);
         }
      }

      propagate;
   }

   Killed(what = $)
   {
      local oAttacker,lTreasure,oTreasure,lInventoryContents;

      lInventoryContents = [plActive,plPassive];
      
      % Autogive loot to all players in plAttackers that are present
      foreach oAttacker in plAttackers
      {
         if Send(self,@GetOwner) = Send(oAttacker,@GetOwner)
         {
            foreach lTreasure in lInventoryContents
            {
               if pbDebug
               {
                  Debug("treasure list",lTreasure);
               }
               foreach oTreasure in lTreasure
               {
                  if pbDebug
                  {
                     Debug("treasure object",Send(oTreasure,@GetName));
                  }
                  if Send(oTreasure,@DropOnDeath)
                  {
                     % Numbered item, include value in creation
                     if isclass(oTreasure,&NumberItem)
                     {
                        Send(oAttacker,@NewHold,
                           #what=create(GetClass(oTreasure),
                           #number=Send(oTreasure,@GetNumber)));
                     }
                     else
                     {
                        Send(oAttacker,@NewHold,
                           #what=create(GetClass(oTreasure)));
                     }
                  }
               }
            }
         }
      }
      
      foreach lTreasure in lInventoryContents
      {
         foreach oTreasure in lTreasure
         {
            if Send(oTreasure,@DropOnDeath)
            {
               Send(oTreasure,@Delete);
            }
         }
      }
      foreach oTreasure in plActive
      {
         if Send(oTreasure,@DropOnDeath)
            {
               Send(oTreasure,@Delete);
            }
      }
      foreach oTreasure in plPassive
      {
         if Send(oTreasure,@DropOnDeath)
            {
               Send(oTreasure,@Delete);
            }
      }

      % Delete all elements in plAttackers.
      foreach oAttacker in plAttackers
      {
         plAttackers = DelListElem(plAttackers,oAttacker);
      }

      plAttackers = $;

      propagate;
   }

   GetName()
   {
      % Give a generic resource Clients will not have the proper name resource.
      % as EscapedConvict is hidden from the who list
      return escaped_convict_name_rsc;
   }

   PlayerNewCharInfo(desc = $,charinfo = $,gender = $)
   {
      vrName = escaped_convict_name_rsc;

      propagate;
   }

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   % Bag o' Tricks:  Things an admin can make Escaped Convict do
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   SmokeBomb(rid = $)
   {
      local i,iRoom,lRooms;

      lRooms = [RID_A5,RID_A6,RID_B6,RID_BADLAND1,RID_BADLAND2,
                RID_BAR_SEWER,RID_C4,RID_C5,RID_C6,RID_C7,RID_CASTLE1,
                RID_CASTLE1B,RID_CASTLE1C,RID_D4,RID_D5,RID_D6,RID_D7,
                RID_DUNGEON,RID_E2,RID_E4];

      % stupid limit on number of list items on initialization ^^
      lRooms = Cons(RID_E5,lRooms);
      lRooms = Cons(RID_E6,lRooms);
      lRooms = Cons(RID_E7,lRooms);
      lRooms = Cons(RID_F2,lRooms);
      lRooms = Cons(RID_F3,lRooms);
      lRooms = Cons(RID_F4,lRooms);
      lRooms = Cons(RID_F5,lRooms);
      lRooms = Cons(RID_F6,lRooms);
      lRooms = Cons(RID_F7,lRooms);
      lRooms = Cons(RID_F8,lRooms);
      lRooms = Cons(RID_G4,lRooms);
      lRooms = Cons(RID_G5,lRooms);
      lRooms = Cons(RID_G6,lRooms);
      lRooms = Cons(RID_G8,lRooms);
      lRooms = Cons(RID_G9,lRooms);
      lRooms = Cons(RID_H4,lRooms);
      lRooms = Cons(RID_H5,lRooms);
      lRooms = Cons(RID_H6,lRooms);
      lRooms = Cons(RID_H7,lRooms);
      lRooms = Cons(RID_H9,lRooms);
      lRooms = Cons(RID_I3,lRooms);
      lRooms = Cons(RID_I6,lRooms);
      lRooms = Cons(RID_I7,lRooms);
      lRooms = Cons(RID_I8,lRooms);
      lRooms = Cons(RID_I9,lRooms);
      lRooms = Cons(RID_ICE_CAVE1,lRooms);
      lRooms = Cons(RID_J3,lRooms);
      lRooms = Cons(RID_JAS_SEWER1,lRooms);
      lRooms = Cons(RID_K5,lRooms);
      lRooms = Cons(RID_NEST1,lRooms);

      iRoom = Nth(lRooms,Random(1,Length(lRooms)));
      foreach i in send(poOwner,@GetHolderActive)
      {
         Send(Nth(i,1),@MsgSendUser,#message_rsc=escaped_convict_smokebomb_rsc);
      }
      Send(self,@TeleportTo,#RID=iRoom,#bAdminPort=FALSE);

      return;
   }

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   % Admin messages to setup and maintain the Escaped Convict
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   AdminReset()
   {
      
      piMight = 50;
      piIntellect = 50;
      piStamina = 50;
      piAgility = 50;
      piMysticism = 50;
      piAim = 50;

      Send(self,@FillHealth);
      Send(self,@FillMana);
      Send(self,@FillVigor);

      Send(self,@GivePlayerAllSpells,#override=TRUE);
      Send(self,@GivePlayerAllSKills,#override=TRUE);
      Send(self,@EvaluatePKStatus);
      Send(self,@PlayerIsIntriguing);

      Send(self,@EquipEscapedConvict);

      return;
   }

   EquipEscapedConvict()
   {
      if (Send(self,@FindHolding,#class=&ReagentBag) = $)
      {
         Send(self,@Newhold,#what=Create(&ReagentBag));
      }

      return;
   }

   AdminHarm(percent=10)
   {
      piHealth = piHealth - (piHealth / (100 / percent));
      Send(self,@DrawHealth);

      return piHealth / 100;
   }

   AdminHeal(percent=10)
   {
      piHealth = piHealth + ((viMax_Health / (100 / percent)) * 100);

      return piHealth / 100;
   }

   FillHealth(percent=100)
   {
      local iAmount;

      iAmount = viMax_Health * percent / 100;

      piHealth = iAmount * 100;
      piMax_Health = iAmount;
      piBase_Max_Health = iAmount;
      Send(self,@DrawHealth);

      return piHealth / 100;
   }

   FillMana(percent=100)
   {
      local iAmount;

      iAmount = viMax_Mana * percent / 100;

      piMana = iAmount;
      piMax_Mana = iAmount;
      Send(self,@DrawMana);

      return piMana;
   }

   FillVigor(percent=100)
   {
      local iAmount;

      iAmount = viMax_Vigor * percent / 100;

      piVigor = iAmount;
      Send(self,@DrawVigor);

      return piVigor;
   }

   SendStatVigor()
   {
      AddPacket(1,3, 4,user_stat_vigor, 1,STAT_VALUE, 1,STAT_INTEGER,
                4,piVigor, 4,0, 4,viMax_Vigor, 4,piVigor_rest_threshold);

      return;
   }

   GetClientObjectType()
   {
      return OT_EVENTCHAR;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

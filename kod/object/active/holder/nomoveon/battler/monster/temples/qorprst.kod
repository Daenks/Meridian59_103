% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
QorPriestess is Temples

constants:

   include blakston.khd
   
   NEEDED_BLOOD = 6
   NEEDED_BERRY = 6
   NEEDED_TOOTH = 3

resources:

   include qorprst.lkod

   qorpriestess_name_rsc = "Priestess Zuxana"
   qorpriestess_icon_rsc = qorprst.bgf
   qorpriestess_desc_rsc = \
      "The perfect servant of Qor the Vile.  Shadows deepen where this "
      "malevolent woman stands.  She has a devious sensuality that she will "
      "exploit to turn men and women to succumb to the dark will of Qor.  "
      "If she can not seduce others to Qor, she would rather see them dead. "
      "She has the ability to teach the magics of Qor, to sell potions of "
      "forgetfulness for hated Shal'ille spells, and to perform "
      "blood rites to empower weapons."

   Qor_forget_potion_sale = \
      "~I~rYou can indeed buy %s%s.  Qor will be glad to strip you of the "
      "inhibitions of Shal'ille's teachings.~n~k"

   qorpriestess_already_have_spell = \
      "~bDo not toy with me, %s, you have already participated in "
      "the bargain stuck by that accursed trickster Riija.~n~k"
   qorpriestess_not_ready = \
      "~bQor take that trickster god!  Riija has stolen part of the Vile "
      "one's secret of Swap and demands a price for it.  Go prostrate "
      "yourself before that forsaken island god and become adept at the ways "
      "of the trickster.  Only then I can properly teach you the complete "
      "secrets of Swap.~n~k"
   qorpriestess_teach_song = \
      "Are you one of those caterwauling bards?  I can teach the hymn that "
      "hinders the magics of our enemy, even if your tin ear will "
      "undoubtedly be unable to comprehend its full beauty."
   qorpriestess_not_powerful = \
      "~bCome back when you have rid yourself of that pathetic guardian angel "
      "and are ready to kill others for the glory of the Dark Mistress.~n~k"

   qorpriestess_teach = \
      "Through the darkness of Qor, you can learn %s%s%s%s%s%s%s%s%s%s%s%s "
      "at that level."

   blood_rite_prompt = "blood rite"
   blood_rite_wav = qunbond.wav
   qor_priestess_blood_rite = \
      "~r~IAccept Qor's gift of pain.~n"
   qor_priestess_blood_rite_needed_items = \
      "~r~IBring me %i vials of magical blood, %i entroot berries, and "
      "%i orc teeth, and you shall have Qor's gift.~n"
   qor_priestess_blood_rite_need_weapon = \
      "~r~IWield an unenchanted melee weapon so that it may receive Qor's "
      "gift.~n"
   blood_rite_cursed = \
      "Your %s takes on a pale red aura."
   blood_rite_blind = \
      "Q's insignia blazes itself upon your %s."
   blood_rite_hold = \
      "Your %s begins emitting a Zjiriaesque glow."
   blood_rite_vamp = \
      "A draining darkness surrounds your %s."

classvars:
   vrTeach_message = qorpriestess_teach
   vrName = qorpriestess_name_rsc
   vrIcon = qorpriestess_icon_rsc
   vrDesc = qorpriestess_desc_rsc

   viQuestID=QST_ID_QOR_DISCIPLE
   viKarma = -90
   viAttributes = \
      MOB_NOFIGHT | MOB_LISTEN | MOB_RANDOM | MOB_RECEIVE \
      | MOB_TEACHER | MOB_COND_SELLER | MOB_PERM_QUESTER
   viOccupation = MOB_ROLE_PRIESTESS

messages:

   AffectMood(why=$,what=$)
   {
      if why = MOODMOD_DUSK
      {
         Send(self,@SetMood,#new_mood=piMood + 4);

         return;
      }

      if why = MOODMOD_DAWN
      {
         Send(self,@SetMood,#new_mood=piMood-4);

         return;
      }

      return;
   }

   UserEntered(who = $)
   {
      if Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
      {
         Send(self,@SetMood,#new_mood=piMood+2);

         propagate;
      }

      if Send(who,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
      {
         Send(self,@SetMood,#new_mood=piMood + 1);
      }

      propagate;
   }

   InitCondSale()
   {
      local oObj;

      oObj=Create(&ForgetPotionShalille);
      Send(Send(SYS,@GetLibrary),@AddToMobLib,#mob=self,
            #triggers=[Send(oObj,@GetName)],
            #action=[LIBACT_CONDITIONAL,oObj,2500,Qor_forget_potion_sale]);

      return;
   }

   SetForSale()
   {
      plFor_sale = [
         $,$,
         [ 
            SID_DARKNESS,
            SID_DETECT_GOOD,
            SID_ACID_TOUCH,
            SID_KARAHOLS_CURSE,
            SID_UNHOLY_WEAPON,
            SID_ENFEEBLE,
            SID_HOLD,
            SID_NODEBURST,
            SID_SWAP,
            SID_DEFILE,
            SID_INVISIBILITY,
            SID_CLOAK,
            SID_POISON_FOG,
            SID_PROFANE_RESONANCE,
            SID_DEATH_RIFT,
            SID_UNHOLY_TOUCH
         ],
      $];

      return;
   }

   CanDoTeach(who=$,sid=0)
   {
      if sid = SID_SWAP
         AND NOT Send(self,@CanAddSpell,#report=TRUE,#who=who,#num=sid)
      {
         return FALSE;
      }

      if sid = SID_PROFANE_RESONANCE
      {
         Send(self,@SayToOne,#target=who,#message_rsc=qorpriestess_teach_song);
      }

      propagate;
   }

   CanAddSpell(who=$,num=0,report=FALSE)
   {
      local i, oSpell, bFound;

      if who = $ OR num = 0
      {
         Debug("Called CanAddSpell with bad parameters!");

         return FALSE;
      }

      if num = SID_SWAP
      {
         if Send(who,@HasSpell,#num=num)
         {
            if report
            {
               Post(self,@SayToOne,#target=who,
                     #message_rsc=qorpriestess_already_have_spell,
                     #parm1=Send(who,@GetName));
            }

            return FALSE;
         }

         bFound = FALSE;
         foreach i in Send(who,@GetSpellList)
         {
            oSpell = Send(SYS,@FindSpellByNum,
                           #num=Send(who,@DecodeSpellNum,#compound=i));
            if Send(oSpell,@GetSchool) = SS_RIIJA
               AND Send(oSpell,@GetLevel) > 3
            {
               % Player has a high enough level spell in the required
               % school, can learn the spell.
               bFound = TRUE;

               break;
            }
         }

         % Player doesn't have a high enough level spell in the
         % required school, denied.
         if NOT bFound
         {
            if report
            {
               Post(self,@SayToOne,#target=who,
                     #message_rsc=qorpriestess_not_ready);
            }

            return FALSE;
         }
      }

      if num = SID_SUMMON_POISON_FOG
         AND NOT Send(who,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE)
      {
         if report
         {
            Send(who,@MsgSendUser,#message_rsc=qorpriestess_not_powerful);
         }

         return FALSE;
      }

      propagate;
   }

   SomeoneSaid(what=$,type=$,string=$)
   {
      local oBlood, oBerry, oTooth, oWeapon, iRandom, ItemAtt;

      if type = SAY_YELL OR NOT IsClass(what,&User)
      {
          propagate;
      }

      if StringContain(string,blood_rite_prompt)
         AND what <> $
         AND IsClass(what,&User)
      {
         oBlood = Send(what,@FindHolding,#class=&ShamanBlood);
         oBerry = Send(what,@FindHolding,#class=&EntrootBerry);
         oTooth = Send(what,@FindHolding,#class=&OrcTooth);

         if oBlood = $
            OR oBerry = $
            OR oTooth = $
            OR Send(oBlood,@GetNumber) < NEEDED_BLOOD
            OR Send(oBerry,@GetNumber) < NEEDED_BERRY
            OR Send(oTooth,@GetNumber) < NEEDED_TOOTH
         {
            Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
		          #string=qor_priestess_blood_rite_needed_items,
                  #parm1=NEEDED_BLOOD,
                  #parm2=NEEDED_BERRY,
                  #parm3=NEEDED_TOOTH);
            propagate;
         }
         
         oWeapon = Send(what,@GetWeapon);
         if oWeapon = $
            OR NOT IsClass(oWeapon,&Weapon)
            OR IsClass(oWeapon,&RangedWeapon)
            OR Send(oWeapon,@HasAnyAttribute)
         {
            Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
		          #string=qor_priestess_blood_rite_need_weapon);
            propagate;
         }

         Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
		       #string=qor_priestess_blood_rite);

         iRandom = Random(1,10);

         if iRandom = 1
         {
            ItemAtt = WA_VAMPER;
            Send(what,@MsgSendUser,#message_rsc=blood_rite_vamp,
                  #parm1=Send(oWeapon,@GetName));
         }

         if iRandom = 2
         {
            ItemAtt = WA_BLINDER;
            Send(what,@MsgSendUser,#message_rsc=blood_rite_blind,
                  #parm1=Send(oWeapon,@GetName));
         }

         if iRandom = 3
         {
            ItemAtt = WA_PARALYZER;
            Send(what,@MsgSendUser,#message_rsc=blood_rite_hold,
                  #parm1=Send(oWeapon,@GetName));
         }

         if iRandom >= 4
         {
            ItemAtt = WA_CURSED;
            Send(what,@MsgSendUser,#message_rsc=blood_rite_cursed,
                  #parm1=Send(oWeapon,@GetName));
         }

         Send(poOwner,@SomethingWaveRoom,#what=self,#wave_rsc=blood_rite_wav);

         Send(oBlood,@SubtractNumber,#number=NEEDED_BLOOD);
         Send(oBerry,@SubtractNumber,#number=NEEDED_BERRY);
         Send(oTooth,@SubtractNumber,#number=NEEDED_TOOTH);
         Send(what,@TryUnuseItem,#what=oWeapon);
         Send(Send(SYS,@FindItemAttByNum,#Num=ItemAtt),@AddToItem,
               #oItem=oWeapon);
         Send(oWeapon,@RevealHiddenAttributes);
      }

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

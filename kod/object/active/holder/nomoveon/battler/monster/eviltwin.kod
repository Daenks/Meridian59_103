% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
EvilTwin is Monster

constants:

   include blakston.khd

resources:

   EvilTwin_name_rsc = "evil twin"

   EvilTwin_male_icon_rsc = btg.bgf
   EvilTwin_female_icon_rsc = bth.bgf

   EvilTwin_dead_icon_rsc = amoebaX.bgf
   EvilTwin_dead_name_rsc = "dead evil twin"
   EvilTwin_weapon_rsc = scimov.bgf

   EvilTwin_sound_hit = orc_atkh.wav
   EvilTwin_sound_miss = orc_atkm.wav
   EvilTwin_sound_death = orc_dth.wav
   EvilTwin_sound_aware = orc_awr.wav

   EvilTwin_delete =  "%s%s disappears into a puff of smoke."

   EvilTwin_trouble = \
      "You sense that a evil twin you summoned has gotten you "
      "into some trouble..."

classvars:

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   vrDead_icon = EvilTwin_dead_icon_rsc
   vrDead_name = EvilTwin_dead_name_rsc

   viTreasure_type = TID_NONE

   viSpeed = SPEED_FAST
   viAttack_type = ATCK_WEAP_SLASH
   viAttributes = 0
   viLevel = 20
   viDifficulty = 8
   viDamagePercent = 50

   % Can't escape this monster's vision range.
   viVisionDistance = 100
   viKarma = 0
   viCashmin = 0
   viCashmax = 0
   vrSound_hit = EvilTwin_sound_hit
   vrSound_miss = EvilTwin_sound_miss
   vrSound_aware = EvilTwin_sound_aware
   vrSound_death = EvilTwin_sound_death
   vrMinion_trouble = EvilTwin_trouble

   viDefault_behavior = \
      AI_FIGHT_SINGLEMINDED | AI_FIGHT_MONSTERS \
      | AI_FIGHT_NEWBIESAFE | AI_FIGHT_AGGRESSIVE

properties:

   vrName = EvilTwin_name_rsc
   piDrawfx = 4
   vrIcon = EvilTwin_male_icon_rsc
   piAnimation = PANM_NONE
   poCaster = $
   poOriginal = $         % Who the EvilTwin is of.
   piGender = GENDER_MALE
   pbIllusion = TRUE
   piDamagePercent
   piSpellpower = 1
   poArrow = $

messages:

   Constructor(iSpellPower=1,oMaster=$,oTarget=$)
   {
      local i, each_obj, oRoom;

      oRoom = Send(oTarget,@GetOwner);

      if oMaster <> $
      {
         poCaster = oMaster;
         poMaster = oMaster;
      }

      if oTarget <> $
      {
         poOriginal = oTarget;
         poTarget = oTarget;
         for i in Send(oRoom,@GetHolderActive)
         {
            each_obj = Send(oRoom,@HolderExtractObject,#data=i);

            if (IsClass(each_obj,&Reflection) OR IsClass(each_obj,&EvilTwin))
               AND Send(each_obj,@GetIllusionForm) = oTarget
               AND random(1,2) = 1
               AND each_obj <> self
            {
               poTarget = each_obj;
            }
         }
      }
      piDamagePercent = viDamagePercent;
      piSpellpower = iSpellpower;
      poArrow = Create(&Arrow);
      Post(self,@TargetSwitch,#what=oTarget,#iHatred=1000);
      Post(self,@EnterStateChase);

      if IsClass(poOriginal,&Player)
      {
         Send(poOriginal,@AddEvilTwin);
      }

      propagate;
   }

   Delete(bMonsterReport=TRUE)
   {
      if poOriginal <> $
      {
         Send(poOriginal,@RemoveEvilTwin);
      }

      if (poOwner <> $)
         AND (IsClass(poOriginal,&Monster)
            OR Send(poOriginal,@IsLoggedOn))
      {
         Send(poOwner,@SomeoneSaid,#type=SAY_MESSAGE,#string=EvilTwin_delete,
               #what=self,#parm1=Send(self,@GetDef,#cap=TRUE),
               #parm2=Send(self,@GetName,#cap=FALSE));
      }

      Post(self,@RemoveOriginal);
      poCaster = $;
      if poArrow <> $
      {
         Send(poArrow,@Delete);
      }
      poArrow = $;

      propagate;
   }

   RemoveOriginal()
   {
      poOriginal = $;

      return;
   }

   SomethingKilled(what=$,victim=$)
   {
      % Delete the evil twin if the original dies.
      if victim = poOriginal
         OR (poCaster <> $
            AND victim = poCaster)
      {
         Send(self,@Delete);
      }

      return;
   }

   GetApparentName()
   {
      return Send(poOriginal,@GetApparentName);
   }

   GetName(cap=FALSE)
   {
      return Send(poOriginal,@GetName,#cap=cap);
   }
   
   GetDef(cap=FALSE)
   {
      return Send(poOriginal,@GetDef,#cap=cap);
   }

   GetIndef(cap=FALSE)
   {
      return Send(poOriginal,@GetIndef,#cap=cap);
   }

   GetHisHer(cap=FALSE)
   {
      return Send(poOriginal,@GetHisHer,#cap=cap);
   }

   GetHeShe(cap=FALSE)
   {
      return Send(poOriginal,@GetHeShe,#cap=cap);
   }

   GetLordLady(cap=FALSE)
   {
      return Send(poOriginal,@GetLordLady,#cap=cap);
   }

   GetHisHers(cap=FALSE)
   {
      return Send(poOriginal,@GetHisHers,#cap=cap);
   }

   GetHimHer(cap=FALSE)
   {
      return Send(poOriginal,@GetHimHer,#cap=cap);
   }

   ReqSomethingEntered(what=$)
   {
      if poOriginal = $
         OR NOT Send(poOriginal,@IsLoggedOn)
      {
         return TRUE;
      }

      propagate;
   }

   SomethingLeft(what=$)
   {
      if poOriginal = $
      {
         return;
      }

      if IsClass(poOriginal,&Player)
         AND NOT Send(poOriginal,@IsLoggedOn)
      {
         Send(self,@Delete);

         return;
      }

      if what = poOriginal
      {
         % If target leaves room, hunt them down.
         if IsClass(Send(poOriginal,@GetOwner),&UnderWorld)
         {
            Send(self,@Delete);

            return;
         }
         else
         {
            Post(self,@GotoOriginal);
         }
      }

      propagate;
   }

   GotoOriginal()
   {
      local oOriginalOwner;

      if poOriginal = $
      {
         return;
      }

      if Send(poOriginal,@IsLoggedOn)
      {
         oOriginalOwner = Send(poOriginal,@GetOwner);
         Send(oOriginalOwner,@NewHold,#what=self,
               #new_row = Send(poOriginal,@GetRow),
               #new_col = Send(poOriginal,@GetCol),
               #new_angle = Send(poOriginal,@GetAngle));
         if poOriginal <> poMaster
         {
            Post(self,@AttackOriginal);
         }
      }

      return;
   }

   AttackOriginal()
   {
      if poOriginal <> poMaster
      {
         Send(self,@TargetSwitch,#what=poOriginal,#iHatred=1000);
         Send(self,@EnterStateChase);
      }

      return;
   }

   SetMaster(oMaster=$)
   {
      if oMaster = $
      {
         if poMaster <> $
         {
            Send(poMaster,@RemoveControlledMinion,#what=self);
            if poOwner <> $
            {
               Post(poOwner,@SomethingChanged,#what=self);
            }

            % Evil twins will go after the original target.
            if IsClass(self,&EvilTwin)
            {
               poMaster = Send(self,@GetCaster);
               Send(self,@SetBehaviorFlag,#flag=AI_MOVE_FOLLOW_MASTER,
                     #value=FALSE);
               Send(self,@GoToOriginal);
            }
         }
      }
      else
      {
         poMaster = oMaster;

         if poMaster <> poCaster
         {
            % We've been captured, break target in case the new master
            % doesn't want to attack them.
            Send(self,@EnterStateWait);
         }
         else
         {
            % Original caster captured us back, break target unless we're
            % attacking the original.
            if poTarget <> poOriginal
            {
               Send(self,@EnterStateWait);
            }
         }

         if poOwner <> $
         {
            Post(poOwner,@SomethingChanged,#what=self);
         }

         if NOT Send(SYS,@IsPKAllowed)
            AND (poTarget <> $
               AND IsClass(poTarget,&Player))
         {
            % Forget our target
            Send(self,@EnterStateWait);
         }
      }

      return;
   }

   GetOriginalInfo()
   {
      if poOriginal = $
      {
         return;
      }

      vrIcon = Send(poOriginal,@GetPlayerIcon);
      vrName = Send(poOriginal,@GetTrueName);
      piGender = Send(poOriginal,@GetGender);
      piDrawfx = Send(poOriginal,@GetDrawingEffects);

      return;
   }

   GetObjectFlags()
   {
      if poOriginal = $
      {
         return 0;
      }

      return Send(poOriginal,@GetObjectFlags);
   }

   GetDrawingEffects()
   {
      if poOriginal = $
      {
         return 0;
      }

      return Send(poOriginal,@GetDrawingEffects);
   }

   GetPlayerNameColor()
   {
      if poOriginal = $
      {
         return 0;
      }

      return Send(poOriginal,@GetPlayerNameColor);
   }

   GetClientObjectType()
   {
      if poOriginal = $
      {
         return 0;
      }

      return Send(poOriginal,@GetClientObjectType);
   }

   GetAttackRange()
   {
      local iWeapon;

      if poOriginal = $
      {
         return 0;
      }

      iWeapon = Send(poOriginal,@GetWeapon);
      if iWeapon <> $
      {
         return Send(iWeapon,@GetRange);
      }

      return 1;
   }

   % This returns the battler's ability to-hit.
   GetOffense(what = $, stroke_obj=$)
   {
      return Send(poOriginal,@GetOffense,#what=what,#stroke_obj=stroke_obj);
   }

   % This returns the battler's ability to avoid being hit.
   GetDefense(what = $, stroke_obj=$)
   {
      return Send(poOriginal,@GetDefense,#what=what,#stroke_obj=stroke_obj);
   }

   GetDamage(what=$,stroke_obj=$)
   {
      local oStroke, iDamage;

      if poOriginal = $
      {
         return 0;
      }

      oStroke = stroke_obj;
      if IsClass(poOriginal,&Player)
      {
         oStroke = $;
      }
      iDamage = Send(poOriginal,@GetDamage,#what=what,#stroke_obj=oStroke);

      return iDamage * piDamagePercent / 100;
   }

   GetDamageType(what=$,use_weapon=$)
   {
      if poOriginal = $
      {
         return viAttack_type;
      }

      return Send(poOriginal,@GetDamageType,#what=what,#use_weapon=use_weapon);
   }

   GetSpellType(what=$,use_weapon=$)
   {
      if poOriginal = $
      {
         return viAttack_spell;
      }

      return Send(poOriginal,@GetSpellType,#what=what,#use_weapon=use_weapon);
   }

   GetKarma(detect=FALSE)
   {
      if detect
      {
         return Send(poOriginal,@GetKarma);
      }

      propagate;
   }

   SomethingChanged(what=$)
   {
      if what = poOriginal
      {
         if Send(what,@GetAnimation) = PANM_WAVE
         {
            Send(self,@DoWave);
         }

         if Send(what,@GetAnimation) = PANM_POINT
         {
            Send(self,@DoPoint);
         }

         if Send(what,@GetAnimation) = PANM_DANCE
         {
            Send(self,@DoDance);
         }

         piDrawfx = Send(poOriginal,@GetDrawingEffects);
      }

      propagate;
   }

   DoWave()
   "Causes the EvilTwin to wave."
   {
      Send(self,@GetOriginalInfo);
      piAnimation = PANM_WAVE;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = PANM_NONE;

      return;
   }

   DoPoint()
   {
      Send(self,@GetOriginalInfo);
      piAnimation = PANM_POINT;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = PANM_NONE;

      return;
   }

   DoDance()
   {
      Send(self,@GetOriginalInfo);
      piAnimation = PANM_DANCE;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = PANM_NONE;

      return;
   }

   SetOriginal(who=$)
   {
      if who = $
      {
         Post(self,@Delete);

         return;
      }

      poOriginal = who;
      Send(self,@GetOriginalInfo);

      return;
   }

   GetIcon()
   {
      return Send(poOriginal,@GetIcon);
   }

   MonsterAttack(what=$)
   {
      % Do the animation!
      Send(self,@DoAttack);

      return;
   }

   % The next three messages deal with the three defense skills.
   % These messages return the relative values of the three
   % skills.  Used in player for defense, used in battler for defense messages.
   GetParryAbility(stroke_obj=$)
   {
      return Send(poOriginal,@GetParryAbility,#stroke_obj=stroke_obj);
   }

   GetBlockAbility(stroke_obj=$)
   {
      return Send(poOriginal,@GetBlockAbility,#stroke_obj=stroke_obj);
   }

   GetDodgeAbility(stroke_obj=$)
   {
      return Send(poOriginal,@GetDodgeAbility,#stroke_obj=stroke_obj);
   }

   DoAttack()
   {
      local Weapon, ammotype, i;
      
      Weapon = Send(poOriginal,@GetWeapon);
      ammotype = poArrow;
      Send(self,@GetOriginalInfo);

      if Weapon <> $   %IsClass(Weapon,&Weapon)
      {
         if IsClass(Weapon,&Bow)
         {
            piAnimation = PANM_BOW_FIRE;

            for i in Send(poOriginal,@GetPlayerUsing)
            {
               if Send(i,@GetItemUseType) = ITEM_USE_QUIVER
               {
                  AmmoType = i;
               }
            }

            Send(poOwner,@SomethingShot,#who=self,#target=poTarget,
                  #projectile=AmmoType);
         }
         else
         {
            if IsClass(Weapon,&TouchAttackSpell)
            {
               piAnimation = PANM_CAST;
            }
            else
            {
               piAnimation = PANM_WEAPON_ATTACK;
            }
         }
      }
      else
      {
         piAnimation = PANM_FIST_ATTACK;
      }

      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = PANM_NONE;

      return;
   }

   ShowDesc()
   {
      Send(poOriginal,@ShowDesc);

      return;
   }

   SendMoveAnimation()
   {
      % Make it look like EvilTwin is walking

      Send(poOriginal,@SendMoveAnimation);

      return;
   }

   SendMoveOverlays()
   {
      Send(poOriginal,@SendMoveOverlays);

      return;
   }

   SendAnimation()
   {
      Send(poOriginal,@SendAnimation,#iAnimation=piAnimation);

      return;
   }

   SendOverlays()
   {
      Send(poOriginal,@SendOverlays,#iAnimation=piAnimation);

      return;
   }

   GetIllusionForm()
   {
      return poOriginal;
   }

   TryLook(what=$)
   {
      if poOriginal = $
      {
         return;
      }

      if IsClass(poOriginal,&Player)
         AND Send(poOriginal,@CheckPlayerFlag,#flag=PFLAG_INVISIBLE)
         AND what <> poOriginal
      {
         return;
      }

      Send(what,@SendLookPlayer,#what=poOriginal);

      return;
   }

   SpecialHatredBehavior(what=$)
   {
      % Trying to reduce the tendency of reflections to turn on themselves
      %  or their master.
      if IsClass(what,&Revenant)
         OR IsClass(what,&EvilTwin)
      {
         return -2000;
      }

      return 0;
   }

   GetCaster()
   {
      return poCaster;
   }

   CanEvilTwin()
   {
      return FALSE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

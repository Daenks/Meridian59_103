% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
RadiusEnchantmentTotem is ActiveObject

constants:

   include blakston.khd

resources:

   RadiusEnchantmentTotem_icon_rsc = blank.bgf
   
classvars:

   viObject_flags = LOOK_NO
   vrIcon = RadiusEnchantmentTotem_icon_rsc

properties:

   poSpell = $            %% The radius spell we're supporting
   poCaster = $           %% The caster of the original spell

   piSpellpower = $
   ptExpirationTimer = $

   piRow = 0
   piCol = 0

messages:

   Constructor(totem_spell=$,totem_caster=$,totem_power=0,totem_range=0)
   {
      local oRoom, iTime;
      
      poSpell = totem_spell;
      poCaster = totem_caster;
      piSpellpower = totem_power;
      
      oRoom = Send(poCaster,@GetOwner);
      
      If oRoom = $
         OR poCaster = $
         OR poSpell = $
         OR piSpellpower = 0
         OR NOT IsClass(oRoom,&Room)
      {
         Post(self,@Delete);
         return;
      }

      Send(SYS,@AddSpellTotemToServerList,#oTotem=self);
      
      piRow = Send(poCaster,@GetRow);
      piCol = Send(poCaster,@GetCol);

      Send(oRoom,@NewHold,#what=self,#new_row=piRow,#new_col=piCol);

      Send(poSpell,@InitiateNewRadiusEnchantment,#source=self,#iSpellPower=piSpellpower,#iRange=totem_range);

      iTime = Send(poSpell,@GetDuration,#iSpellPower=piSpellpower);
      if iTime <> $
      {
         ptExpirationTimer = CreateTimer(self,@TotemExpire,iTime);
      }

      propagate;
   }
   
   TotemExpire()
   {
      local i;

      ptExpirationTimer = $;
      
      Send(self,@Delete);
      return;
   }

   Delete()
   {
      local i;

      if ptExpirationTimer <> $
      {
         DeleteTimer(ptExpirationTimer);
         ptExpirationTimer = $;
      }

      for i in plRadiusEnchantments
      {
         Send(Nth(i,1),@BreakTrance,#who=self,#event=EVENT_STEER);
      }

      poCaster = $;
      poSpell = $;
      plRadiusEnchantments = $;

      Send(SYS,@DeleteSpellTotemFromMasterList,#oTotem=self);

      propagate;
   }
   
   GetCaster()
   {
      return poCaster;
   }
   
   GetSpell()
   {
      return poSpell;
   }

   GetName()
   {
      return Send(poCaster,@GetName);
   }
   
   GetTrueName()
   {
      return Send(poCaster,@GetTrueName);
   }
   
   GetGuild()
   {
      if IsClass(poCaster,&Monster)
      {
         return $;
      }

      return Send(poCaster,@GetGuild);
   }
   
   AllowPlayerAttack(victim=$,report=FALSE)
   {
      if IsClass(poCaster,&Monster)
      {
         return TRUE;
      }

      if victim = poCaster
      {
         return TRUE;
      }

      return Send(poCaster,@AllowPlayerAttack,#victim=victim,#report=FALSE,#spell_obj=poSpell);
   }
   
   CheckPlayerFlag(flag=$)
   {
      if IsClass(poCaster,&Monster)
      {
         return $;
      }

      return Send(poCaster,@CheckPlayerFlag,#flag=flag);
   }

   SomethingEntered(where = $,what = $)
   {
      return;
   }
   
   SomethingLeft(where = $,what = $)
   {
      return;
   }
   
   SomethingMoved(what = $,new_row = $,new_col = $)
   {
      propagate;
   }

   LastUserLeft()
   {
      propagate;
   }

   DestroyDisposable()
   {
      % These naturally time out. They are never actively deleted.
      return;
   }

   GetEnchantedState(what = $)
   "If enchanted by <what>, returns the state data (which MUST exist, or it's an error.  "
   "In other words, the caller must know that <what> adds state data).  Returns $ otherwise."
   {
      local i;

      for i in plRadiusEnchantments
      {
         if Nth(i,1) = what
         {
            return Nth(i,2);
         }
      }
      
      return $;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

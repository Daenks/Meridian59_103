% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SurvivalRoomAttribute is RoomAttribute

% This turns any pre-existing room into a survival room with a specific list
% of participants.
% Players may join these from any safe location, but, if they do, they
% return to that location upon leaving, penning, or dying.

% Survival begins after 60 seconds of waiting for participants.
% The Survival begins at Level 1.
% When players complete certain objectives, the level increases.
% Monsters are more difficult at each level, and loot drops and XP increase.

% If players aren't attacked for a long period of time, they're clearly
% abusing something. Enemies will begin spawning with MOVES_THROUGH_WALLS.

constants:

   include blakston.khd
   
   GOAL_KILLS = 1
   GOAL_BOSS = 2
   GOAL_MINIBOSSES = 3

   % 3 minutes to begin public survivals
   PB_START_TIME = 180000
   
   % 1 minute to begin other survivals
   DEFLT_START_TIME = 60000
   
   % Report goals every 1 minute
   REPORT_TIME = 60000

   % Starts when Miniboss is killed
   RESPAWN_MINIBOSS_TIME = 60000

resources:

   survatt_welcome_message = \
      "You can feel Kraanan's eyes upon you as you undertake his greatest "
      "challenge. This place will grow progressively more "
      "dangerous as time goes on. Death seems inevitable, and dying will be "
      "as lethal as ever."
      
   survatt_beginning_in_sixty = \
      "~BCombat will begin in sixty seconds."
      
   survatt_beginning_in_location = \
      "~BKraanan grins. Sounds of combat echo from %q. "
      "Survive, conquer, and be rewarded."
   
   survatt_ended_at_level = \
      "~BKraanan's challenge at %q has ended, and the warrior god is "
      "satisfied. "
      "His valorous combatants reached level %i. "
      "%q was the last survivor."
   
   survatt_next_level_in_seconds = \
      "~BYou have defeated wave number %i. The next arrives in %i seconds."
      
   survatt_begin_level = \
      "~BWave %i of the enemy force has arrived."

   survatt_survival_no_cast_rsc = "You cannot cast %s here."

   survatt_goals_header = \
      "To defeat this wave of enemies, you must:"
   survatt_kill_goal_msg = \
      "Kill %i enemy creatures."
   survatt_boss_goal_msg = \
      "Kill a boss."
   survatt_minibosses_goal_msg = \
      "Kill %i minibosses."
      
   survatt_boss_slain_goal_msg = \
      "~BA boss has been slain!"
   survatt_minibosses_slain_goal_msg = \
      "~BTwo minibosses have been slain!"
      
   survatt_kills_remaining = \
      "There are %i kills remaining until the next wave."
      
   survatt_wall_blitz_activated = \
      "~BA surge of ethereal fury overcomes the horde!"

   survatt_fixed_reward_msg = \
      "It seems one of the fallen enemies has dropped one %s on the battlefield!"

   survatt_round_begin_wav = gong.wav
   background_survival_sky = 3sky.bgf
      
classvars:

properties:

   plGenerators = $
   
   plLevelGoals = $
   plBosses = $
   plMinibosses = $
   plMonsters = $
   
   piLevel = 1
   
   piRegroupTime = 15000
   ptNextLevelTimer = $
   piWallBlitzTime = 300000
   
   pbSpawnWaves = FALSE

   ptWallBlitzTimer = $
   
   plFixedRewards = $
   
   piSpawnedBossThisRound = FALSE
   
   ptReportGoalsTimer = $
   ptRespawnMiniBossTimer = $
   
   % Boolean for resource restoration on level completion.
   pbRestoreResources = TRUE

messages:

   Constructed()
   {
      local i;

      plGenerators = Send(poHostObject,@GetGenerators);

      % Set the regroup time from the SurvivalRoomMaintenance default
      piRegroupTime = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                           @GetRegroupTime);
      % Set wall blitz time.
      piWallBlitzTime = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetWallBlitzTime);
      pbRestoreResources = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetRestoreResources);
      plBosses = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetBosses);
      plMinibosses = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetMiniBosses);
      plFixedRewards = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetFixedRewards);
      
      plMonsters = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetRoundOneMonsters);

      ptNextLevelTimer = CreateTimer(self,@InitiateNextLevel,DEFLT_START_TIME);

      for i in Send(SYS,@GetUsersLoggedOn)
      {
         Send(i,@MsgSendUser,#message_rsc=survatt_beginning_in_location,
                             #parm1=Send(poHostObject,@GetName));
      }
      
      for i in Send(poHostObject,@GetPlayers)
      {
         Send(i,@MsgSendUser,#message_rsc=survatt_beginning_in_sixty);
      }
      
      for i in Send(poHostObject,@GetMonsters)
      {
         if IsClass(i,&Monster)
         {
            Send(i,@Delete);
         }
      }
      
      Post(poHostObject,@RecalcLightAndWeather);

      propagate;
   }

   InitiateNextLevel(timer=$)
   {
      local i, n, p;

      ptNextLevelTimer = $;
      pbSpawnWaves = TRUE;

      if piLevel = 2
      {
         plMonsters = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetRoundTwoMonsters);
      }
      
      if piLevel = 3
      {
         plMonsters = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetRoundThreeMonsters);
      }
      
      if piLevel = 4
      {
         plMonsters = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetRoundFourMonsters);
      }
      
      if piLevel = 5
      {
         plMonsters = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetRoundFiveMonsters);
      }
      
      if piLevel = 6
      {
         plMonsters = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetRoundSixMonsters);
      }
      
      if piLevel = 7
      {
         plMonsters = Send(Send(SYS,@GetSurvivalRoomMaintenance),
                              @GetAllMonsters);
      }
      
      ptWallBlitzTimer = CreateTimer(self,@ActivateWallBlitz,piWallBlitzTime);
      ptReportGoalsTimer = CreateTimer(self,@ReportGoalsTrigger,REPORT_TIME);
      
      if Random(1,20) < piLevel
      {
         Send(self,@SpawnBoss);
      }
      
      Send(self,@SpawnMiniboss);
      Send(self,@SpawnMiniboss);
      
      for i in Send(poHostObject,@GetPlayers)
      {
         Send(i,@MsgSendUser,#message_rsc=survatt_begin_level,
                             #parm1=piLevel);
      }

      plLevelGoals = $;
      Send(self,@ChooseGoals);
      
      Send(self,@ReportGoals);
      
      Send(poHostObject,@SomethingWaveRoom,#wave_rsc=survatt_round_begin_wav);

      return;
   }
   
   ReportGoalsTrigger(timer=$)
   {
      ptReportGoalsTimer = $;
      
      Send(self,@ReportGoals);
      ptReportGoalsTimer = CreateTimer(self,@ReportGoalsTrigger,REPORT_TIME);
      
      return;
   }
   
   ReportGoals()
   {
      local i, n;
   
      for i in Send(poHostObject,@GetPlayers)
      {
         Send(i,@MsgSendUser,#message_rsc=survatt_goals_header);
         for n in plLevelGoals
         {
            if Nth(n,1) = GOAL_KILLS
            {
               Send(i,@MsgSendUser,#message_rsc=survatt_kill_goal_msg,
                                   #parm1=Nth(n,2));
            }
            if Nth(n,1) = GOAL_BOSS
            {
               Send(i,@MsgSendUser,#message_rsc=survatt_boss_goal_msg);
            }
            if Nth(n,1) = GOAL_MINIBOSSES
            {
               Send(i,@MsgSendUser,#message_rsc=survatt_minibosses_goal_msg,
                                   #parm1=Nth(n,2));
            }
         }
      }
      return;
   }
   
   ActivateWallBlitz()
   {
      local i, each_obj;
      
      ptWallBlitzTimer = $;
      
      for i in Send(poHostObject,@GetMonsters)
      {
         Send(i,@SetBehaviorFlag,#flag=AI_MOVE_WALKTHROUGH_WALLS);

      }
      
      for i in Send(poHostObject,@GetPlayers)
      {
         Send(i,@MsgSendUser,#message_rsc=survatt_wall_blitz_activated);
      }
      
      return;
   }
   
   LevelComplete()
   {
      local i, lFixedReward, oReward, iRewardTime, lRandomSpawnPoint;

      iRewardTime = 0;

      % Prevent multi-level completion
      if NOT pbSpawnWaves
         OR ptNextLevelTimer <> $
      {
         return;
      }

      pbSpawnWaves = FALSE;
      piSpawnedBossThisRound = FALSE;
      
      for i in Send(poHostObject,@GetMonsters)
      {
         if Send(i,@GetMaster) = $
         {
            Send(i,@Delete);
         }
      }
      
      if ptWallBlitzTimer <> $
      {
         DeleteTimer(ptWallBlitzTimer);
         ptWallBlitzTimer = $;
      }
      if ptReportGoalsTimer <> $
      {
         DeleteTimer(ptReportGoalsTimer);
         ptReportGoalsTimer = $;
      }
      if ptRespawnMiniBossTimer <> $
      {
         DeleteTimer(ptRespawnMiniBossTimer);
         ptRespawnMiniBossTimer = $;
      }

      for lFixedReward in plFixedRewards
      {
         if Nth(lFixedReward,2) = piLevel
         {
            oReward = Create(Nth(lFixedReward,1));
            for i in Send(poHostObject,@GetPlayers)
            {
               Send(i,@MsgSendUser,#message_rsc=survatt_fixed_reward_msg,
                                   #parm1=Send(oReward,@GetName));
            }
            
            if plGenerators <> $
            {
               lRandomSpawnPoint = Nth(plGenerators,
                                       Random(1,Length(plGenerators)));
            }
            else
            {
               lRandomSpawnPoint = [Send(poHostObject,@GetTeleportRow),
                                    Send(poHostObject,@GetTeleportCol)];
            }
            
            Send(poHostObject,@NewHold,#what=oReward,
                               #new_row=Nth(lRandomSpawnPoint,1),
                               #new_col=Nth(lRandomSpawnPoint,2));
            iRewardTime = iRewardTime + 45000;
         }
      }

      ptNextLevelTimer = CreateTimer(self,@InitiateNextLevel,
                              piRegroupTime + iRewardTime);
      
      for i in Send(poHostObject,@GetPlayers)
      {
         if pbRestoreResources
            AND NOT Send(i,@IsInCannotInteractMode)
         {
            Send(i,@SetHealth,#amount=Send(i,@GetMaxHealth));
            Send(i,@EatSomething,#nutrition=200);
            if NOT Send(i,@IsCrystalizeManaSurging)
            {
               Send(i,@GainMana,#amount=Send(i,@GetMaxMana),
                  #bCapped=TRUE);
            }
            Send(i,@RechargeAllRods,#alternate_recharge=TRUE);
         }
         Send(i,@MsgSendUser,#message_rsc=survatt_next_level_in_seconds,
                             #parm1 = piLevel,
                             #parm2 = (piRegroupTime + iRewardTime)/1000);
      }

      piLevel = piLevel + 1;
      
      return;
   }
   
   ChooseGoals()
   {
      local iRand,plBosses,iTotalParticipants,plParticipants;
      
      plParticipants = Send(poHostObject,@GetActivePlayers);
      
      if plParticipants <> $
      {
        iTotalParticipants = Length(plParticipants);
      }
      else
      {
         iTotalParticipants = 0;
      }

      iRand = Random((iTotalParticipants)*5,
                     (iTotalParticipants)*15);
                     
      iRand = Bound(iRand,1,75);

      plLevelGoals = Cons([GOAL_KILLS,iRand],plLevelGoals);

      iRand = Random(1,3);
      if iRand = 1
         AND piSpawnedBossThisRound
      {
         plLevelGoals = Cons([GOAL_BOSS,1],plLevelGoals);
      }

      if iRand = 2
      {
         plLevelGoals = Cons([GOAL_MINIBOSSES,2],plLevelGoals);
      }
      
      return;
   }
   
   SpawnBoss()
   {
      local cBoss;

      cBoss = Nth(plBosses,Random(1,Length(plBosses)));
      Send(poHostObject,@GenerateMonster,#oMonster=Create(cBoss),#bStack=TRUE,
                                    #piSurvivalLevel=piLevel);
      piSpawnedBossThisRound = TRUE;

      return;
   }
   
   RespawnMiniboss(timer=$)
   {
      ptRespawnMiniBossTimer = $;
      Send(self,@SpawnMiniboss);

      return;
   }
   
   SpawnMiniboss()
   {
      local cMiniboss;

      cMiniboss = Nth(plMinibosses,Random(1,Length(plMinibosses)));
      Send(poHostObject,@GenerateMonster,#oMonster=Create(cMiniboss),#bStack=TRUE,
                                 #piSurvivalLevel=piLevel);
      return;
   }
   
   SomethingKilled(what=$,victim=$)
   {
      local i, n, p, cDeadClass, respawnCheck, oTarget, mob, oMonster, plParticipants;
      
      if IsClass(victim,&User)
      {
         return;
      }

      if IsClass(victim,&Monster)
      {
         % These kills don't count towards the room goals.
         if Send(victim,@IsMinion)
            OR IsClass(victim,&Brambles)
         {
            return;
         }

         cDeadClass = GetClass(victim);
         
         for respawnCheck in plMinibosses
         {
            if respawnCheck = cDeadClass
               AND ptRespawnMiniBossTimer = $
            {
               ptRespawnMiniBossTimer = 
                    CreateTimer(self,@RespawnMiniboss,RESPAWN_MINIBOSS_TIME);
            }
         }
         
         for i in plLevelGoals
         {
            if Nth(i,1) = GOAL_KILLS
            {
               SetNth(i,2,Nth(i,2)-1);
               
               for p in Send(poHostObject,@GetPlayers)
               {
                  Send(p,@MsgSendUser,#message_rsc=survatt_kills_remaining,
                                      #parm1=Nth(i,2));
               }
            }
            
            if Nth(i,1) = GOAL_BOSS
            {
               for n in plBosses
               {
                  if n = cDeadClass
                  {
                     SetNth(i,2,Nth(i,2)-1);
                  }
               }
            }
            
            if Nth(i,1) = GOAL_MINIBOSSES
            {
               for n in plMinibosses
               {
                  if n = cDeadClass
                  {
                     SetNth(i,2,Nth(i,2)-1);
                  }
               }
            }
         }
      }
      
      for i in plLevelGoals
      {
         plParticipants = Send(poHostObject,@GetActivePlayers);
         
         if Nth(i,2) <= 0
         {
            if Nth(i,1) = GOAL_KILLS
            {
               Post(self,@AggroBosses,#victim=victim);
            }
            if Nth(i,1) = GOAL_BOSS
            {
               for n in plParticipants
               {
                  Send(n,@MsgSendUser,
                         #message_rsc=survatt_boss_slain_goal_msg);
               }
            }
            if Nth(i,1) = GOAL_MINIBOSSES
            {
               for n in plParticipants
               {
                  Send(n,@MsgSendUser,
                       #message_rsc=survatt_minibosses_slain_goal_msg);
               }
            }

            plLevelGoals = DelListElem(plLevelGoals,i);
         }

         if plParticipants <> $
            AND Length(plParticipants) = 1
            AND plLevelGoals <> $
         {
            for mob in Send(poHostObject,@GetMonsters)
            {
               if NOT Send(mob,@IsOwnedByPlayer)
                  AND mob <> victim
                  AND Random(1,2) = 1
               {
                  oTarget = First(plParticipants);
                  if oTarget <> $
                  {
                     Send(mob,@TargetSwitch,#what=oTarget,#iHatred=100);
                     Send(mob,@EnterStateChase,#target=oTarget,#actnow=True);
                  }
               }
            }
         }
      }

      if plLevelGoals = $
      {
         Send(self,@LevelComplete);
      }

      return;
   }

   AggroBosses(victim = $)
   {
      local oTarget, i, n, z, each_obj, count, plParticipants;
      
      plParticipants = Send(poHostObject,@GetActivePlayers);

      if plParticipants = $
         OR plLevelGoals = $
      {
         return;
      }

      for i in Send(poHostObject,@GetMonsters)
      {
         if victim <> $
            AND victim = i
         {
            continue;
         }

         for z in [plBosses,plMiniBosses]
         {
            for n in z
            {
               if GetClass(i) = n
               {
                  if Length(plParticipants) = 1
                  {
                     oTarget = First(plParticipants);
                  }
                  else
                  {
                     oTarget = Nth(plParticipants,
                                   Random(1,Length(plParticipants)));
                     count = 0;
                     while (oTarget = $
                        OR ((IsClass(oTarget,&DM)
                           AND Send(oTarget,@PlayerIsImmortal))
                        OR Send(oTarget,@IsInCannotInteractMode)))
                     {
                        oTarget = Nth(plParticipants,Random(1,
                                      Length(plParticipants)));
                        count = count + 1;
                        if count > 10
                        {
                           break;
                        }
                     }
                  }
                  Send(i,@TargetSwitch,#what=oTarget,#iHatred=100);
                  Send(i,@EnterStateChase,#target=oTarget,#actnow=True);
               }
            }
         }
      }

      return;
   }

   NewHoldObject(what=$)
   {
      local oTarget, i, count, plParticipants;
      
      if IsClass(what,&User)
      {
         Post(self,@AggroSome,#who=what);
         Post(what,@MsgSendUser,#message_rsc=survatt_welcome_message);
         return;
      }

      if IsClass(what,&Monster)
         AND (plBosses = $
            OR (plBosses <> $
               AND FindListElem(plBosses,GetClass(what)) = 0))
         AND (plMiniBosses = $
            OR (plMinibosses <> $
               AND FindListElem(plMinibosses,GetClass(what)) = 0))
      {
         plParticipants = Send(poHostObject,@GetActivePlayers);
         
         if plParticipants = $
            OR Send(what,@IsMinion)
         {
            return;
         }

         if Length(plParticipants) = 1
         {
            oTarget = First(plParticipants);
         }
         else
         {
            oTarget = Nth(plParticipants,Random(1,Length(plParticipants)));
            count = 0;
            while (oTarget = $
               OR ((IsClass(oTarget,&DM)
                     AND Send(oTarget,@PlayerIsImmortal))
                  OR Send(oTarget,@IsInCannotInteractMode)))
            {
               oTarget = Nth(plParticipants,Random(1,Length(plParticipants)));
               count = count + 1;
               if count > 10
               {
                  break;
               }
            }
         }

         if Length(plParticipants) = 1
         {
            % Cut aggro to 1/5th in solo. Post these so they
            % run after mob is set up in room.
            if Random(1,5) = 1
            {
               Post(what,@TargetSwitch,#what=oTarget,#iHatred=100);
               Post(what,@EnterStateChase,#target=oTarget,
                     #actnow=True);
            }
         }
         else
         {
            % Public arenas get full aggro. Post these so they
            % run after mob is set up in room.
            Post(what,@TargetSwitch,#what=oTarget,#iHatred=100);
            Post(what,@EnterStateChase,#target=oTarget,#actnow=True);
         }

         if ptWallBlitzTimer = $
         {
            Send(what,@SetBehaviorFlag,#flag=AI_MOVE_WALKTHROUGH_WALLS);
         }
      }

      return;
   }

   AggroOne(who = $,victim = $)
   {
      local i, iCount, oMonster;

      if (IsClass(who,&DM)
            AND Send(who,@PlayerIsImmortal))
         OR Send(who,@IsInCannotInteractMode)
      {
         return;
      }

      iCount = 0;

      for oMonster in Send(poHostObject,@GetMonsters)
      {
         if NOT Send(oMonster,@IsOwnedByPlayer)
            AND Random(1,5) = 1
         {
            % If this is called from SomethingKilled, don't aggro
            % the mob that was just killed.
            if victim <> $
               AND oMonster = victim
            {
               continue;
            }
            Send(oMonster,@TargetSwitch,#what=who,#iHatred=100);
            Send(oMonster,@EnterStateChase,#target=who,#actnow=True);
            iCount = iCount + 1;
            
            if iCount >= 1
            {
               return;
            }
         }
      }

      return;
   }

   AggroSome(who=$)
   {
      local i, iCount;

      if (IsClass(who,&DM)
            AND Send(who,@PlayerIsImmortal))
         OR Send(who,@IsInCannotInteractMode)
      {
         return;
      }

      iCount = 0;

      for i in Send(poHostObject,@GetMonsters)
      {
         if NOT Send(i,@IsOwnedByPlayer)
            AND Random(1,5) = 1
         {
            Send(i,@TargetSwitch,#what=who,#iHatred=100);
            Send(i,@EnterStateChase,#target=who,#actnow=True);
            iCount = iCount + 1;
            
            if iCount >= 5
            {
               return;
            }
         }
      }

      return;
   }

   Delete()
   {
      local i;
      
      for i in Send(poHostObject,@GetMonsters)
      {
         if IsClass(i,&Monster)
         {
            Send(i,@Delete);
         }
      }
      
      if ptNextLevelTimer <> $
      {
         DeleteTimer(ptNextLevelTimer);
         ptNextLevelTimer = $;
      }
      if ptWallBlitzTimer <> $
      {
         DeleteTimer(ptWallBlitzTimer);
         ptWallBlitzTimer = $;
      }
      if ptReportGoalsTimer <> $
      {
         DeleteTimer(ptReportGoalsTimer);
         ptReportGoalsTimer = $;
      }
      if ptRespawnMiniBossTimer <> $
      {
         DeleteTimer(ptRespawnMiniBossTimer);
         ptRespawnMiniBossTimer = $;
      }

      propagate;
   }
   
   LastUserLeft(what=$)
   {
      local i;

      for i in Send(SYS,@GetUsersLoggedOn)
      {
         Send(i,@MsgSendUser,#message_rsc=survatt_ended_at_level,
                             #parm1=Send(poHostObject,@GetName),
                             #parm2=piLevel,
                             #parm3=Send(what,@GetTrueName));
      }

      Post(self,@Delete);
      propagate;
   }

   GetLevel()
   {
      return piLevel;
   }

   ReqSpellCast(who = $, oSpell = $, lItems = $)
   {
      if IsClass(oSpell,&Truce)
         OR IsClass(oSpell,&Jig)
      {
         % We have to provide the fail message here.
         Send(who,@MsgSendUser,#message_rsc=survatt_survival_no_cast_rsc,
               #parm1=Send(oSpell,@GetName));

         return FALSE;
      }

      return TRUE;
   }

   IsBoss(what=$)
   {
      local i, cMob;

      if what <> $
      {
         cMob = GetClass(what);
         for i in plBosses
         {
            if cMob = i
            {
               return TRUE;
            }
         }
      }

      return FALSE;
   }

   IsMiniBoss(what=$)
   {
      local i, cMob;

      if what <> $
      {
         cMob = GetClass(what);
         for i in plMiniBosses
         {
            if cMob = i
            {
               return TRUE;
            }
         }
      }

      return FALSE;
   }
   
   OverridesMonsterGeneration()
   {
      return TRUE;
   }
   
   AllowTryCreateMonster()
   {
      if NOT pbSpawnWaves
      {
         return FALSE;
      }

      return TRUE;
   }

   GetMonsters()
   {
      return plMonsters;
   }
   
   BoostsMonsters()
   {
      return TRUE;
   }
   
   BoostMonster(boost_val=0)
   {
      return boost_val + piLevel;
   }
   
   ModifiesRoomBackground()
   {
      return TRUE;
   }
   
   ModifyRoomBackground(rBackground=$)
   {
      return background_survival_sky;
   }
   
   OverridesMonsterDots()
   {
      return TRUE;
   }
   
   OverrideMonsterDots(what=$,who=$)
   {
      if Send(self,@IsMiniBoss,#what=what)
      {
         return MM_MINIBOSS;
      }
      
      if Send(self,@IsBoss,#what=what)
      {
         return MM_BOSS;
      }

      return MM_MONSTER;
   }
   
   ModifyMonsterGenTime(iTime=0)
   {
      return 1000;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Skill is PassiveObject 

constants:

   include blakston.khd

resources:

   skill_name_rsc = "skill"
   skill_icon_rsc = light.bgf
   skill_desc_text_rsc = "This is a skill."
   skill_intro_rsc = "One of several agile skills."

   skill_bad_target = "You can't cast %s on %s%s!"
   skill_out_of_range = "%s%s is out of range."

   skill_too_tired = "You are too tired to use your %s skill!"
   skill_failed_by_chance = "Your %s attempt was unsuccessful."
   
   skill_sound_fail = spelfail.wav

   skill_desc_rsc = "SCHOOL : %s         LEVEL : %i \n\n%s"
   skill_school_fencing = "Weaponcraft"
   skill_school_brawling = "Brawling"
   skill_school_thievery = "Thievery"

classvars:

   vrName = skill_name_rsc
   vrIcon = skill_icon_rsc
   vrDesc = skill_desc_text_rsc
   vrSkill_intro = skill_intro_rsc

   vrFailed = skill_failed_by_chance

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSkill_num = $
   viSchool = $

   viSkill_level = 1

   % Initial chance to increase, modified by Intellect.   
   viChance_to_Increase = 25    

   viskillExertion = 2
   vbCheck_Exertion = TRUE

   % Shows up on pull-down menus, if FALSE some skills, like Parry and Dodge,
   %  are solely passive, and are TRUE
   vbAutomatic = FALSE

   % Default animation speed for icon if set to 0, then no animation.
   viAnimationSpeed = 0

   viAnimation_start = 1
   viAnimation_end = 1
   viIcon_animation_start = 2
   viIcon_animation_end = 2

properties:

   plPrerequisites = $

messages:

   Delete()
   {
      Send(SYS,@Deleteskill,#what=self);

      propagate;
   }

   GetSchoolStr()
   {
      local oSchool;

      oSchool = skill_school_fencing;

      if viSchool = SKS_BRAWLING
      {
         oSchool = skill_school_brawling;
      }

      if viSchool = SKS_THIEVERY
      {
         oSchool = skill_school_thievery;
      }

      return oSchool;
   }

   ShowDesc()
   {
      local rSchool;

      rSchool = skill_school_fencing;

      if viSchool = SKS_BRAWLING
      {
         rSchool = skill_school_brawling;
      }

      if viSchool = SKS_THIEVERY
      {
         rSchool = skill_school_thievery;
      }

      AddPacket(4,skill_desc_rsc,4,rSchool,4,viSkill_Level,4,vrDesc);

      return;
   }

   GetValue()
   {
      local i,j;

      i = 1;
      j = 2;

      while i < viSkill_level
      {
         j = j * 2;
         i = i + 1;
      }

      return 250 * j;
   }

   GetSchool()
   {
      return viSchool;
   }
   
   KarmaCheck()
   {
      return TRUE;
   }

   GetDivision()
   {
      return LEARN_DIVISION_COMBAT;
   }

   GetDivisionReq(who=$)
   {
      return Send(who,@GetAgility);
   }
   
   GetSkillNum()
   {
      return viSkill_Num;
   }

   GetAbility(who=$)
   {
      return Send(who,@GetSkillAbility,#skill_num=viSkill_num);
   }

   GetPrerequisites()
   {
      return plPrerequisites;
   }

   InitialAbility(who=$)
   "This is the ability level that the target player starts at."
   {
      local iRequisiteStat;

      iRequisiteStat = Send(self,@GetRequisiteStat,#who=who);

      return bound(random(iRequisiteStat/2,iRequisiteStat)/2,1,25);
   }

   CanPayCosts(who=$,oTarget=$)
   "If a skill requires a special cost or requirement of some sort, that"
   "cost goes here.  Example: picking locks may require thieves tools."
   {
      local oOwner, i;

      if Send(who,@HasForgetEnchantment,#what=self)
      {
         return FALSE;
      }

      if not Send(who,@HasVigor,#amount=viSkillExertion) and vbCheck_Exertion = TRUE
      {
         Send(who,@MsgSendUser,#message_rsc=skill_too_tired,#parm1=vrName);

         return FALSE;
      }

      oOwner = Send(who,@GetOwner);

      if oTarget <> $ AND oOwner <> Send(oTarget,@GetOwner)
      {
         Send(who,@MsgSendUser,#message_rsc=skill_out_of_range, 
              #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));

         return FALSE;
      }

      % Used skill flips atrophy flag
      Send(who,@FlipSkillAtrophyFlag,#SKID=viSkill_num);

      return TRUE;
   }

   SuccessChance(who=$,modifier=0)
   "For strokes, this is always true, because stroke success is figured in"
   "other procedures of player kod."
   "Modifier indicates the plusses (or minuses, if negative) to apply to the chance"
   {
      local iRequisiteStat,iAbility,num;

      iRequisiteStat = Send(self,@GetRequisiteStat,#who=who);
      iAbility = Send(who,@GetSkillAbility,#skill_num=viSkill_num);
      num = (iAbility+1)/4 + iRequisiteStat/2;
      num = num *(100+modifier)/100;

      if random(1,100) > num
      {
         return FALSE;
      }

      return TRUE;
   }

   SkillFailed(who=$)
   "A potent skill could have disastrous side effects if failed."
   {
      Send(who,@AddExertion,#amount=(1000*viSkillExertion)/2);
      Send(who,@MsgSendUser,#message_rsc=vrfailed,#parm1=vrName);

      return;
   }

   PayCosts(who=$,modifier=0)
   "Some skills may require certain stats to be depleted."
   "return TRUE if they were successfully depleted."
   {
      if NOT Send(self,@SuccessChance,#who=who,#modifier=modifier)
      {
         Send(self,@SkillFailed,#who=who);

         return FALSE;
      }

      Send(who,@AddExertion,#amount=1000*viSkillExertion);

      return TRUE;
   }

   DoAnimation(who=$)
   "This is put in so eventually, Chris can put in individual animations for"
   "each skill."
   {
      return;
   }

   DoSkill(who = $, oTarget = $)
   "Note: Strokes do not end up calling this routine!"
   "Anything that must be done by all strokes must be put elsewhere!"
   {
      % Do animation.
      Send(self,@DoAnimation,#who=who);

      % Check for advancement conditions.
      Send(self,@ImproveAbility,#who=who,#target=oTarget);  

      return TRUE;
   }

   GetRequisiteStat(who=$)
   "Varies from skill to skill and spell to spell."
   {
      return Send(who,@GetAgility);
   }

   ImproveAbility(who=$,target=$)
   "Improving depends on the player's intellect and requisite stat, his progress in the ability "
	"he is trying to improve as well as its rank, the player's faction and the room he is in."
   {
      local oOwner, iIntellect, iFaction, iAbility, iRequisiteStat, iSpellrank, iRoombonus, iBonus, iFinal;
		
		% This is the room we are in.
		oOwner = Send(who,@GetOwner);
				
		% This block checks if it is possible to improve at all.
      % Monsters cannot improve.
      if NOT IsClass(who,&Player)
      {
         return FALSE;
      }     

      % Cannot improve against some targets e.g. revenants and illusions
      if target <> $ AND NOT Send(target,@CanPlayerAdvanceOnMe)
      {
         return FALSE;
      }
		
		% Cannot improve if you do not have the skill.
      if NOT Send(who,@HasSkill,#num=viskill_num)
      {
         return FALSE;
      }

      % Can only advance in real death arenas.
      if Send(oOwner,@CheckRoomFlag,#flag=ROOM_SAFE_DEATH)
         OR (Send(oOwner,@IsArena) AND NOT Send(oOwner,@ArenaRealDeath))
      {
         return FALSE;
      }

		% This block calculates the actual chance to improve now that it has been established you are eligible.
      % Some rooms will give a slight bonus of up to 20 percent, others will make it almost or entirely impossible to improve.
      if oOwner <> $
      {
         iRoombonus = Send(oOwner,@ModifyChanceToImprove,#who=who,#oSpellSkill=self);
			
			if iRoombonus = CANNOT_IMPROVE
			{
				return FALSE;
			}
      }
		else
		{
			iRoombonus = 0;
		}
		
		% Intellect and requisite stat will give a bonus of up to 100 percent that is offset by your progress in the ability you try to improve.
		iIntellect = Send(who,@GetIntellect);
      iRequisiteStat = Send(self,@GetRequisiteStat,#who=who);
		
		% An ability will get progressively harder to improve the better you get. This penalty is offset by intellect and requisite stat.
      iAbility = Send(who,@GetSpellAbility,#spell_num=viSkill_num)+1;
		% Cannot improve if your ability is maxed.
		if iAbility > 99 
		{
			return FALSE;
		}
		
		% Faction will give you up to a 50 percent bonus to improvement.
		iFaction = Send(Send(SYS,@GetParliament),@GetFactionLearnBonus,#who=who,#theskill=self);
		
		% Higher ranked spells are harder to improve. A rank 6 spell has a 50 percent penalty to improvement.
      iSpellrank =  (Send(self,@GetLevel) - 1) * 10;
		
		iBonus = bound(100 + iIntellect + iRequisiteStat - iAbility + iFaction - iSpellrank + iRoombonus,10,$);
		
      iFinal = viChance_to_increase * iBonus / 10;

      % Admins can set a bonus to the general advancement rate.
      iFinal = (iFinal * Send(Send(SYS, @GetSettings), @GetAdvancementRate)) / 100;

      if random(0,999) < iFinal
      {         
         Send(who,@ChangeSkillAbility,#skill_num=viskill_Num,#amount=1,#report=TRUE);
         
         return TRUE;       
      }
      
      return FALSE;
   }

   GetLevel()
   {
      return viSkill_level;
   }

   GetIntro()
   {
      return vrSkill_intro;
   }

   SendAnimation()
   "Send animation for enchantment icon--default is to cycle through all groups"
   {
      if viAnimationSpeed <> 0
      {
         AddPacket(1,ANIMATE_CYCLE, 4,viAnimationSpeed, 2,viAnimation_start,
                   2,viAnimation_end);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,viAnimation_start);
      }

      return;
   }

   SendLookAnimation()
   "Send animation for enchantment icon--default is to cycle through all groups"
   {
      if viAnimationSpeed <> 0
      {
         AddPacket(1,ANIMATE_CYCLE, 4,viAnimationSpeed, 2,viIcon_Animation_start,
                   2,viIcon_Animation_end);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,viIcon_Animation_start);
      }

      return;
   }

   IsRangedAttack()
   {
      return FALSE;
   }

   GiveAdvice()
   {
      return TRUE;
   }
   
   IsAccessible()
   {
      return TRUE;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Retrieve is UtilitySpell

constants:
   include blakston.khd

resources:

   Retrieve_not_safe = "You must be in a safe area to cast retrieve."
   Retrieve_no_vault = "You don't have any items at a vault within range!"

   Retrieve_items_not_found = "Your vault did not contain %s."
   Retrieve_items_not_enough = "Your vault did not contain enough %s."
   Retrieve_item_not_found = "Your vault did not contain %s%s."
   Retrieve_cant_carry_all = "You can't carry all the %s."
   Retrieve_cant_carry_one = "You can't carry %s%s."
   Retrieve_cant_carry_any = "You can't carry any %s."
   
   Retrieve_cast = "You activate your link with your vault."
   Retrieve_not_set = "You currently have no inventory preferences set."
   
   Retrieve_name_rsc = "retrieve"
   Retrieve_icon_rsc = imend.bgf
   Retrieve_desc_rsc = \
     "Attempts to retrieve gear and reagents from your nearest storage vault, "
     "according to preferences previously registered with the quartermaster.  "

classvars:

   vrName = Retrieve_name_rsc
   vrIcon = Retrieve_icon_rsc
   vrDesc = Retrieve_desc_rsc

   viCast_time = 20000

   viSpell_num = SID_RETRIEVE
   viSpell_level = 1
   viSchool = SS_KRAANAN
   viMana = 0
   viSpellExertion = 0
   viChance_To_Increase = 5

properties:

messages:

   ResetReagents()
   {
      plReagents = $;

      return;
   }
   
   CanPayCosts(who = $)
   {
      local oRoom, oVault;
      
      oVault = $;
      
      oRoom = Send(who,@GetOwner);
      if oRoom = $
         OR Send(oRoom,@GetRegion) <> RID_KOCATAN
      {
         oVault = Send(SYS,@FindVaultByNum,#num=VID_BARLOQUE);
      }
      else
      {
         oVault = Send(SYS,@FindVaultByNum,#num=VID_KOCATAN);
      }
      
%      if Send(oVault,@GetPlayerSafeBox,#who=who) = $
%      {
%         Send(who,@MsgSendUser,#message_rsc=Retrieve_no_vault);
%         return FALSE;
%      }

      if NOT Send(Send(who,@GetOwner),@CheckRoomFlag,#flag=ROOM_NO_COMBAT)
      {
         Send(who,@MsgSendUser,#message_rsc=Retrieve_not_safe);
         return FALSE;
      }
      
      if Send(who,@GetLoadoutList) = $
      {
         Send(who,@MsgSendUser,#message_rsc=Retrieve_not_set);
         return FALSE;
      }

      propagate;
   }

   CastSpell(who = $, lTargets = $)
   {
      local i, n, z, each_obj, countHolding, countNeeded, findAmount,
            class, number, have_number, bFound, plRetrieve_list, plPassive,
            indef, name, plDoNotSearch, bDoNotSearch, school,
            plDoNotSearchSchool, bDoNotSearchSchool, oRoom, oVault,
            plBoxList, plAccessList, b;

      plRetrieve_list = Send(who,@GetLoadoutList);
      plPassive = Send(who,@GetHolderPassive);
      plDoNotSearch = $;
      plDoNotSearch = Cons(&Money,plDoNotSearch);
      plDoNotSearchSchool = $;
      
      Send(who,@MsgSendUser,#message_rsc=Retrieve_cast);
      
      oVault = $;
      plBoxList = $;
      oRoom = Send(who,@GetOwner);
      if oRoom = $
         OR Send(oRoom,@GetRegion) <> RID_KOCATAN
      {
         oVault = Send(SYS,@FindVaultByNum,#num=VID_BARLOQUE);
      }
      else
      {
         oVault = Send(SYS,@FindVaultByNum,#num=VID_KOCATAN);
      }
      
      if oVault <> $
      {
         plAccessList = Send(who,@GetVaultAccessList);
         
         plBoxList = Cons(Send(oVault,@GetPlayerSafeBox,#who=who),plBoxList);
         
         for b in plAccessList
         {
            plBoxList = Cons(Send(oVault,@GetPlayerSafeBox,#who=b),plBoxList);
         }
      }
      
      for i in plRetrieve_list
      {
         class = Nth(i,1);
         number = Nth(i,2);
         indef = Nth(i,3);
         name = Nth(i,4);
         bFound = FALSE;
         bDoNotSearch = FALSE;
         bDoNotSearchSchool = FALSE;
         
         for z in plDoNotSearch
         {
            if z = class
            {
               bDoNotSearch = TRUE;
               break;
            }
         }
         if bDoNotSearch
         {
            continue;
         }

         % Special case for Disciple Robes
         if class = &DiscipleRobe
         {
            school = number;

            for z in plDoNotSearchSchool
            {
               if z = school
               {
                  bDoNotSearchSchool = TRUE;
                  break;
               }
            }
            if bDoNotSearchSchool
            {
               continue;
            }
            
            countHolding = 0;
            for i in plPassive
            {
               each_obj = Send(who,@HolderExtractObject,#data=i);
               If IsClass(each_obj,&DiscipleRobe)
                  AND Send(each_obj,@GetSchool) = school
               {
                  countHolding = countHolding + 1;
               }
            }
            countNeeded = 0;
            for n in plRetrieve_list
            {
               if Nth(n,1) = class
                  AND Nth(n,2) = school
               {
                  countNeeded = countNeeded + 1;
               }
            }
            findAmount = countNeeded - countHolding;
            if countNeeded > countHolding
            {
               bFound = Send(self,@GetDiscipleRobeFromVault,
                             #who=who,#indef=indef,#name=name,#school=school,
                             #oBox=oBox);
               if NOT bFound
               {
                  plDoNotSearchSchool = Cons(school,plDoNotSearchSchool);
               }
            }
            continue;
         }
         
         if number = -1
         {
            % Look for singular item in inventory.
            countHolding = Send(who,@CountHoldingHowMany,#class=class);
            countNeeded = 0;
            for n in plRetrieve_list
            {
               if Nth(n,1) = class
               {
                  countNeeded = countNeeded + 1;
               }
            }
            findAmount = countNeeded - countHolding;
            if countNeeded > countHolding
            {
               bFound = Send(self,@GetSingleItemFromVault,#who=who,
                                  #class=class,#indef=indef,#name=name,
                                  #plBoxList=plBoxList);
               if NOT bFound
               {
                  plDoNotSearch = Cons(class,plDoNotSearch);
               }
            }
         }
         else
         {
            % Look for numbered item. If we find it, check how many of it we have.
            % Get the remainder of (needed - have).
            for n in plPassive
            {
               each_obj = Send(who,@HolderExtractObject,#data=n);
               if isClass(each_obj, class)
               {
                  bFound = true;
                  have_number = Send(each_obj,@GetNumber);

                  if have_number < number
                  {
                     Send(self,@GetNumberItemFromVault,#who=who,#class=class,
                               #number=number-have_number,#name=name,
                               #plBoxList=plBoxList);
                  }                  
                  break;
               }
            }
            if NOT bFound
            {
               Send(self,@GetNumberItemFromVault,#who=who,#class=class,
                         #number=number,#name=name,#plBoxList=plBoxList);
            }
         }
      }

      propagate;
   }

   GetDiscipleRobeFromVault(who=$,class=&DiscipleRobe,indef="an",name="item",
                            school=SS_RIIJA,plBoxList=$)
   {
      local i, each_obj, bFound, oBox;

      bFound = FALSE;
      
      for oBox in plBoxList
      {
         if oBox = $
         {
            continue;
         }

         for i in Send(oBox,@GetHolderPassive)
         {
            each_obj = Send(oBox,@HolderExtractObject,#data=i);
            if IsClass(each_obj,class)
               AND Send(each_obj,@GetSchool) = school
            {
               bFound = TRUE;
               if Send(who,@ReqNewHold,#what=each_obj)
               {
                  Send(who,@NewHold,#what=each_obj);
                  return TRUE;
               }
               else
               {
                  Send(who,@MsgSendUser,
                       #message_rsc=Retrieve_cant_carry_one,
                       #parm1=Send(each_obj,@GetIndef),
                       #parm2=Send(each_obj,@GetTrueName));
                  return FALSE;
               }
            }
         }
      }

      if NOT bFound
      {
         Send(who,@MsgSendUser,#message_rsc=Retrieve_item_not_found,
                               #parm1=indef,#parm2=name);
      }
      return FALSE;
   }

   GetSingleItemFromVault(who=$,class=&Item,indef="an",name="item",plBoxList=$)
   {
      local i, each_obj, bFound, oBox;

      bFound = FALSE;
      
      for oBox in plBoxList
      {
         if oBox = $
         {
            continue;
         }

         for i in Send(oBox,@GetHolderPassive)
         {
            each_obj = Send(oBox,@HolderExtractObject,#data=i);
            if IsClass(each_obj,class)
            {
               bFound = TRUE;
               if Send(who,@ReqNewHold,#what=each_obj)
               {
                  Send(who,@NewHold,#what=each_obj);
                  return TRUE;
               }
               else
               {
                  Send(who,@MsgSendUser,
                           #message_rsc=Retrieve_cant_carry_one,
                           #parm1=Send(each_obj,@GetIndef),
                           #parm2=Send(each_obj,@GetTrueName));
                  return FALSE;
               }
            }
         }
      }

      if NOT bFound
      {
         Send(who,@MsgSendUser,#message_rsc=Retrieve_item_not_found,
                  #parm1=indef,#parm2=name);
      }
      return FALSE;
   }

   GetNumberItemFromVault(who=$,class=&Item,number=-1,name="item",plBoxList=$)
   {
      local i, each_obj, bFound,
            oSplit, iCanHold, iNumInBox, iGetNumber, bSentErrorMsg, oBox;

      if number < 1
      {
         return;
      }
      bFound = FALSE;
      bSentErrorMsg = FALSE;

      for oBox in plBoxList
      {
         if oBox = $
         {
            continue;
         }

         for i in Send(oBox,@GetHolderPassive)
         {
            iGetNumber = number;
            each_obj = Send(oBox,@HolderExtractObject,#data=i);

            if IsClass(each_obj,class)
            {
               iCanHold = Send(who,@GetNumberCanHold,#what=each_obj);
               iNumInBox = Send(each_obj,@GetNumber);
               bFound = TRUE;

               if iGetNumber > iNumInBox
               {
                  iGetNumber = iNumInBox;
               }

               if iCanhold <> $
                  AND iGetNumber > iCanHold
               {
                  if iCanHold > 0
                  {
                     if NOT bSentErrorMsg
                     {
                        Send(who,@MsgSendUser,#message_rsc=Retrieve_cant_carry_all,
                             #parm1=Send(each_obj,@GetTrueName));
                        bSentErrorMsg = TRUE;       
                     }
                  }
                  else
                  {
                     if NOT bSentErrorMsg
                     {
                        Send(who,@MsgSendUser,#message_rsc=Retrieve_cant_carry_any,
                             #parm1=Send(each_obj,@GetTrueName));    
                        bSentErrorMsg = TRUE;       
                     }                      
                     return;
                  }         
                  iGetNumber = iCanHold;
               }

               if iGetNumber > 0
               {
                  oSplit = Send(each_obj,@Split,#number=iGetNumber);
                  if Send(each_obj,@ReqNewOwner,#what=oSplit)
                  {
                     Send(who,@NewHold,#what=oSplit);
                     number = number - iGetNumber;
                     if number < 1
                     {
                        return;
                     }
                  }
                  else
                  {
                     Send(each_obj,@AddNumber,#number=iGetNumber);
                  }
               }        
            }
         }
      }
      
      if NOT bFound
      {
         Send(who,@MsgSendUser,#message_rsc=Retrieve_items_not_found,#parm1=name);
      }
      else
      {
         if number > 0
         {
            Send(who,@MsgSendUser,#message_rsc=Retrieve_items_not_enough,#parm1=name);
         }
      }
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

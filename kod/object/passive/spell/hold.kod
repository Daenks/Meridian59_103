% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Hold is Spell

constants:

   include blakston.khd   

resources:

   hold_name_rsc = "hold"
   hold_icon_rsc = ihold.bgf
   hold_desc_rsc = \
      "Surrounds the target with magical energy, causing "
      "paralysis for several seconds.  "
      "Requires purple mushrooms to cast."
   
   hold_already_enchanted = "%s%s is already held."
   hold_caster = "%s%s stops dead in %s tracks."
   hold_on = "A magical tingling pulses through your body.  You are unable to move."
   hold_off = "The magical hold lifts and you are able to move once more."
	hold_cannot_cast_yet = "You can use the hold spell again in %i seconds."
	hold_victim_immune_caster = "Your target has temporarily grown immune to movement impairing effects!"
	hold_victim_immune_target = "You have temporarily grown immune to movement impairing effects!"

classvars:

   vrName = hold_name_rsc
   vrIcon = hold_icon_rsc
   vrDesc = hold_desc_rsc

   viSpell_num = SID_HOLD
   viSchool = SS_QOR
   viSpell_level = 4

   viSpellExertion = 0
   viMana = 10
	viPostCast_time = 0

   viHarmful = TRUE
   viOutlaw = TRUE
   viNoNewbieOffense = TRUE

   viChance_To_Increase = 10

   viFlash = FLASH_BAD

   % In seconds, since it works off GetTime()
   viPostCast_time = 2

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&PurpleMushroom,2],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
      local target, i;
		
		% Can't cast if we are on internal cooldown.
		if Send(who,@CanCastHold) <> $
      {
			Send(who,@MsgSendUser,#message_rsc=hold_cannot_cast_yet,#parm1=Send(who,@GetHoldCooldown)/1000);
         return FALSE;
      }
      
      % Can cast spell if the 1 target item is a user
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      target = First(lTargets);
      if NOT IsClass(target, &Battler) OR IsClass(target,&Revenant)
      {
         if not bItemCast
         {
            Send(who, @MsgSendUser, #message_rsc=spell_bad_target, 
                 #parm1=vrName,#parm2=Send(target,@GetDef),
                 #parm3=Send(target,@GetName));
         }
         
         return FALSE;
      }

      if target = who
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_no_self_target,#parm1=vrName);
         }
         
         return FALSE;
      }

      % check for enchantment already applied
      if Send(target,@IsEnchanted,#what=self)
      {
         if IsClass(target,&Battler) AND NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=hold_already_enchanted,
                 #parm1=Send(target,@GetCapDef),#parm2=Send(target,@GetName));
         }
         
         return FALSE;
      }
    
      propagate;   % Check other things higher up
   }

   CastSpell(who=$, lTargets=$, iSpellpower=0)
   {
      local oTarget,iDuration;

      oTarget = First(lTargets);
		
      iDuration = Send(self,@GetDuration,#ispellPower=iSpellPower);

		% Spell effects
      Send(self,@DoHold,#who=who,#oTarget=oTarget,#duration=iDuration);
		
		% Internal Cooldown
		Send(who,@InternalCooldown,#spellid=viSpell_num);
      
      propagate;
   }

   EndEnchantment(who = $,report = TRUE,state=$)
   {
      if IsClass(who,&Player)
      {
         Send(who,@EffectSendUser,#what=self,#effect=EFFECT_PARALYZE_OFF);
         if state
         {
            Send(who,@MsgSendUser,#message_rsc=hold_off);
         }
      }
      else  % class is &Monster
      {
         % This has to be done AFTER the enchantment is gone from the
         %  monster's ench list - Post it
         Post(who,@ResetBehaviorFlags);   
      }
     
      return;
   }

   SendEffectData()
   {
      return;
   }

   RestartEnchantmentEffect(who = $, state = $)
   {
      Send(who,@MsgSendUser,#message_rsc=hold_on);
      Send(who,@EffectSendUser,#what=self,#effect=EFFECT_PARALYZE_ON);
      
      return;
   } 

   GetDuration(iSpellPower = 0)
   {
      local iDuration;

      % 3 to 6 seconds based on SP.
      iDuration = 3000 + iSpellPower * 30;

      return iDuration;
   }

   DoHold(who = $, otarget = $, duration = $, report=TRUE, bAllowFreeAction=TRUE)   
   "Holds target for durationsecs seconds."
   {
      local i, oSpell, iTotalDuration, iHeld;
		
		% Deal with nil arguments being passed on.
      if otarget = $
      {
         return FALSE;
      }
		
      % Check if the target is held here since Hold is also applied by other objects than the spell itself.
      if Send(otarget,@IsEnchanted,#what=self)
      {
         return FALSE;
      }
	
		% Let's see if the spell is suffering from diminishing returns.
		iHeld = Send(oTarget,@CanBeHeld);
		
		if iHeld > 0
		{
			duration = duration / 2;
			
			if iHeld > 1
			{
				duration = duration / 2;
				
				if iHeld > 2
				{
					% Target has grown immune to hold.
					if who <> $
					{
						Send(who,@MsgSendUser,#message_rsc=hold_victim_immune_caster);
					}
					Send(oTarget,@MsgSendUser,#message_rsc=hold_victim_immune_target);
					
					return;
				}
			}
		}

		% Increase the diminishing returns counter by 1.
		Send(oTarget,@DiminishingReturns,#spellid=viSpell_num);
		
      % Check if the target has free action unless not allowed.
      if bAllowFreeAction
      {
			% Reduce duration based on free action.
			oSpell = Send(SYS,@FindSpellByNum,#num=SID_FREE_ACTION);
			if Send(oTarget,@IsEnchanted,#what=oSpell)
			{
				duration = Send(oSpell,@DoFreeAction,#oCaster=who,#oTarget=oTarget,#duration=duration);
			}
		}
		
		if duration = 0
		{
			% Resisted completely.
			return;
		}
		
      % Bound
      duration = bound(duration,2000,$);

      Send(oTarget,@StartEnchantment,#what=self,#time=duration,#report=report,#state=report);

      if IsClass(oTarget,&Player)
      {
         if report
         {
            Send(oTarget,@MsgSendUser,#message_rsc=hold_on); 
         }
         
         % Do not paralyze DMs.
         if NOT (IsClass(oTarget,&DM) AND Send(oTarget,@PlayerIsImmortal))
         {
            Send(oTarget,@EffectSendUser,#what=self,#effect=EFFECT_PARALYZE_ON);
         }
      }
      else
      {
         Send(oTarget,@ResetBehaviorFlags);
      }
		
      if IsClass(who,&Player)
		{
			Send(who,@MsgSendUser,#message_rsc=hold_caster,#parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName),#parm3=Send(oTarget,@GetHisHer));
		}
      
      return;
   }

   ModifyMonsterBehavior(mob = $)
   {
      Send(mob,@SetBehaviorFlag,#flag=AI_NOMOVE,#value=TRUE);
      Send(mob,@SetBehaviorFlag,#flag=AI_NOFIGHT,#value=TRUE);
      
      return;      
   }

   SetSpellPlayerFlag(who = $)
   {
      if NOT (IsClass(who,&DM) AND Send(who,@PlayerIsImmortal))
      {
         Send(who,@SetPlayerFlag,#flag=PFLAG_NO_MOVE,#value=TRUE);
         Send(who,@SetPlayerFlag,#flag=PFLAG_NO_FIGHT,#value=TRUE);
         Send(who,@SetPlayerFlag,#flag=PFLAG_NO_MAGIC,#value=TRUE);
      }
      
      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

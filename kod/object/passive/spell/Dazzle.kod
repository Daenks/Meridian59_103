% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Dazzle is Spell

constants:

   include blakston.khd

resources:

   Dazzle_name_rsc = "dazzle"
   Dazzle_icon_rsc = idazzle.bgf
   Dazzle_desc_rsc = \
      "Dazzles the target with the blinding light of Shal'ille's goodness.  "
      "Requires emeralds and purple mushrooms."
   
   Dazzle_caster = "%s%s is now dazzled."
   Dazzle_already_enchanted = "%s%s is already dazzled."

   Dazzle_on = "The world is washed away in a flood of pure light."
   Dazzle_off = "Your vision begins to clear."
	Dazzle_cannot_cast_yet = "You can use the dazzle spell again in %i seconds."
	Dazzle_victim_immune_caster = "Your target has temporarily grown immune to vision impairing effects!"
	Dazzle_victim_immune_target = "You have temporarily grown immune to vision impairing effects!"

   Dazzle_sound = sDazzle.wav

classvars:

   vrName = Dazzle_name_rsc
   vrIcon = Dazzle_icon_rsc
   vrDesc = Dazzle_desc_rsc

   viSpell_num = SID_DAZZLE
   viSchool = SS_SHALILLE
   viSpell_level = 4
   viMana = 10
   viChance_To_Increase = 15

   viSpellExertion = 0
	viPostCast_time = 0

   viOutlaw = TRUE
   viHarmful = TRUE
   viNoNewbieOffense = TRUE

   vrSucceed_wav = Dazzle_sound

properties:
   
messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Emerald,1],plReagents);
      plReagents = Cons([&PurpleMushroom,1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
      local target, i;
		
		% Can't cast if we are on internal cooldown.
		if Send(who,@CanCastDazzle) <> $
      {
			Send(who,@MsgSendUser,#message_rsc=Dazzle_cannot_cast_yet,#parm1=Send(who,@GetDazzleCooldown)/1000);
         return FALSE;
      }
      
      % Can cast spell if the 1 target item is a user
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      target = First(lTargets);
      if NOT IsClass(target,&Battler) OR IsClass(target,&Revenant)
      {
         if not bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_bad_target, 
                 #parm1=vrName,#parm2=Send(target,@GetDef),
                 #parm3=Send(target,@GetName));
         }

         return FALSE;
      }

      if target = who
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_no_self_target,
                 #parm1=vrName);
         }

         return FALSE;
      }

      % check for enchantment already applied
      if Send(target,@IsEnchanted,#what=self)
      {
         if not bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=Dazzle_already_enchanted,
                 #parm1=Send(target,@GetCapDef),#parm2=Send(target,@GetName));
         }

         return FALSE;
      }

      propagate;
   }

   CastSpell(who = $, lTargets = $, iSpellPower = 0)
   {
      local oTarget, iDuration;

      oTarget = First(lTargets);
		
      iDuration = Send(self,@GetDuration,#iSpellPower=iSpellPower,#caster=who,#target=otarget);

      % Spell effects
      Send(self,@DoDazzle,#who=who,#oTarget=oTarget,#duration=iDuration);
		
		% Internal Cooldown
		Send(who,@InternalCooldown,#spellid=viSpell_num);
      
      propagate;
   }

   DoDazzle(who=$,oTarget=$,duration=0)
   {
      local iBlinded, oSpell;

		% Let's see if the spell is suffering from diminishing returns.
		iBlinded = Send(oTarget,@CanBeBlinded);
		
		if iBlinded > 0
		{
			duration = duration / 2;
			
			if iBlinded > 1
			{
				duration = duration / 2;
				
				if iBlinded > 2
				{
					% Target has grown immune to dazzle.
					if who <> $
					{
						Send(who,@MsgSendUser,#message_rsc=Dazzle_victim_immune_caster);
					}
					Send(oTarget,@MsgSendUser,#message_rsc=Dazzle_victim_immune_target);
					
					return;
				}
			}
		}

		% Increase the diminishing returns counter by 1.
		Send(oTarget,@DiminishingReturns,#spellid=viSpell_num);
     
		% Reduce duration based on eagle eyes.
      oSpell = Send(SYS,@FindSpellByNum,#NUM=SID_EAGLE_EYES);
      if Send(oTarget,@IsEnchanted,#what=oSpell)
      {
         duration = Send(oSpell,@DoEagleEyes,#oCaster=who,#oTarget=oTarget,#duration=duration);
      }

		if duration = 0
		{
			% Resisted completely.
			return;
		}
		
      % Bound
      duration = bound(duration,2000,$);

      Send(oTarget,@StartEnchantment,#what=self,#time=duration);

      if IsClass(oTarget,&Player)
      {
         % Do not dazzle DMs.
         if NOT (IsClass(oTarget,&DM) AND Send(oTarget,@PlayerIsImmortal))
         {		
				Send(oTarget,@MsgSendUser,#message_rsc=Dazzle_on);
				Send(oTarget,@EffectSendUserDuration,#effect=EFFECT_WHITEOUT,#duration=duration);
			}
      }
      else
      {
         % Class is Monster
         Post(oTarget,@ResetBehaviorFlags);
      }

      if IsClass(who,&Player)
		{
			Send(who,@MsgSendUser,#message_rsc=Dazzle_caster,#parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));
		}

      return;
   }

   GetDuration(iSpellPower=0,target=$)
   {
      local iDuration;

      % 4 to 8 seconds based on spellpower and up to a 2 seconds bonus depending on the target's karma,
		% to compensate for low spellpower. Capped at 8 seconds.
      iDuration = 4000 + iSpellPower * 40 + 20 * bound(-Send(target,@GetKarma,#detect=TRUE),0,100);
		iDuration = bound(iDuration,2000,8000);
		
      return iDuration;
   }
   
   EndEnchantment(who = $, report = TRUE)
   {
      if IsClass(who,&Player)
      {
         if report
         {
            Send(who,@MsgSendUser,#message_rsc=Dazzle_off);
         }

         Send(who,@EffectSendUserDuration,#effect=EFFECT_PAIN,#duration=2000);
         Send(who,@EffectSendUserXLat,#xlat=0);
      }
      else
      {
         % Class is monster
         % Post this so it's done AFTER the enchantment is gone from the
         % monster's ench list
         Post(who,@ResetBehaviorFlags);
      }
     
      return;
   }

   SetSpellPlayerFlag(who = $)
   {      
      Send(who,@SetPlayerFlag,#flag=PFLAG_NO_FIGHT,#value=TRUE);
      Send(who,@SetPlayerFlag,#flag=PFLAG_NO_MAGIC,#value=TRUE);

      return;
   }

   SendEffectData()
   {
      return;
   }

   RestartEnchantmentEffect(who=$,state=$)
   {
      Send(who,@MsgSendUser,#message_rsc=Dazzle_on);

      return;
   }

   ModifyMonsterBehavior(mob = $)
   {
      Send(mob,@SetBehaviorFlag,#flag=AI_MOVE_RANDOM,#value=TRUE);
      Send(mob,@SetBehaviorFlag,#flag=AI_NOFIGHT,#value=TRUE);

      return;      
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

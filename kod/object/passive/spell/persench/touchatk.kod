% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
TouchAttackSpell is PersonalEnchantment

% A touch attack spell is essentially a 'combat stroke' enchantment.

constants:

   include blakston.khd

   HITVALUE_MAX = 100

resources:

   TouchAttackSpell_name_rsc = "Touch Spell"
   TouchAttackSpell_icon_rsc = light.bgf
   TouchAttackSpell_desc_rsc = "This is a touch spell that does damage."

   TouchAttack_Succeed_rsc = \
      "You have cast a touch attack on another player.  This is a bug.  "
      "Please report it.  Have a nice day."
   TouchAttack_missed1_sound = swswish1.wav
   TouchAttack_missed2_sound = swswish2.wav
   TouchAttack_missed3_sound = swswish3.wav
   
   TouchAttack_hit_sound = patk.wav

classvars:

   vrName = TouchAttackSpell_name_rsc
   vrIcon = TouchAttackSpell_icon_rsc
   vrDesc = TouchAttackSpell_desc_rsc

   vrMiss_sound = $
   
   vrMissed_message_attacker = $
   vrMissed_message_defender = $

   vrAlreadyEnchanted = PersonalEnchantment_already_enchanted_rsc
   vrEnchantment_On = PersonalEnchantment_On_rsc
   vrEnchantment_Off = PersonalEnchantment_Off_rsc
   vrSuccess = PersonalEnchantment_Success_rsc
   vrSucceed = TouchAttack_Succeed_rsc

   vrPlayer_hit_something = $
   vrPlayer_was_hit = $
   vrPlayer_killed_something = $
   vrPlayer_was_killed = $

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSchool = 0
   viSpell_num = 0

   viSpellExertion = 2

   viChance_To_Increase = 10
   viMeditate_ratio = 20

   viMinDamage = 400
   viMaxDamage = 800
   
   viProficiencyBonus = 500

   viRange = 2

   viAttackType = ATCK_WEAP_UNARMED+ATCK_WEAP_PUNCH
   viSpellType = 0          

   viPrimaryStat = STAT_MYSTICISM
   viSecondaryStat = STAT_INTELLECT

   viPostCast_time = 1

   % Cannot enchant others with touch attacks.
   vbCanCastOnOthers = FALSE
   
   % The amount of light added to player's screen.
   viEnchantmentLight = 0

properties:

   plPrerequisites = $
   plReagents = $

messages:

   CanPayCosts(who = $, lTargets = $, iSpellPower = 0)
   {
      propagate;
   }

   CastSpell(who = $,iSpellPower=0,lTargets=$)
   {
      % Remove other touch attack spells.  Won't remove self, because
      %  we've checked for re-enchantment in CanPayCosts.
      Send(who,@RemoveEnchantmentClass,#class=&TouchAttackSpell);
      
      Send(who,@GainLight,#amount=viEnchantmentLight);
      
      propagate;
   }

   EndEnchantment(who = $, report = TRUE, state = 0)
   {
      Send(who,@LoseLight,#amount=viEnchantmentLight);

      % Delete the magic weapon again.
      Send(who,@DeleteMagicWeapon);
      
      propagate;
   }

   GetWeaponStats(who=$,spellpower=0)
   {
      local lstats;

      lstats = [Send(self,@GetMinDamage),
               Send(self,@GetMaxDamage),
               Send(self,@GetProficiencyBonus),
               0,
               100,
               100,
               0,
               0,
               0,
               0,
               0,
               100,
               0,
               0,
               0];

      return lstats;
   }

   GetWeaponTypes()
   {
      local lstats;

      lstats = [viRange,
               viPrimaryStat,
               viSecondaryStat,
               viAttackType,
               viSpellType];

      return lstats;
   }

   GetMinDamage()
   {
      return viMinDamage;
   }
  
   GetMaxDamage()
   {
      return viMaxDamage;
   }

   GetProficiencyBonus()
   {
      return viProficiencyBonus;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   %%% Enchantment support

   GetDuration(iSpellpower=$)
   {
      local iDuration;

      % Up to 16.5 minutes
      iDuration = iSpellPower * 10 * 1000; 

      % Min 2 minutes
      return Bound(iDuration,120000,$);
   }  

   GetStateValue(iSpellpower=$)
   {
      Return iSpellpower;
   }

   SuccessChance(who=$)
   "Allow mages to switch elements despite antagonistic conditions."
   {
      return TRUE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

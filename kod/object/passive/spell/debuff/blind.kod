% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Blind is Debuff

constants:

   include blakston.khd

resources:

   blind_name_rsc = "blind"
   blind_icon_rsc = iblind.bgf
   blind_desc_rsc = \
      "The magical force of Qor burns the target's eyes, "
      "taking away all sight for a brief period.  "
      "Requires two entroot berries and a purple mushroom to cast."

   blind_caster = "%s%s is now blind."
   blind_already_enchanted = "%s%s is already blind."

   blind_on = \
      "Something burns in your eyes, causing excruciating pain and a loss "
      "of vision."
   blind_off = "Your eyes begin to function again."

   blind_sound = qblind.wav
   
   blind_break_rod_active = \
      "Illuminating energies dissipate your spell before you even begin!"

classvars:

   vrName = blind_name_rsc
   vrIcon = blind_icon_rsc
   vrDesc = blind_desc_rsc

   vrAlreadyEnchanted = blind_already_enchanted
   vrEnchantment_On = blind_on
   vrEnchantment_Off = blind_off
   vrSuccess = blind_caster

   viSpell_num = SID_BLIND
   viSchool = SS_QOR
   viSpell_level = 5
   viMana = 15
   viChance_To_Increase = 15
   viMeditate_ratio = 50

   viSpellExertion = 3

   vrSucceed_wav = blind_sound

properties:

   piBaseDuration = 5000 % Recommended value 4000.
   piSpellPowerModifier = 151 % Recommended value 60.
   piDeviation = 50 % Recommended value 10%.

   % Min and max values for Dazzle duration.
   piMinBlind = 3000 % Recommended value 4000.
   piMaxBlind = 20000 % Recommended value 12000.

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&EntrootBerry,2],plReagents);
      plReagents = Cons([&PurpleMushroom,1],plReagents);

      return;
   }

   SetSpellPlayerFlag(who = $)
   {
      if NOT (IsClass(who,&DM) AND Send(who,@PlayerIsImmortal))
      {
         Send(who,@SetPlayerFlag,#flag=PFLAG_NO_FIGHT,#value=TRUE);
         Send(who,@SetPlayerFlag,#flag=PFLAG_NO_MAGIC,#value=TRUE);
      }
      
      return;
   }

   CanPayCosts(who=$,lTargets=$,bItemCast=FALSE)
   {
      local target, i;

      % Can cast spell if the 1 target item is a user
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      target = First(lTargets);

      % TODO: this is not an ideal implementation of blind/hold resistance.
      % These should be enchantments themselves, rather than requiring
      % multiple checks of every item in the target's inventory.
      if IsClass(target,&Player)
      {
         foreach i in Send(target,@GetHolderPassive)
         {
            if IsClass(i,&BreakRodBlind)
               AND Send(i,@IsActive)
            {
               Send(who,@MsgSendUser,#message_rsc=blind_break_rod_active);

               return FALSE;
            }
         }
      }

      if IsClass(who,&Player)
      {
         foreach i in Send(who,@GetHolderPassive)
         {
            if IsClass(i,&BreakRodBlind)
               AND Send(i,@IsSecondaryActive)
            {
               Send(who,@MsgSendUser,#message_rsc=blind_break_rod_active);

               return FALSE;
            }
         }
      }

      propagate;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local oTarget;

      oTarget = First(lTargets);

      % Spell effects
      Send(self,@DoSpell,#what=who,#oTarget=oTarget,
            #iDuration=Send(self,@GetDuration,#iSpellPower=iSpellPower));
      
      propagate;
   }

   DoSpell(what=$,oTarget=$,iDuration=0)
   {
      local oSpell;

      oSpell = Send(SYS,@FindSpellByNum,#NUM=SID_EAGLE_EYES);
      if Send(oTarget,@IsEnchanted,#what=oSpell)
      {
         iDuration = Send(oSpell,@DoEagleEyes,#oCaster=what,#oTarget=oTarget,
                          #iDuration=iDuration);
         if iDuration = $
         {
            % Resisted completely.
            return;
         }
      }

      % Re-check the bound on duration.
      iDuration = Bound(iDuration,piMinBlind,piMaxBlind);

      if IsClass(oTarget,&Player)
      {
         if NOT (IsClass(oTarget,&DM) AND Send(oTarget,@PlayerIsImmortal))
         {
            Send(oTarget,@MsgSendUser,#message_rsc=vrEnchantment_On);
            Send(oTarget,@EffectSendUser,#what=self,#effect=EFFECT_BLIND_ON);
         }
      }
      else
      {
         % class is Monster
         Post(oTarget,@ResetBehaviorFlags);
      }

      Send(what,@MsgSendUser,#message_rsc=vrSuccess,
            #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));
      Send(oTarget,@StartEnchantment,#what=self,#time=iDuration);

      propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      iDuration = piBaseDuration + iSpellPower * piSpellPowerModifier;
      iDuration = Random(iDuration * (100 - piDeviation) / 100,iDuration);

      return iDuration;
   }

   EndEnchantment(who=$,report=TRUE)
   {
      if IsClass(who,&Player)
      {
         Send(who,@EffectSendUser,#what=self,#effect=EFFECT_BLIND_OFF);
         if report
         {
            Send(who,@MsgSendUser,#message_rsc=vrEnchantment_Off);
         }
      }
      else
      {
         % Class is monster.
         % This has to be done AFTER the enchantment is gone from the
         % monster's ench list - post it.
         Post(who,@ResetBehaviorFlags);
      }

      return;
   }

   RestartEnchantmentEffect(who=$,state=$)
   {
      Send(who,@MsgSendUser,#message_rsc=vrEnchantment_On);
      Send(who,@EffectSendUser,#what=self,#effect=EFFECT_BLIND_ON);

      return;
   }

   ModifyMonsterBehavior(mob=$)
   {
      Send(mob,@SetBehaviorFlag,#flag=AI_MOVE_RANDOM,#value=TRUE);
      Send(mob,@SetBehaviorFlag,#flag=AI_NOFIGHT,#value=TRUE);

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

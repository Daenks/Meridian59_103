% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Vertigo is Debuff

constants:

   include blakston.khd

resources:

   Vertigo_name_rsc = "vertigo"
   Vertigo_icon_rsc = ivertigo.bgf
   Vertigo_desc_rsc = \
      "This spell causes the victim to become so ill that they can hardly "
      "stand, much less fight. "
      "Requires two dragonfly eyes and a vial of solagh to cast."

   Vertigo_caster = "%s%s looks strangely dazed... and confused."
   Vertigo_already_enchanted = "%s%s already appears to be freaking."

   Vertigo_on = \
      "Your stomach leaps into your throat and feel as though "
      "someone hit you on the head with a very large hammer."
   Vertigo_off = "You recover from that terrible feeling."

   Vertigo_sound = rvertigo.wav

classvars:

   vrName = Vertigo_name_rsc
   vrIcon = Vertigo_icon_rsc
   vrDesc = Vertigo_desc_rsc

   viSpell_num = SID_VERTIGO
   viSchool = SS_RIIJA
   viSpell_level = 3
   viMana = 12
   viSpellExertion = 10
   viCast_time = 0

   viOutlaw = TRUE
   viHarmful = TRUE
   viNoNewbieOffense = TRUE
   viChance_to_increase = 15
   viMeditate_ratio = 30

   vrSucceed_wav = Vertigo_sound

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&DragonflyEye,2],plReagents);
      plReagents = Cons([&Solagh,1],plReagents);

      return;
   }

   CanPayCosts(who=$,lTargets=$)
   {
      local target, i;

      % Can cast spell if the 1 target item is a user
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      target = First(lTargets);

      if NOT IsClass(target,&Battler) OR IsClass(target,&Revenant)
      {
         Send(who,@MsgSendUser,#message_rsc=spell_bad_target,#parm1=vrName,
               #parm2=Send(target,@GetDef),#parm3=Send(target,@GetName));

         return FALSE;
      }

      if target = who
      {
         Send(who,@MsgSendUser,#message_rsc=spell_no_self_target,#parm1=vrName);

         return FALSE;
      }

      % Check for enchantment already applied
      if Send(target,@IsEnchanted,#what=self)
      {
         Send(who,@MsgSendUser,#message_rsc=Vertigo_already_enchanted,
              #parm1=Send(target,@GetCapDef),#parm2=Send(target,@GetName));

         return FALSE;
      }

      propagate;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local oTarget,iAmount,iDuration,iAgil,iStr,iAim;

      oTarget = First(lTargets);
      iDuration = Send(self,@GetDuration,#iSpellPower=iSpellPower);
      iAmount = Send(self,@GetAmount,#iSpellPower=iSpellPower);

      Send(who,@MsgSendUser,#message_rsc=Vertigo_caster,
           #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));

      % Spell effects
      if IsClass(oTarget,&Player)
      {
         Send(oTarget,@MsgSendUser,#message_rsc=Vertigo_on);
         Send(oTarget,@EffectSendUserDuration,#effect=EFFECT_WAVER,#duration=iDuration);

         iAgil = Send(oTarget,@AddAgility,#points=-iAmount);
         iStr = Send(oTarget,@AddMight,#points=-iAmount);
         iAim = Send(oTarget,@AddAim,#points=-iAmount);

         Send(oTarget,@StartEnchantment,#what=self,#time=iDuration,#state=[-iAgil,-iStr,-iAim]);
      }
      else
      {
         iAgil = Send(oTarget,@AddMonsterAgility,#points=-iAmount);
         iAim = Send(oTarget,@AddMonsterAim,#points=-iAmount);

         Send(oTarget,@StartEnchantment,#what=self,#time=iDuration,#state=[-iAgil,-iAim]);
      }

      propagate;
   }

   GetAmount(iSpellPower=0)
   {
      local iAmount;

      % Stats are reduced between 15-24
      iAmount = 15+(iSpellPower/10);

      return iAmount;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      % Duration is 50-100% of 2.5 sec to 14.75 sec
      iDuration = (10 + iSpellPower/2)*250;

      return Random(iDuration/2,iDuration);
   }

   EndEnchantment(who=$,state=$,report=TRUE)
   {
      if report
      {
         Send(who,@MsgSendUser,#message_rsc=Vertigo_off);
      }

      if IsClass(who,&Player)
      {
         Send(who,@AddAgility,#points=Nth(state,1));
         Send(who,@AddMight,#points=Nth(state,2));
         Send(who,@AddAim,#points=Nth(state,3));
      }
      else
      {
         Send(who,@AddMonsterAgility,#points=Nth(state,1));
         Send(who,@AddMonsterAim,#points=Nth(state,2));
      }

      return;
   }

   RestartEnchantmentEffect(who=$,state=$)
   {
      local i, iDuration, oList;

      oList = Send(who,@GetEnchantmentList);

      for i in oList
      {
         if Nth(i,2) = self
         {
            iDuration = GetTimeRemaining(Nth(i,1));
         }
      }

      Send(who,@MsgSendUser,#message_rsc=Vertigo_on);
      Send(who,@EffectSendUserDuration,#effect=EFFECT_WAVER,#duration=iDuration);

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

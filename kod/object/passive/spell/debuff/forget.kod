% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ForgetSpell is Debuff

constants:

   include blakston.khd

   FORGET_BASE_TIME = 60000
   FORGET_PER_SPELLPOWER = 787

resources:

   forgetspell_name_rsc = "forget"
   forgetspell_icon_rsc = iforget.bgf
   forgetspell_desc_rsc = \
      "Causes the victim to forget his or her own abilities.  "
      "Requires two firesand and two uncut seraphym to cast."

   forgetspell_already_enchanted = \
      "You can't seem to make %s%s any more forgetful."

   forgetspell_on = "The art of %s slips from your mind."
   forgetspell_off = \
      "You suddenly recall what it was that you had forgotten."
   forgetspell_caster = \
      "You glare at %s%s and they appear momentarily confused."
   forgetspell_cast_self = \
      "It occurs to you that casting forget on yourself may cause you to "
       "forget forgetting what you had forgotten, and thus you might forget "
       "not forgetting all you had forgotten when the forget spell leaves "
       "you, and so you forget about it."

   forgetspell_caster_failed = \
      "%s%s is too stupid to make any stupider!"

   forgetspell_sound = rforget.wav

classvars:

   vrSucceed_wav = forgetspell_sound
   vrName = forgetspell_name_rsc
   vrIcon = forgetspell_icon_rsc
   vrDesc = forgetspell_desc_rsc

   viSpell_num = SID_FORGET
   viSpell_level = 2
   viSchool = SS_RIIJA
   viMana = 20
   viSpellExertion = 10
   viCast_time = 0
   viChance_to_increase = 25
   viMeditate_ratio = 30

   viFlash = FLASH_BAD

   viOutlaw = TRUE
   viHarmful = TRUE

   vbCastable_in_HappyLand = FALSE

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&FireSand,2],plReagents);
      plReagents = Cons([&UncutSeraphym,2],plReagents);

      return;
   }

   CanPayCosts(who=$,lTargets=$,bItemCast=FALSE)
   {

      if who = first(lTargets)
      {
         if not bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=forgetspell_cast_self);
         }

         return FALSE;
      }

      if not IsClass(First(lTargets),&Player)
      {
         return FALSE;
      }

      % Check for enchantment already applied
      if Send(First(lTargets),@CheckPlayerFlag,#Flag=PFLAG_FORGOTTEN)
      {
         if not bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=forgetspell_already_enchanted,
                 #parm1=Send(First(lTargets),@GetIndef),#parm2=Send(First(lTargets),@GetName));
         }

         return FALSE;
      }

      propagate;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local iPowerLeft,iTime,i,lSkills,lSpells,oTarget,lState,
            iCompound,iAbilityNum,oAbility,iSkillLength,iSpellLength;

      lState = $;
      oTarget = Nth(lTargets,1);
      lSkills = Send(oTarget,@GetSkillList);
      lSpells = Send(oTarget,@GetSpellList);
      iPowerLeft = iSpellPower;

      iTime = FORGET_BASE_TIME;
      iTime = iTime + (FORGET_PER_SPELLPOWER * iSpellPower);
      iTime = iTime + Random(-60000,60000);

      iSkillLength = Length(lSkills);
      iSpellLength = Length(lSpells);

      if iSkillLength = 0 and iSpellLength = 0
      {
         Send(who,@MsgSendUser,#message_rsc=forgetspell_caster_failed,
               #parm1=Send(oTarget,@GetCapDef),
               #parm2=Send(oTarget,@GetName,#cap=TRUE));

         propagate;
      }

      % There is no protection to keep from forgetting the same spell
      % twice, this isn't a problem, and can make the spell more dynamic
      % in that there is a failure clause, in that a player won't lose as
      % many spells/skills.  It also protects players who don't have many
      % skills from losing all that they do have

      while iPowerLeft > 0
      {
         oAbility = $;
         
         if iSpellLength = 0
         {
            i = 2;
         }
         else
         {
            if iSkillLength = 0
            {
               i = 1;
            }
            else
            {
               i = Random(1,2);
            }
         }

         if i = 1 AND iSpellLength > 0
         {
            i = Random(1,iSpellLength);
            iCompound = Nth(lSpells,i);
            iAbilityNum = Send(oTarget,@DecodeSpellNum,#compound=iCompound);
            oAbility = Send(SYS,@findspellbynum,#num=iAbilityNum);
         }
         else 
         {
            if iSkillLength > 0
            {
               i = Random(1,iSkillLength);
               iCompound = Nth(lSkills,i);
               iAbilityNum = Send(oTarget,@DecodeSkillNum,#compound=iCompound);
               oAbility = Send(SYS,@FindSkillByNum,#num=iAbilityNum);
            }
         }

         lState = Cons(oAbility,lState);
         iPowerLeft = iPowerLeft - 24;
      }

      for i in lState
      {
         if i <> $
         {
            Send(oTarget,@MsgSendUser,#message_rsc=forgetspell_on,
                  #parm1=Send(i,@GetName));
         }
      }

      Send(who,@MsgSendUser,#message_rsc=forgetspell_caster,
            #parm1 = Send(oTarget,@GetIndef),
            #parm2 = Send(oTarget,@GetName));

      Send(oTarget,@StartEnchantment,#what=self,#time=iTime,#state=lState);

      propagate;
   }


   EndEnchantment(who=$,report=TRUE)
   {
      if report
      {
         Send(who,@MsgSendUser,#message_rsc=forgetspell_off);
      }

      return;
   }

   SetSpellPlayerFlag(who = $)
   {
      Send(who,@SetPlayerFlag,#flag=PFLAG_FORGOTTEN,#value=TRUE);

      return;
   }

   IsIllusion()
   {
      return TRUE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

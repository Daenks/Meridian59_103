% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Dazzle is Debuff

constants:

   include blakston.khd

resources:

   Dazzle_name_rsc = "dazzle"
   Dazzle_icon_rsc = idazzle.bgf
   Dazzle_desc_rsc = \
      "Dazzles the target with the blinding light of Shal'ille's goodness.  "
      "Requires an emerald and a purple mushroom to cast."
   
   Dazzle_caster = "%s%s is now dazzled."
   Dazzle_already_enchanted = "%s%s is already dazzled."

   Dazzle_on = "The world is washed away in a flood of pure light."
   Dazzle_off = "Your vision begins to clear."

   Dazzle_sound = sDazzle.wav

classvars:

   vrName = Dazzle_name_rsc
   vrIcon = Dazzle_icon_rsc
   vrDesc = Dazzle_desc_rsc

   vrAlreadyEnchanted = Dazzle_already_enchanted
   vrEnchantment_On = Dazzle_on
   vrEnchantment_Off = Dazzle_off
   vrSuccess = Dazzle_caster

   viSpell_num = SID_DAZZLE
   viSchool = SS_SHALILLE
   viSpell_level = 4
   viMana = 12
   viChance_To_Increase = 15
   viMeditate_ratio = 30

   viSpellExertion = 3

   vrSucceed_wav = Dazzle_sound

properties:

   piSpellPowerMultiplier = 40
   piKarmaPowerMultiplier = 10
   piBaseDuration = 3000
   piDeviation = 10

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Emerald,1],plReagents);
      plReagents = Cons([&PurpleMushroom,1],plReagents);

      return;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local oTarget, iDuration;

      oTarget = First(lTargets);
      iDuration = Send(self,@GetDuration,#iSpellPower=iSpellPower,
                        #caster=who,#target=oTarget);

      Send(self,@DoSpell,#what=who,#oTarget=oTarget,#iDuration=iDuration);

      propagate;
   }

   DoSpell(what=$,oTarget=$,iDuration=0)
   {
      local oSpell;

      oSpell = Send(SYS,@FindSpellByNum,#NUM=SID_EAGLE_EYES);
      if Send(oTarget,@IsEnchanted,#what=oSpell)
      {
         iDuration = Send(oSpell,@DoEagleEyes,#oCaster=what,#oTarget=oTarget,
                           #iDuration=iDuration,#iFactor=2);
         if iDuration = $
         {
            % Resisted completely.
            return;
         }
      }

      iDuration = Bound(iDuration,3000,8000);

      if IsClass(oTarget,&Player)
      {
         Send(oTarget,@MsgSendUser,#message_rsc=vrEnchantment_On);
         Send(oTarget,@EffectSendUserDuration,#effect=EFFECT_WHITEOUT,
               #duration=iDuration);
      }
      else
      {
         % Class is Monster
         Post(oTarget,@ResetBehaviorFlags);
      }

      Send(what,@MsgSendUser,#message_rsc=vrSuccess,
            #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));

      Send(oTarget,@StartEnchantment,#what=self,#time=iDuration);

      propagate;
   }

   GetDuration(iSpellPower=0,caster=$,target=$)
   {
      local iDuration,iKarma;

      % 3-7 seconds based on spellpower.
      iDuration = piBaseDuration + iSpellPower * piSpellPowerMultiplier;
      if IsClass(caster,&Battler)
      {
         iKarma = Send(caster,@GetKarma);
      }
      else
      {
         % Non battlers, like the sun
         iKarma = random(30,90);
      }

       % Add up to an extra second based on karma (in practice, 400-1000ms)
      iDuration = Bound(iDuration + (iKarma * piKarmaPowerMultiplier) ,3000,8000);
      iDuration = Random(iDuration*(100-piDeviation)/100,iDuration);

      return iDuration;
   }

   EndEnchantment(who=$,report=TRUE)
   {
      if IsClass(who,&Player)
      {
         if report
         {
            Send(who,@MsgSendUser,#message_rsc=vrEnchantment_Off);
         }

         Send(who,@EffectSendUserDuration,#effect=EFFECT_PAIN,#duration=1000);
         Send(who,@EffectSendUserXLat,#xlat=0);
      }
      else
      {
         % Class is monster
         % Post this so it's done AFTER the enchantment is gone from the
         % monster's ench list
         Post(who,@ResetBehaviorFlags);
      }

      return;
   }

   SetSpellPlayerFlag(who=$)
   {
      Send(who,@SetPlayerFlag,#flag=PFLAG_NO_FIGHT,#value=TRUE);
      Send(who,@SetPlayerFlag,#flag=PFLAG_NO_MAGIC,#value=TRUE);

      return;
   }

   RestartEnchantmentEffect(who=$,state=$)
   {
      local i, iDuration, oList;

      Send(who,@MsgSendUser,#message_rsc=vrEnchantment_On);

      oList = Send(who,@GetEnchantmentList);

      for i in oList
      {
         if Nth(i,2) = self
         {
            iDuration = GetTimeRemaining(Nth(i,1));
         }
      }

      Send(who,@EffectSendUserDuration,#effect=EFFECT_WHITEOUT,
            #duration=iDuration);

      return;
   }

   ModifyMonsterBehavior(mob=$)
   {
      Send(mob,@SetBehaviorFlag,#flag=AI_MOVE_RANDOM,#value=TRUE);
      Send(mob,@SetBehaviorFlag,#flag=AI_NOFIGHT,#value=TRUE);

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DeathRift is TeleportationSpell

constants:

   include blakston.khd

resources:

   DeathRift_name_rsc = "death rift"
   DeathRift_icon_rsc = ideadoor.bgf
   DeathRift_desc_rsc = \
      "By calling upon a pact with the most ancient of dark forces, "
      "the truest disciples of Qor may traverse the fiery pits of the "
      "Underworld while still retaining life. The interdimensional "
      "pathways can lead Qor's favored to many locations, including "
      "one dedicated destination of their choosing."
      "Requires a large number of dark angel feathers to cast."

   DeathRift_sound = qdthdoor.wav

   DeathRift_no_angeled = "You cannot call upon such an evil pact while your guardian angel watches over you."
   DeathRift_bind = "You leave a smattering of blood at the ground beneath your feet, binding a small part of your soul to this location."
   DeathRift_travel = "A vast passage of flames opens, and you find yourself pulled to the Underworld!"
   DeathRift_travel_notify = "A fiery portal flares open briefly, dragging %s to the Underworld!"
   DeathRift_travel_notify_with_dest = "A fiery portal flares open briefly, dragging %s through the Underworld and toward %s!"
   DeathRift_generic_fail = "The evil pact's magic fails. Something seems amiss."
   DeathRift_warning = "~BYou sense a nearby connection forming between dimensions!"
   
   Death_Rift_Start = "You begin summoning the flames of the Underworld..."
   Death_Rift_Already_Cast = "You can't summon further energies, as you are already attempting to teleport."
   
classvars:

   vrName = DeathRift_name_rsc
   vrIcon = DeathRift_icon_rsc
   vrDesc = DeathRift_desc_rsc

   Teleport_Start_Rsc = Death_Rift_Start
   Teleport_Already_Cast_Rsc = Death_Rift_Already_Cast
   
   viSpell_num = SID_DEATH_RIFT
   viSchool = SS_QOR
   viSpell_level = 6
   viMana = 20
   viSpellExertion = 50

   viChance_To_Increase = 10
   viMeditate_ratio = 100

   vrSucceed_wav = DeathRift_sound
   viFlash = FLASH_BAD
   
   vbIsCombatRestricted = FALSE

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&DarkAngelFeather,6],plReagents);

      return;
   }

   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
      local oRoom;

      if NOT Send(who,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE)
      {
         Send(who,@MsgSendUser,#message_rsc = DeathRift_no_angeled);
         return FALSE;
      }
      
      oRoom = Send(who,@GetOwner);
      
      if oRoom = $
         OR NOT Send(oRoom,@CanHavePlayerPortal)
         OR Send(oRoom, @GetRegion) = RID_NEWB_BASE
         OR Send(oRoom, @GetRegion) = RID_GUEST_BASE
      {
         Send(who,@MsgSendUser,#message_rsc=DeathRift_generic_fail);
         return FALSE;
      }
      
      propagate;
   }

   CastSpell(who=$)
   {
      local oRoom;
      
      oRoom = Send(who,@GetOwner);
      
      if oRoom <> $
         AND NOT (Send(oRoom,@CheckRoomFlag,#flag=ROOM_NO_COMBAT)
                  AND Send(oRoom,@CheckRoomFlag,#flag=ROOM_SAFELOGOFF))
      {
         Send(who,@MsgSendUser,#message_rsc=DeathRift_bind);
         Send(who,@BindPlayerToCurrentLocation);
         return;
      }
   
      propagate;
   }

   DoTeleport(who = $, lTargets = $)
   {
      local oRoom, oTargetRoom, i, each_active;

      oRoom = Send(who,@GetOwner);

      if oRoom <> $
         AND Send(oRoom,@CheckRoomFlag,#flag=ROOM_NO_COMBAT)
         AND Send(oRoom,@CheckRoomFlag,#flag=ROOM_SAFELOGOFF)
      {
         Send(who,@MsgSendUser,#message_rsc=DeathRift_travel);
         
         oTargetRoom = Send(SYS,@FindRoomByNum,#num=Send(who,@GetBoundLocationRoomNum));
         if oTargetRoom <> $
         {
            for i in Send(oTargetRoom,@GetHolderActive)
            {
               each_active = Send(oTargetRoom,@HolderExtractObject,#data=i);
               if IsClass(each_active,&User)
               {
                  Send(each_active,@MsgSendUser,#message_rsc=DeathRift_warning);
                  Send(each_active,@WaveSendUser,#row=Send(who,@GetBoundLocationRow),
                       #col=Send(who,@GetBoundLocationCol),#wave_rsc=DeathRift_sound);
               }
            }
         }
         
         for i in Send(oRoom,@GetHolderActive)
         {
            each_active = Send(oRoom,@HolderExtractObject,#data=i);
            If IsClass(each_active,&User)
               AND each_active <> who
            {
               if oTargetRoom <> $
               {
                  Send(each_active,@MsgSendUser,#message_rsc=DeathRift_travel_notify_with_dest,
                       #parm1=Send(who,@GetName),#parm2=Send(oTargetRoom,@GetName));
               }
               else
               {
                  Send(each_active,@MsgSendUser,#message_rsc=DeathRift_travel_notify,
                       #parm1=Send(who,@GetName));
               }
            }
         }
         
         Post(who,@UserGotoDeadRoom);
         Post(who,@SetDeathRiftProtection,#value=TRUE);
         Post(who,@StartDeathRiftTimer);
      }

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

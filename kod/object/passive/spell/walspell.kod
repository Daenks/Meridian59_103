% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
WallSpell is Spell

constants:

   include blakston.khd

resources:

   WallSpell_outlaw = \
      "\nNOTE: If your safety is ON, this spell will not affect innocents.  "
      "If your safety is OFF, you can become an outlaw for harming other players."
   WallSpell_outlaw_murderer = \
      "\nNOTE: If your safety is ON, this spell will not affect innocents.  "
      "If your safety is OFF, you can become an outlaw for harming other players "
      "or a murderer for killing other players."

   WallSpell_failed_rsc = \
      "There is too much summoning magic focused here to cast that spell." 

classvars:

   viHarmful = TRUE

   % Can wall elements kill?  Affects the warning message we append.
   viWallCanKill = TRUE

   % How many empty spots does the room need before we can summon the wall?
   viNumElements = 1

   vrSummonLimitMsg = WallSpell_failed_rsc

properties:


messages:

   CanPayCosts(who = $)
   {
      if NOT Send(self,@CheckForSummoningLimit,#who=who)
      {
         return FALSE;
      }

      propagate;
   }

   DoubleCheckAfterTrance(who = $, lTargets = $, iSpellPower = 0)
   {
      if NOT Send(self,@CheckForSummoningLimit,#who=who)
      {
         return FALSE;
      }

      propagate;
   }      

   GetNumSpellTargets()
   {
      return 0;
   }

   CastSpell(who = $, lTargets = $, iSpellPower = 1)
   {
      Send(self,@CreateWallSeed,#who=who,#iSpellPower=iSpellPower);

      propagate;
   }

   CreateWallSeed(who = $, iSpellPower = 0)
   {
      local iAngle, iDirection, lSeed;

      iAngle = Send(who,@GetAngle);
      
      iDirection = Send(self,@GetDirection,#who=who);

      % This is a generic seed, individual spells may create different ones.
      % [(1)caster,(2)spellpower,(3)duration,(4)charges,(5)speed,(6)direction,(7)step,(8)noise,(9)twirl]
      lSeed = [who,iSpellPower,1200*iSpellPower,iSpellPower/10,20000/iSpellPower,iDirection,1,63*(100-iSpellpower)/100,0];

      Send(self,@PlaceWallElements,#seed=lSeed);

      return;
   }

   SpawnElement(seed=$,who=$,xoffset=0,yoffset=0,walltype=$)
   {
      local iCol, iRow, oElement, oRoom;

      oRoom = Send(who,@GetOwner);
      
      iCol = Send(who,@GetCol) + xoffset;
      iRow = Send(who,@GetRow) + yoffset;

      oElement = Create(walltype,#seed=seed);
      Send(oRoom,@NewHold,#what=oElement,#new_row=iRow,#new_col=iCol,#fine_row=Send(who,@GetFineRow),#fine_col=Send(who,@GetFineCol));
      
      return;
   }

   GetDirection(who=$)
   {
      local iAngle;

      iAngle = Send(who,@GetAngle);

      % Facing North
      if iAngle >= ANGLE_NNW AND iAngle < ANGLE_NNE
      {
         return 0;
      }

      % Facing NorthEast
      if iAngle >= ANGLE_NNE AND iAngle < ANGLE_ENE
      {
         return 1;
      }

      % Facing East
      if iAngle >= ANGLE_ENE OR iAngle < ANGLE_ESE
      {
         return 2;
      }

      % Facing SouthEast
      if iAngle >= ANGLE_ESE AND iAngle < ANGLE_SSE
      {
         return 3;
      }

      % Facing South
      if iAngle >= ANGLE_SSE AND iAngle < ANGLE_SSW
      {
         return 4;
      }

      % Facing SouthWest
      if iAngle >= ANGLE_SSW AND iAngle < ANGLE_WSW
      {
         return 5;
      }

      % Facing West
      if iAngle >= ANGLE_WSW AND iAngle < ANGLE_WNW
      {
         return 6;
      }

      % Facing NorthWest
      if iAngle >= ANGLE_WNW AND iAngle < ANGLE_NNW
      {
         return 7;
      }
      
      return 0;
   }

   GetXStep(direction=0)
   {
      % Facing North or South
      if direction = 0 OR direction = 4 
      {
         return 0;
      }

      % Facing Eastish
      if direction < 4
      {
         return 1;
      }

      % Facing Westish
      return -1;

   }
   
   GetYStep(direction=0)
   {
      % Facing East or West
      if direction = 2 OR direction = 6 
      {
         return 0;
      }

      % Facing Southish
      if direction = 3 OR direction = 4 OR direction = 5  
      {
         return 1;
      }

      % Facing Northish
      return -1;

   }

   PlaceWallElements(who = $, lTargets=$, iSpellPower = 0)
   "Does the actual work of placing wall elements."
   {
      return;
   }

   CheckForSummoningLimit(who = $)
   "Checks to see if we'll go over room's summon limit.  Returns TRUE if not."
   {
      local oRoom;

      oRoom = Send(who,@GetOwner);
      if ((Send(oRoom,@CountHoldingSummoned) + viNumElements)
          > Send(Send(SYS, @GetSettings), @GetPlayerSummonedObjectLimit))
      {
         Send(who,@MsgSendUser,#message_rsc=vrSummonLimitMsg);

         return FALSE;
      }

      return TRUE;
   }

   GetExtraDesc()
   {
      if viHarmful
         AND Send(SYS,@IsPKAllowed)
      {
         if viWallCanKill
         {
            % Give a little warning about harming or killing other players.
            return WallSpell_outlaw_murderer;
         }

         % Can't kill, just warn about outlaw status;
         return WallSpell_outlaw;
      }

      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

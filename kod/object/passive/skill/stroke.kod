% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Stroke is Skill

constants:

   include blakston.khd

   HITVALUE_MAX = 100

resources:
   stroke_name_rsc = "Weapon stroke"
   stroke_icon_rsc = light.bgf
   stroke_desc_rsc = "This is a weapon stroke."

   stroke_need_weapon_rsc = "You need a weapon to perform this stroke!"

   stroke_miss_attacker = "%sYour %s misses %s%s."
   stroke_miss_defender = "%s%s misses you."
   stroke_miss_sound = swordmis.wav

   stroke_hit_attacker = "%sYour %s hits %s%s."
   stroke_hit_defender = "%s%s hits you."

   stroke_hit_sound = patk.wav

   stroke_swish1 = swswish1.wav
   stroke_swish2 = swswish2.wav
   stroke_swish3 = swswish3.wav

classvars:

   vrName = stroke_name_rsc
   vrIcon = stroke_icon_rsc
   vrDesc = stroke_desc_rsc

   vrPlayer_Hit_something = stroke_hit_attacker
   vrPlayer_was_hit = stroke_hit_defender
   vrPlayer_killed_something = $
   vrPlayer_was_killed = $

   vrMissed_Message_attacker = stroke_miss_attacker
   vrMissed_Message_defender = stroke_miss_defender
   vrMiss_Sound = stroke_miss_sound

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSchool = SKS_FENCING
   viSkill_num = SKID_DEFAULT
   viSkill_Exertion = 2

   vbAutomatic = FALSE

properties:

   plPrerequisites = $

messages:  

   % General combat messages:

   % Can player dodge this type of attack?
   CanDodge()
   {
      return TRUE;
   }

   % Can player block this type of attack?
   CanBlock()
   {
      return TRUE;
   }

   %Can player parry this type of attack?
   CanParry()
   {
      return TRUE;
   }

   % The unsorted messages:

   ImproveStroke(who=$,use_weapon=$,target=$)
   {
     local prof, target_level;

     target_level = send(target,@GetLevel);
     prof=send(use_weapon,@GetProfNumber);

     if random(1,100) > 60 or not send(who,@HasSkill,#num=prof)
     {
        if send(who,@GetSkillAbility,#skill_num=viSkill_num) < 100
          {
             % checking for stroke advancement
             send(self,@ImproveAbility,#who=who,#target=target,#bonus=Send(who,@GetWeaponSwingBonus));
          }
     }
     else
     {
        if send(use_weapon,@getprof,#who=who) < 100
          {
             % checking for weapon proficiency advancement
             send(use_weapon,@ImproveProficiency,#who=who,#target=target,#bonus=Send(who,@GetWeaponSwingBonus));
          }
     }
     
     return;
   }

   SuccessChance()
   "Always returns TRUE for combat strokes since their missing or hitting is"
   "determined in battler.kod, not here."
   {
      return TRUE;
   }

   CanPayCosts(who=$,oTarget=$)
   "If a skill requires a special cost or requirement of some sort, that"
   "cost goes here.  Example:  picklocking may require thieves tools."
   {
      local oOwner, i;

      if not send(who,@HasVigor,#amount=viSkillExertion) and vbCheck_Exertion = TRUE
      {
         send(who,@MsgSendUser, #message_rsc=skill_too_tired,#parm1=vrName);
         
         return FALSE;
      }

      propagate;
   }

   GetExertion()
   "Sword strokes vary in their vigor cost."
   {
      % Return amount of vigor (hundreths) to cast skill
      return viSkill_Exertion;
   }

   DoAnimation(who=$)
   "Do the weapon's swing animation."
   {
      Send(who,@DoSwing);

      return;
   }

   FindDamage(use_weapon=$, who=$, what=$)
   {
      local iDamage, iMin, iMax, iSkill, iBonus, iStat, iFactor, iPower,
         iStrokeMod, iSpecialBonus;

      % Get base values from the weapon.
      iMin = Send(use_weapon,@GetMinDamage,#who=who,#what=what);
      iMax = Send(use_weapon,@GetMaxDamage,#who=who,#what=what);

      % Pick damage at random within the base values.
      iDamage = random(iMin,iMax);

      % Factor in proficiency with the weapon.
      iSkill = Send(who,@GetSkillAbility,#Skill_num=Send(use_weapon,@GetProfNum));
      iBonus = Send(use_weapon,@GetProficiencyBonus) * iSkill / 100;
      iDamage = iDamage + iBonus;
      
      % Allow the weapon to add a special effect based on its secondary stat. 
      % This may include, but is not limited to extra damage.
      iFactor = Send(use_weapon,@GetSecondaryScaling);
      iStat = Send(who,@GetStat,#stat=Send(use_weapon,@GetSecondaryStat));
      iPower = iFactor * iStat / 50 ;
      iBonus = Send(use_weapon,@DoSpecialEffect,#who=who,#what=what,#stroke_obj=self,#power=iPower);
      iDamage = iDamage + iBonus;

      % Scale the whole thing with the weapon's primary stat.
      iFactor = Send(use_weapon,@GetPrimaryScaling);
      iStat = Send(who,@GetStat,#stat=Send(use_weapon,@GetPrimaryStat));
      iPower = iFactor * iStat / 50 ;
      iDamage = iDamage + iDamage * iPower / 100;

      % Finally, scale damage with the stroke modifier the weapon carries,
      % factoring in the player's expertise in the stroke.
      iSkill = Send(use_weapon,@GetStrokeAbility,#who=who,#Skill_num=viSkill_num);
      iStrokeMod = Send(use_weapon,@GetStrokeMod,#Skill_num=viSkill_num);
      iDamage = iDamage * (50 + (iSkill/2)) * iStrokeMod / 10000;

      return bound(iDamage,0,$);
   }

   SendMissMessageToAttacker(who=$,victim=$,use_weapon = $,color_rsc = $,bText = TRUE)
   {
      local iRoll;

      %% Text messages
      if bText
      {
         send(who,@msgsenduser,#message_rsc=vrMissed_Message_Attacker,#parm1=color_rsc,
              #parm2=vrName,#parm3=send(victim,@getdef),#parm4=send(victim,@getname));
      }

      %% 'miss' sound
      if IsClass(victim,&Monster) or use_weapon = $
      {
         iRoll = Random(1,3);
         
         if iRoll = 1
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish1);
         }
         
         if iRoll = 2
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish2);
         }
         
         if iRoll = 3
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish3);
         }
      }
      else
      {
         iRoll = Random(1,12);

         if iRoll = 1
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish1);
         }
         
         if iRoll = 2
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish2);
         }
         
         if iRoll = 3
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish3);
         }
         
         if iRoll >= 4
         {   
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,
                 #wave_rsc=Send(victim,@GetSomethingMissedYouSound,#what=who,
                 #use_weapon=use_weapon)); 
         }
      }
      
      return;
   }

   SendMissMessageToDefender(who=$,attacker=$)
   {
      send(who,@MsgSendUser,#message_rsc=vrMissed_Message_Defender,
           #parm1=send(attacker,@getcapdef),#parm2=send(attacker,@getname));
           
      return;
   }

   PlayerHitSomethingMsg(who=$,victim=$,damage=$,color_rsc=$)
   {
      send(who,@msgsenduser,#message_rsc=vrPlayer_hit_something,#parm1=color_rsc,#parm2=vrName,
           #parm3=send(victim,@getdef),#parm4=send(victim,@getname));
           
      return;
   }

   PlayerWasHitMsg(who=$,attacker=$,damage=$,color_rsc=$)
   {
       send(who,@msgsenduser,#message_rsc=vrPlayer_was_hit,#parm1=color_rsc,
            #parm2=send(attacker,@getcapdef),#parm3=send(attacker,@getname));
            
       return;
   }

   PlayerKilledSomethingMsg(who=$,victim=$,damage=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise"
   "player.kod will offer the default 'You killed the whatever' message."
   {
      if vrPlayer_killed_Something = $
      {
         return FALSE;
      }
       
      send(who,@msgsenduser,#message_rsc=vrPlayer_killed_something,
            #parm1=send(victim,@getCapdef),#parm2=send(victim,@getname));
            
      return TRUE;
   }

   PlayerWasKilledMsg(who=$,attacker=$,damage=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise"
   "player.kod will just choose a default - as it does for most strokes."
   {
      if vrPlayer_was_hit = $
      {
         return FALSE;
      }
      
      send(who,@MsgSendUser,#message_rsc=vrPlayer_was_killed,
           #parm1=send(attacker,@GetDef),#parm2=send(attacker,@GetName));
           
      return TRUE;
   }

   GetHitSound()
   {
      return stroke_hit_sound;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
